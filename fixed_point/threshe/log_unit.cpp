#include "bmp/EasyBMP.h"
#include <math.h>
using namespace std;

#define NHIST 256               /* no. bins in histogram */

float getLog2(float in){
	float power = 1.0f;;
	float sum = 0;
	int i,j;
	float x = (in - 1.0f);
	//number of expansions we want to do
	for (i = 1; i <= 16; i++) {
		power = power * (x);
		if((i+1)%2){
			sum -= (1.0f / i) * power;
		}
		else{
			sum += (1.0f / i) * power;
		}		
	}
	return sum;
}
float getLog(float in){
	static float offsetLUT[36] = {
-11.78350209,
-11.09035491,
-10.39720773,
-9.991742621,
-9.704060548,
-9.29859544,
-9.010914349,
-8.605448914,
-8.317768727,
-7.912303099,
-7.624619568,
-7.21915512,
-6.931470235,
-6.726197878,
-6.526005844,
-6.409587412,
-6.238324625,
-6.096825063,
-5.832858993,
-5.80914299,
-5.545177444,
-5.403677882,
-5.139712336,
-5.064871356,
-4.852030264,
-4.670708,
-4.446565156,
-4.324258942,
-4.158883083,
-3.912023005,
-3.753417975,
-3.688879454,
-3.516422682,
-3.319127938,
-2.955621166,
-2.899779746
    };

        static float gradientLUT[36] = {
45426.09456,
22713.04728,
11356.52364,
7571.015759,
5678.261819,
3785.50788,
2839.134928,
1892.755726,
1419.56906,
946.3790186,
709.7825046,
473.1887865,
354.8909542,
293.8933325,
236.5940357,
215.5986003,
177.4456782,
154.0327068,
118.2970741,
115.5245301,
88.72283911,
77.0163534,
59.14855941,
53.50189386,
44.36141956,
36.29580437,
29.5742797,
26.57053337,
22.18070978,
17.32867951,
14.78713985,
13.86294361,
11.90134335,
9.91749117,
6.277307219,
5.971946531
        };

	static float logLUT[36] = {
-11.09035491,
-10.39720773,
-9.704060548,
-9.29859544,
-9.010913368,
-8.60544826,
-8.317766187,
-7.912301079,
-7.624621546,
-7.219155592,
-6.931474366,
-6.526009257,
-6.238322065,
-5.991464547,
-5.832858664,
-5.65499231,
-5.545177444,
-5.403677882,
-5.139711483,
-5.11599581,
-4.852030264,
-4.710530702,
-4.446565156,
-4.422848629,
-4.158883083,
-4.017383521,
-3.753417975,
-3.593569274,
-3.465735903,
-3.218875825,
-3.060270795,
-2.995732274,
-2.772588722,
-2.525728644,
-2.367123614,
-2.302585093
};

        static float inputLUT[36] = {
0.00001525878875,
0.0000305175775,
0.000061035155,
0.0000915527325,
0.00012207031,
0.000183105465,
0.00024414062,
0.00036621093,
0.00048828,
0.00073242062,
0.00097656,
0.00146484,
0.00195313,
0.0025,
0.00292969,
0.0035,
0.00390625,
0.0045,
0.00585938,
0.006,
0.0078125,
0.009,
0.01171875,
0.012,
0.015625,
0.018,
0.0234375,
0.0275,
0.03125,
0.04,
0.046875,
0.05,
0.0625,
0.08,
0.09375,
0.1
};

	unsigned int i;
	float out = -1;
	//std::cout << in << "\t";
	if( in < 0.1){
		for(i=0; i < 35; i++){
			if(in == inputLUT[i]){			
				out = logLUT[i];
				break;
			}
			if((in>inputLUT[i]) && (in<inputLUT[i+1])){
				out = gradientLUT[i]*in+offsetLUT[i];
				break;
			}				
		}
	}
	else{
		out = getLog2(in);
	}
	//std::cout << out << "\n";
	return out;
}
int main ( int argc, char* argv[]){
	float i;
	double diff = 0;
	double maxDiff = 0;
	for(i = 0.00002; i< 0.32; i+=0.00001){
		//std::cout << i << "\t" << log(i) << "\t" << getLog(i) <<"\n";
		diff = abs(log(i)-getLog(i));		
		if(diff > maxDiff){
			maxDiff = diff;
			std::cout << "MaxDiff:\t" << i <<"\t" << maxDiff << "\n"; 
		}
	}
	return 0;
}

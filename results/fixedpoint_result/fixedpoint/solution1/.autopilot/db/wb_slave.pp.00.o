	.file	"../PJ/synth/wb_slave.cpp"
	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init,@function
__cxx_global_var_init:                  # @__cxx_global_var_init
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2:
	.cfi_def_cfa_offset 16
.Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZStL8__ioinit, %rdi
	callq	_ZNSt8ios_base4InitC1Ev
	leaq	_ZNSt8ios_base4InitD1Ev, %rdi
	leaq	_ZStL8__ioinit, %rax
	leaq	__dso_handle, %rdx
	movq	%rax, %rsi
	callq	__cxa_atexit
	movl	%eax, -4(%rbp)          # 4-byte Spill
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp5:
	.size	__cxx_global_var_init, .Ltmp5-__cxx_global_var_init
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,"axG",@progbits,_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,comdat
	.weak	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,@function
_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi: # @_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movl	%edx, -20(%rsp)
	ret
.Ltmp6:
	.size	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi, .Ltmp6-_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init1,@function
__cxx_global_var_init1:                 # @__cxx_global_var_init1
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp9:
	.cfi_def_cfa_offset 16
.Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp11:
	.cfi_def_cfa_register %rbp
	leaq	_ZN7sc_coreL17api_version_checkE, %rdi
	callq	_ZN7sc_core20sc_api_version_2_3_0C1Ev
	popq	%rbp
	ret
.Ltmp12:
	.size	__cxx_global_var_init1, .Ltmp12-__cxx_global_var_init1
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE,@function
_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE: # @_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp13:
	.size	_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE, .Ltmp13-_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE,@function
_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE: # @_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp14:
	.size	_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE, .Ltmp14-_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE,@function
_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE: # @_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp15:
	.size	_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE, .Ltmp15-_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE,@function
_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE: # @_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp16:
	.size	_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE, .Ltmp16-_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE
	.cfi_endproc

	.text
	.globl	_ZN7WBSlaveC2EN7sc_core14sc_module_nameE
	.align	16, 0x90
	.type	_ZN7WBSlaveC2EN7sc_core14sc_module_nameE,@function
_ZN7WBSlaveC2EN7sc_core14sc_module_nameE: # @_ZN7WBSlaveC2EN7sc_core14sc_module_nameE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin7:
	.cfi_lsda 3, .Lexception7
# BB#0:
	pushq	%rbp
.Ltmp194:
	.cfi_def_cfa_offset 16
.Ltmp195:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp196:
	.cfi_def_cfa_register %rbp
	subq	$464, %rsp              # imm = 0x1D0
	movq	%rdi, -8(%rbp)
	movq	%rdi, -104(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core9sc_moduleC2Ev
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	$_ZTV7WBSlave+16, (%rdi)
	movq	$_ZTV7WBSlave+176, 88(%rdi)
	addq	$208, %rdi
	movq	-104(%rbp), %rax        # 8-byte Reload
.Ltmp17:
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp18:
	jmp	.LBB7_1
.LBB7_1:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp20:
	movq	%rax, %rdi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp21:
	jmp	.LBB7_2
.LBB7_2:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$528, %rax              # imm = 0x210
.Ltmp23:
	movq	%rax, %rdi
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
.Ltmp24:
	jmp	.LBB7_3
.LBB7_3:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$672, %rax              # imm = 0x2A0
.Ltmp26:
	movq	%rax, %rdi
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
.Ltmp27:
	jmp	.LBB7_4
.LBB7_4:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$816, %rax              # imm = 0x330
.Ltmp29:
	movq	%rax, %rdi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp30:
	jmp	.LBB7_5
.LBB7_5:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$976, %rax              # imm = 0x3D0
.Ltmp32:
	movq	%rax, %rdi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp33:
	jmp	.LBB7_6
.LBB7_6:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1136, %rax             # imm = 0x470
.Ltmp35:
	movq	%rax, %rdi
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp36:
	jmp	.LBB7_7
.LBB7_7:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1296, %rax             # imm = 0x510
.Ltmp38:
	movq	%rax, %rdi
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev
.Ltmp39:
	jmp	.LBB7_8
.LBB7_8:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1440, %rax             # imm = 0x5A0
.Ltmp41:
	movq	%rax, %rdi
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev
.Ltmp42:
	jmp	.LBB7_9
.LBB7_9:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
.Ltmp44:
	movq	%rax, %rdi
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core6sc_outIbEC1Ev
.Ltmp45:
	jmp	.LBB7_10
.LBB7_10:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
.Ltmp47:
	movq	%rax, %rdi
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core6sc_outIbEC1Ev
.Ltmp48:
	jmp	.LBB7_11
.LBB7_11:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
.Ltmp50:
	movl	$.L.str, %esi
	movq	%rax, %rdi
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp51:
	jmp	.LBB7_12
.LBB7_12:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4016, %rax             # imm = 0xFB0
.Ltmp53:
	movl	$.L.str2, %esi
	movq	%rax, %rdi
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp54:
	jmp	.LBB7_13
.LBB7_13:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
.Ltmp56:
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp57:
	jmp	.LBB7_14
.LBB7_14:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
.Ltmp59:
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp60:
	jmp	.LBB7_15
.LBB7_15:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp62:
	movq	%rax, %rdi
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi1EEC1Ev
.Ltmp63:
	jmp	.LBB7_16
.LBB7_16:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp65:
	movq	%rax, %rdi
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi1EEC1Ev
.Ltmp66:
	jmp	.LBB7_17
.LBB7_17:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4168, %rax             # imm = 0x1048
.Ltmp68:
	movl	$.L.str3, %esi
	movq	%rax, %rdi
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp69:
	jmp	.LBB7_18
.LBB7_18:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4192, %rax             # imm = 0x1060
.Ltmp71:
	movl	$.L.str4, %esi
	movq	%rax, %rdi
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp72:
	jmp	.LBB7_19
.LBB7_19:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4216, %rax             # imm = 0x1078
.Ltmp74:
	movl	$.L.str5, %esi
	movq	%rax, %rdi
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp75:
	jmp	.LBB7_20
.LBB7_20:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4240, %rax             # imm = 0x1090
.Ltmp77:
	movl	$.L.str6, %esi
	movq	%rax, %rdi
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp78:
	jmp	.LBB7_21
.LBB7_21:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4264, %rax             # imm = 0x10A8
.Ltmp80:
	movl	$.L.str7, %esi
	movq	%rax, %rdi
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp81:
	jmp	.LBB7_22
.LBB7_22:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4288, %rax             # imm = 0x10C0
.Ltmp83:
	movl	$.L.str8, %esi
	movq	%rax, %rdi
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp84:
	jmp	.LBB7_23
.LBB7_23:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4312, %rax             # imm = 0x10D8
.Ltmp86:
	movl	$.L.str8, %esi
	movq	%rax, %rdi
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp87:
	jmp	.LBB7_24
.LBB7_24:
.Ltmp89:
	callq	_ZN7sc_core22sc_get_curr_simcontextEv
.Ltmp90:
	movq	%rax, -312(%rbp)        # 8-byte Spill
	jmp	.LBB7_25
.LBB7_25:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$88, %rax
	movq	$-88, -40(%rbp)
	movq	$_ZN7WBSlave10processBusEv, -48(%rbp)
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %r9
.Ltmp91:
	movq	%rsp, %rcx
	movq	%rax, (%rcx)
	movq	$0, 8(%rcx)
	leaq	-32(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$.L.str9, %edx
	movq	-312(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core13sc_simcontext22create_cthread_processEPKcbMNS_15sc_process_hostEFvvEPS3_PKNS_16sc_spawn_optionsE
.Ltmp92:
	jmp	.LBB7_26
.LBB7_26:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$96, %rax
.Ltmp93:
	leaq	-32(%rbp), %rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core17sc_process_handlecvPNS_18sc_cthread_processEEv
.Ltmp94:
	movq	%rax, -328(%rbp)        # 8-byte Spill
	jmp	.LBB7_27
.LBB7_27:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$208, %rax
.Ltmp95:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE3posEv
.Ltmp96:
	movq	%rax, -336(%rbp)        # 8-byte Spill
	jmp	.LBB7_28
.LBB7_28:
.Ltmp97:
	movq	-320(%rbp), %rdi        # 8-byte Reload
	movq	-328(%rbp), %rsi        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	callq	_ZN7sc_core12sc_sensitiveclEPNS_18sc_cthread_processERNS_15sc_event_finderE
.Ltmp98:
	movq	%rax, -344(%rbp)        # 8-byte Spill
	jmp	.LBB7_29
.LBB7_29:
.Ltmp102:
	leaq	-32(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp103:
	jmp	.LBB7_30
.LBB7_30:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp104:
	movl	$1, %edx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN7sc_core9sc_module15reset_signal_isERKNS_5sc_inIbEEb
.Ltmp105:
	jmp	.LBB7_31
.LBB7_31:
.Ltmp106:
	callq	_ZN7sc_core22sc_get_curr_simcontextEv
.Ltmp107:
	movq	%rax, -352(%rbp)        # 8-byte Spill
	jmp	.LBB7_32
.LBB7_32:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$88, %rax
	movq	$-88, -64(%rbp)
	movq	$_ZN7WBSlave12processSlaveEv, -72(%rbp)
	movq	-72(%rbp), %r8
	movq	-64(%rbp), %r9
.Ltmp108:
	movq	%rsp, %rcx
	movq	%rax, (%rcx)
	movq	$0, 8(%rcx)
	leaq	-56(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$.L.str10, %edx
	movq	-352(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core13sc_simcontext22create_cthread_processEPKcbMNS_15sc_process_hostEFvvEPS3_PKNS_16sc_spawn_optionsE
.Ltmp109:
	jmp	.LBB7_33
.LBB7_33:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$96, %rax
.Ltmp110:
	leaq	-56(%rbp), %rdi
	movq	%rax, -360(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core17sc_process_handlecvPNS_18sc_cthread_processEEv
.Ltmp111:
	movq	%rax, -368(%rbp)        # 8-byte Spill
	jmp	.LBB7_34
.LBB7_34:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$208, %rax
.Ltmp112:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE3posEv
.Ltmp113:
	movq	%rax, -376(%rbp)        # 8-byte Spill
	jmp	.LBB7_35
.LBB7_35:
.Ltmp114:
	movq	-360(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-376(%rbp), %rdx        # 8-byte Reload
	callq	_ZN7sc_core12sc_sensitiveclEPNS_18sc_cthread_processERNS_15sc_event_finderE
.Ltmp115:
	movq	%rax, -384(%rbp)        # 8-byte Spill
	jmp	.LBB7_36
.LBB7_36:
.Ltmp119:
	leaq	-56(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp120:
	jmp	.LBB7_37
.LBB7_37:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp121:
	movl	$1, %edx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN7sc_core9sc_module15reset_signal_isERKNS_5sc_inIbEEb
.Ltmp122:
	jmp	.LBB7_38
.LBB7_38:
.Ltmp123:
	callq	_ZN7sc_core22sc_get_curr_simcontextEv
.Ltmp124:
	movq	%rax, -392(%rbp)        # 8-byte Spill
	jmp	.LBB7_39
.LBB7_39:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$88, %rax
	movq	$-88, -88(%rbp)
	movq	$_ZN7WBSlave6getLogEv, -96(%rbp)
	movq	-96(%rbp), %r8
	movq	-88(%rbp), %r9
.Ltmp125:
	movq	%rsp, %rcx
	movq	%rax, (%rcx)
	movq	$0, 8(%rcx)
	leaq	-80(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$.L.str11, %edx
	movq	-392(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core13sc_simcontext22create_cthread_processEPKcbMNS_15sc_process_hostEFvvEPS3_PKNS_16sc_spawn_optionsE
.Ltmp126:
	jmp	.LBB7_40
.LBB7_40:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$96, %rax
.Ltmp127:
	leaq	-80(%rbp), %rdi
	movq	%rax, -400(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core17sc_process_handlecvPNS_18sc_cthread_processEEv
.Ltmp128:
	movq	%rax, -408(%rbp)        # 8-byte Spill
	jmp	.LBB7_41
.LBB7_41:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$208, %rax
.Ltmp129:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE3posEv
.Ltmp130:
	movq	%rax, -416(%rbp)        # 8-byte Spill
	jmp	.LBB7_42
.LBB7_42:
.Ltmp131:
	movq	-400(%rbp), %rdi        # 8-byte Reload
	movq	-408(%rbp), %rsi        # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	callq	_ZN7sc_core12sc_sensitiveclEPNS_18sc_cthread_processERNS_15sc_event_finderE
.Ltmp132:
	movq	%rax, -424(%rbp)        # 8-byte Spill
	jmp	.LBB7_43
.LBB7_43:
.Ltmp136:
	leaq	-80(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp137:
	jmp	.LBB7_44
.LBB7_44:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp138:
	movl	$1, %edx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN7sc_core9sc_module15reset_signal_isERKNS_5sc_inIbEEb
.Ltmp139:
	jmp	.LBB7_45
.LBB7_45:
	addq	$464, %rsp              # imm = 0x1D0
	popq	%rbp
	ret
.LBB7_46:
.Ltmp19:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_125
.LBB7_47:
.Ltmp22:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_123
.LBB7_48:
.Ltmp25:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_121
.LBB7_49:
.Ltmp28:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_119
.LBB7_50:
.Ltmp31:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_117
.LBB7_51:
.Ltmp34:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_115
.LBB7_52:
.Ltmp37:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_113
.LBB7_53:
.Ltmp40:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_111
.LBB7_54:
.Ltmp43:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_109
.LBB7_55:
.Ltmp46:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_107
.LBB7_56:
.Ltmp49:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_105
.LBB7_57:
.Ltmp52:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_103
.LBB7_58:
.Ltmp55:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_101
.LBB7_59:
.Ltmp58:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_99
.LBB7_60:
.Ltmp61:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_97
.LBB7_61:
.Ltmp64:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_95
.LBB7_62:
.Ltmp67:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_93
.LBB7_63:
.Ltmp70:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_91
.LBB7_64:
.Ltmp73:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_89
.LBB7_65:
.Ltmp76:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_87
.LBB7_66:
.Ltmp79:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_85
.LBB7_67:
.Ltmp82:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_83
.LBB7_68:
.Ltmp85:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_81
.LBB7_69:
.Ltmp88:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_79
.LBB7_70:
.Ltmp140:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_77
.LBB7_71:
.Ltmp99:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp100:
	leaq	-32(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp101:
	jmp	.LBB7_72
.LBB7_72:
	jmp	.LBB7_77
.LBB7_73:
.Ltmp116:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp117:
	leaq	-56(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp118:
	jmp	.LBB7_74
.LBB7_74:
	jmp	.LBB7_77
.LBB7_75:
.Ltmp133:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp134:
	leaq	-80(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp135:
	jmp	.LBB7_76
.LBB7_76:
	jmp	.LBB7_77
.LBB7_77:
.Ltmp141:
	movq	-304(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp142:
	jmp	.LBB7_78
.LBB7_78:
	jmp	.LBB7_79
.LBB7_79:
.Ltmp143:
	movq	-296(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp144:
	jmp	.LBB7_80
.LBB7_80:
	jmp	.LBB7_81
.LBB7_81:
.Ltmp145:
	movq	-288(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp146:
	jmp	.LBB7_82
.LBB7_82:
	jmp	.LBB7_83
.LBB7_83:
.Ltmp147:
	movq	-280(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp148:
	jmp	.LBB7_84
.LBB7_84:
	jmp	.LBB7_85
.LBB7_85:
.Ltmp149:
	movq	-272(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp150:
	jmp	.LBB7_86
.LBB7_86:
	jmp	.LBB7_87
.LBB7_87:
.Ltmp151:
	movq	-264(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp152:
	jmp	.LBB7_88
.LBB7_88:
	jmp	.LBB7_89
.LBB7_89:
.Ltmp153:
	movq	-256(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp154:
	jmp	.LBB7_90
.LBB7_90:
	jmp	.LBB7_91
.LBB7_91:
.Ltmp155:
	movq	-248(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp156:
	jmp	.LBB7_92
.LBB7_92:
	jmp	.LBB7_93
.LBB7_93:
.Ltmp157:
	movq	-240(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp158:
	jmp	.LBB7_94
.LBB7_94:
	jmp	.LBB7_95
.LBB7_95:
.Ltmp159:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp160:
	jmp	.LBB7_96
.LBB7_96:
	jmp	.LBB7_97
.LBB7_97:
.Ltmp161:
	movq	-224(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp162:
	jmp	.LBB7_98
.LBB7_98:
	jmp	.LBB7_99
.LBB7_99:
.Ltmp163:
	movq	-216(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp164:
	jmp	.LBB7_100
.LBB7_100:
	jmp	.LBB7_101
.LBB7_101:
.Ltmp165:
	movq	-208(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp166:
	jmp	.LBB7_102
.LBB7_102:
	jmp	.LBB7_103
.LBB7_103:
.Ltmp167:
	movq	-200(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp168:
	jmp	.LBB7_104
.LBB7_104:
	jmp	.LBB7_105
.LBB7_105:
.Ltmp169:
	movq	-192(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp170:
	jmp	.LBB7_106
.LBB7_106:
	jmp	.LBB7_107
.LBB7_107:
.Ltmp171:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp172:
	jmp	.LBB7_108
.LBB7_108:
	jmp	.LBB7_109
.LBB7_109:
.Ltmp173:
	movq	-176(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
.Ltmp174:
	jmp	.LBB7_110
.LBB7_110:
	jmp	.LBB7_111
.LBB7_111:
.Ltmp175:
	movq	-168(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp176:
	jmp	.LBB7_112
.LBB7_112:
	jmp	.LBB7_113
.LBB7_113:
.Ltmp177:
	movq	-160(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp178:
	jmp	.LBB7_114
.LBB7_114:
	jmp	.LBB7_115
.LBB7_115:
.Ltmp179:
	movq	-152(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp180:
	jmp	.LBB7_116
.LBB7_116:
	jmp	.LBB7_117
.LBB7_117:
.Ltmp181:
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp182:
	jmp	.LBB7_118
.LBB7_118:
	jmp	.LBB7_119
.LBB7_119:
.Ltmp183:
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp184:
	jmp	.LBB7_120
.LBB7_120:
	jmp	.LBB7_121
.LBB7_121:
.Ltmp185:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp186:
	jmp	.LBB7_122
.LBB7_122:
	jmp	.LBB7_123
.LBB7_123:
.Ltmp187:
	movq	-112(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp188:
	jmp	.LBB7_124
.LBB7_124:
	jmp	.LBB7_125
.LBB7_125:
.Ltmp189:
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_moduleD2Ev
.Ltmp190:
	jmp	.LBB7_126
.LBB7_126:
	jmp	.LBB7_127
.LBB7_127:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB7_128:
.Ltmp191:
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movq	%rdx, -440(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp197:
	.size	_ZN7WBSlaveC2EN7sc_core14sc_module_nameE, .Ltmp197-_ZN7WBSlaveC2EN7sc_core14sc_module_nameE
	.cfi_endproc
.Leh_func_end7:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table7:
.Lexception7:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\303\203"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.ascii	 "\272\003"             # Call site table length
.Lset0 = .Leh_func_begin7-.Leh_func_begin7 # >> Call Site 1 <<
	.long	.Lset0
.Lset1 = .Ltmp17-.Leh_func_begin7       #   Call between .Leh_func_begin7 and .Ltmp17
	.long	.Lset1
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset2 = .Ltmp17-.Leh_func_begin7       # >> Call Site 2 <<
	.long	.Lset2
.Lset3 = .Ltmp18-.Ltmp17                #   Call between .Ltmp17 and .Ltmp18
	.long	.Lset3
.Lset4 = .Ltmp19-.Leh_func_begin7       #     jumps to .Ltmp19
	.long	.Lset4
	.byte	0                       #   On action: cleanup
.Lset5 = .Ltmp20-.Leh_func_begin7       # >> Call Site 3 <<
	.long	.Lset5
.Lset6 = .Ltmp21-.Ltmp20                #   Call between .Ltmp20 and .Ltmp21
	.long	.Lset6
.Lset7 = .Ltmp22-.Leh_func_begin7       #     jumps to .Ltmp22
	.long	.Lset7
	.byte	0                       #   On action: cleanup
.Lset8 = .Ltmp23-.Leh_func_begin7       # >> Call Site 4 <<
	.long	.Lset8
.Lset9 = .Ltmp24-.Ltmp23                #   Call between .Ltmp23 and .Ltmp24
	.long	.Lset9
.Lset10 = .Ltmp25-.Leh_func_begin7      #     jumps to .Ltmp25
	.long	.Lset10
	.byte	0                       #   On action: cleanup
.Lset11 = .Ltmp26-.Leh_func_begin7      # >> Call Site 5 <<
	.long	.Lset11
.Lset12 = .Ltmp27-.Ltmp26               #   Call between .Ltmp26 and .Ltmp27
	.long	.Lset12
.Lset13 = .Ltmp28-.Leh_func_begin7      #     jumps to .Ltmp28
	.long	.Lset13
	.byte	0                       #   On action: cleanup
.Lset14 = .Ltmp29-.Leh_func_begin7      # >> Call Site 6 <<
	.long	.Lset14
.Lset15 = .Ltmp30-.Ltmp29               #   Call between .Ltmp29 and .Ltmp30
	.long	.Lset15
.Lset16 = .Ltmp31-.Leh_func_begin7      #     jumps to .Ltmp31
	.long	.Lset16
	.byte	0                       #   On action: cleanup
.Lset17 = .Ltmp32-.Leh_func_begin7      # >> Call Site 7 <<
	.long	.Lset17
.Lset18 = .Ltmp33-.Ltmp32               #   Call between .Ltmp32 and .Ltmp33
	.long	.Lset18
.Lset19 = .Ltmp34-.Leh_func_begin7      #     jumps to .Ltmp34
	.long	.Lset19
	.byte	0                       #   On action: cleanup
.Lset20 = .Ltmp35-.Leh_func_begin7      # >> Call Site 8 <<
	.long	.Lset20
.Lset21 = .Ltmp36-.Ltmp35               #   Call between .Ltmp35 and .Ltmp36
	.long	.Lset21
.Lset22 = .Ltmp37-.Leh_func_begin7      #     jumps to .Ltmp37
	.long	.Lset22
	.byte	0                       #   On action: cleanup
.Lset23 = .Ltmp38-.Leh_func_begin7      # >> Call Site 9 <<
	.long	.Lset23
.Lset24 = .Ltmp39-.Ltmp38               #   Call between .Ltmp38 and .Ltmp39
	.long	.Lset24
.Lset25 = .Ltmp40-.Leh_func_begin7      #     jumps to .Ltmp40
	.long	.Lset25
	.byte	0                       #   On action: cleanup
.Lset26 = .Ltmp41-.Leh_func_begin7      # >> Call Site 10 <<
	.long	.Lset26
.Lset27 = .Ltmp42-.Ltmp41               #   Call between .Ltmp41 and .Ltmp42
	.long	.Lset27
.Lset28 = .Ltmp43-.Leh_func_begin7      #     jumps to .Ltmp43
	.long	.Lset28
	.byte	0                       #   On action: cleanup
.Lset29 = .Ltmp44-.Leh_func_begin7      # >> Call Site 11 <<
	.long	.Lset29
.Lset30 = .Ltmp45-.Ltmp44               #   Call between .Ltmp44 and .Ltmp45
	.long	.Lset30
.Lset31 = .Ltmp46-.Leh_func_begin7      #     jumps to .Ltmp46
	.long	.Lset31
	.byte	0                       #   On action: cleanup
.Lset32 = .Ltmp47-.Leh_func_begin7      # >> Call Site 12 <<
	.long	.Lset32
.Lset33 = .Ltmp48-.Ltmp47               #   Call between .Ltmp47 and .Ltmp48
	.long	.Lset33
.Lset34 = .Ltmp49-.Leh_func_begin7      #     jumps to .Ltmp49
	.long	.Lset34
	.byte	0                       #   On action: cleanup
.Lset35 = .Ltmp50-.Leh_func_begin7      # >> Call Site 13 <<
	.long	.Lset35
.Lset36 = .Ltmp51-.Ltmp50               #   Call between .Ltmp50 and .Ltmp51
	.long	.Lset36
.Lset37 = .Ltmp52-.Leh_func_begin7      #     jumps to .Ltmp52
	.long	.Lset37
	.byte	0                       #   On action: cleanup
.Lset38 = .Ltmp53-.Leh_func_begin7      # >> Call Site 14 <<
	.long	.Lset38
.Lset39 = .Ltmp54-.Ltmp53               #   Call between .Ltmp53 and .Ltmp54
	.long	.Lset39
.Lset40 = .Ltmp55-.Leh_func_begin7      #     jumps to .Ltmp55
	.long	.Lset40
	.byte	0                       #   On action: cleanup
.Lset41 = .Ltmp56-.Leh_func_begin7      # >> Call Site 15 <<
	.long	.Lset41
.Lset42 = .Ltmp57-.Ltmp56               #   Call between .Ltmp56 and .Ltmp57
	.long	.Lset42
.Lset43 = .Ltmp58-.Leh_func_begin7      #     jumps to .Ltmp58
	.long	.Lset43
	.byte	0                       #   On action: cleanup
.Lset44 = .Ltmp59-.Leh_func_begin7      # >> Call Site 16 <<
	.long	.Lset44
.Lset45 = .Ltmp60-.Ltmp59               #   Call between .Ltmp59 and .Ltmp60
	.long	.Lset45
.Lset46 = .Ltmp61-.Leh_func_begin7      #     jumps to .Ltmp61
	.long	.Lset46
	.byte	0                       #   On action: cleanup
.Lset47 = .Ltmp62-.Leh_func_begin7      # >> Call Site 17 <<
	.long	.Lset47
.Lset48 = .Ltmp63-.Ltmp62               #   Call between .Ltmp62 and .Ltmp63
	.long	.Lset48
.Lset49 = .Ltmp64-.Leh_func_begin7      #     jumps to .Ltmp64
	.long	.Lset49
	.byte	0                       #   On action: cleanup
.Lset50 = .Ltmp65-.Leh_func_begin7      # >> Call Site 18 <<
	.long	.Lset50
.Lset51 = .Ltmp66-.Ltmp65               #   Call between .Ltmp65 and .Ltmp66
	.long	.Lset51
.Lset52 = .Ltmp67-.Leh_func_begin7      #     jumps to .Ltmp67
	.long	.Lset52
	.byte	0                       #   On action: cleanup
.Lset53 = .Ltmp68-.Leh_func_begin7      # >> Call Site 19 <<
	.long	.Lset53
.Lset54 = .Ltmp69-.Ltmp68               #   Call between .Ltmp68 and .Ltmp69
	.long	.Lset54
.Lset55 = .Ltmp70-.Leh_func_begin7      #     jumps to .Ltmp70
	.long	.Lset55
	.byte	0                       #   On action: cleanup
.Lset56 = .Ltmp71-.Leh_func_begin7      # >> Call Site 20 <<
	.long	.Lset56
.Lset57 = .Ltmp72-.Ltmp71               #   Call between .Ltmp71 and .Ltmp72
	.long	.Lset57
.Lset58 = .Ltmp73-.Leh_func_begin7      #     jumps to .Ltmp73
	.long	.Lset58
	.byte	0                       #   On action: cleanup
.Lset59 = .Ltmp74-.Leh_func_begin7      # >> Call Site 21 <<
	.long	.Lset59
.Lset60 = .Ltmp75-.Ltmp74               #   Call between .Ltmp74 and .Ltmp75
	.long	.Lset60
.Lset61 = .Ltmp76-.Leh_func_begin7      #     jumps to .Ltmp76
	.long	.Lset61
	.byte	0                       #   On action: cleanup
.Lset62 = .Ltmp77-.Leh_func_begin7      # >> Call Site 22 <<
	.long	.Lset62
.Lset63 = .Ltmp78-.Ltmp77               #   Call between .Ltmp77 and .Ltmp78
	.long	.Lset63
.Lset64 = .Ltmp79-.Leh_func_begin7      #     jumps to .Ltmp79
	.long	.Lset64
	.byte	0                       #   On action: cleanup
.Lset65 = .Ltmp80-.Leh_func_begin7      # >> Call Site 23 <<
	.long	.Lset65
.Lset66 = .Ltmp81-.Ltmp80               #   Call between .Ltmp80 and .Ltmp81
	.long	.Lset66
.Lset67 = .Ltmp82-.Leh_func_begin7      #     jumps to .Ltmp82
	.long	.Lset67
	.byte	0                       #   On action: cleanup
.Lset68 = .Ltmp83-.Leh_func_begin7      # >> Call Site 24 <<
	.long	.Lset68
.Lset69 = .Ltmp84-.Ltmp83               #   Call between .Ltmp83 and .Ltmp84
	.long	.Lset69
.Lset70 = .Ltmp85-.Leh_func_begin7      #     jumps to .Ltmp85
	.long	.Lset70
	.byte	0                       #   On action: cleanup
.Lset71 = .Ltmp86-.Leh_func_begin7      # >> Call Site 25 <<
	.long	.Lset71
.Lset72 = .Ltmp87-.Ltmp86               #   Call between .Ltmp86 and .Ltmp87
	.long	.Lset72
.Lset73 = .Ltmp88-.Leh_func_begin7      #     jumps to .Ltmp88
	.long	.Lset73
	.byte	0                       #   On action: cleanup
.Lset74 = .Ltmp89-.Leh_func_begin7      # >> Call Site 26 <<
	.long	.Lset74
.Lset75 = .Ltmp92-.Ltmp89               #   Call between .Ltmp89 and .Ltmp92
	.long	.Lset75
.Lset76 = .Ltmp140-.Leh_func_begin7     #     jumps to .Ltmp140
	.long	.Lset76
	.byte	0                       #   On action: cleanup
.Lset77 = .Ltmp93-.Leh_func_begin7      # >> Call Site 27 <<
	.long	.Lset77
.Lset78 = .Ltmp98-.Ltmp93               #   Call between .Ltmp93 and .Ltmp98
	.long	.Lset78
.Lset79 = .Ltmp99-.Leh_func_begin7      #     jumps to .Ltmp99
	.long	.Lset79
	.byte	0                       #   On action: cleanup
.Lset80 = .Ltmp102-.Leh_func_begin7     # >> Call Site 28 <<
	.long	.Lset80
.Lset81 = .Ltmp109-.Ltmp102             #   Call between .Ltmp102 and .Ltmp109
	.long	.Lset81
.Lset82 = .Ltmp140-.Leh_func_begin7     #     jumps to .Ltmp140
	.long	.Lset82
	.byte	0                       #   On action: cleanup
.Lset83 = .Ltmp110-.Leh_func_begin7     # >> Call Site 29 <<
	.long	.Lset83
.Lset84 = .Ltmp115-.Ltmp110             #   Call between .Ltmp110 and .Ltmp115
	.long	.Lset84
.Lset85 = .Ltmp116-.Leh_func_begin7     #     jumps to .Ltmp116
	.long	.Lset85
	.byte	0                       #   On action: cleanup
.Lset86 = .Ltmp119-.Leh_func_begin7     # >> Call Site 30 <<
	.long	.Lset86
.Lset87 = .Ltmp126-.Ltmp119             #   Call between .Ltmp119 and .Ltmp126
	.long	.Lset87
.Lset88 = .Ltmp140-.Leh_func_begin7     #     jumps to .Ltmp140
	.long	.Lset88
	.byte	0                       #   On action: cleanup
.Lset89 = .Ltmp127-.Leh_func_begin7     # >> Call Site 31 <<
	.long	.Lset89
.Lset90 = .Ltmp132-.Ltmp127             #   Call between .Ltmp127 and .Ltmp132
	.long	.Lset90
.Lset91 = .Ltmp133-.Leh_func_begin7     #     jumps to .Ltmp133
	.long	.Lset91
	.byte	0                       #   On action: cleanup
.Lset92 = .Ltmp136-.Leh_func_begin7     # >> Call Site 32 <<
	.long	.Lset92
.Lset93 = .Ltmp139-.Ltmp136             #   Call between .Ltmp136 and .Ltmp139
	.long	.Lset93
.Lset94 = .Ltmp140-.Leh_func_begin7     #     jumps to .Ltmp140
	.long	.Lset94
	.byte	0                       #   On action: cleanup
.Lset95 = .Ltmp100-.Leh_func_begin7     # >> Call Site 33 <<
	.long	.Lset95
.Lset96 = .Ltmp190-.Ltmp100             #   Call between .Ltmp100 and .Ltmp190
	.long	.Lset96
.Lset97 = .Ltmp191-.Leh_func_begin7     #     jumps to .Ltmp191
	.long	.Lset97
	.byte	1                       #   On action: 1
.Lset98 = .Ltmp190-.Leh_func_begin7     # >> Call Site 34 <<
	.long	.Lset98
.Lset99 = .Leh_func_end7-.Ltmp190       #   Call between .Ltmp190 and .Leh_func_end7
	.long	.Lset99
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN7sc_core5sc_inIbEC1Ev,"axG",@progbits,_ZN7sc_core5sc_inIbEC1Ev,comdat
	.weak	_ZN7sc_core5sc_inIbEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIbEC1Ev,@function
_ZN7sc_core5sc_inIbEC1Ev:               # @_ZN7sc_core5sc_inIbEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp200:
	.cfi_def_cfa_offset 16
.Ltmp201:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp202:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIbEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp203:
	.size	_ZN7sc_core5sc_inIbEC1Ev, .Ltmp203-_ZN7sc_core5sc_inIbEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp206:
	.cfi_def_cfa_offset 16
.Ltmp207:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp208:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp209:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev, .Ltmp209-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp212:
	.cfi_def_cfa_offset 16
.Ltmp213:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp214:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp215:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev, .Ltmp215-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp218:
	.cfi_def_cfa_offset 16
.Ltmp219:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp220:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp221:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev, .Ltmp221-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIbEC1Ev,"axG",@progbits,_ZN7sc_core6sc_outIbEC1Ev,comdat
	.weak	_ZN7sc_core6sc_outIbEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbEC1Ev,@function
_ZN7sc_core6sc_outIbEC1Ev:              # @_ZN7sc_core6sc_outIbEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp224:
	.cfi_def_cfa_offset 16
.Ltmp225:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp226:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core6sc_outIbEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp227:
	.size	_ZN7sc_core6sc_outIbEC1Ev, .Ltmp227-_ZN7sc_core6sc_outIbEC1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi3EEC1EPKc,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EEC1EPKc,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EEC1EPKc
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EEC1EPKc,@function
_ZN5sc_dt7sc_uintILi3EEC1EPKc:          # @_ZN5sc_dt7sc_uintILi3EEC1EPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp230:
	.cfi_def_cfa_offset 16
.Ltmp231:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp232:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt7sc_uintILi3EEC2EPKc
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp233:
	.size	_ZN5sc_dt7sc_uintILi3EEC1EPKc, .Ltmp233-_ZN5sc_dt7sc_uintILi3EEC1EPKc
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp236:
	.cfi_def_cfa_offset 16
.Ltmp237:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp238:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp239:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE, .Ltmp239-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EEC1Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EEC1Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EEC1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EEC1Ev,@function
_ZN5sc_dt7sc_uintILi1EEC1Ev:            # @_ZN5sc_dt7sc_uintILi1EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp242:
	.cfi_def_cfa_offset 16
.Ltmp243:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp244:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp245:
	.size	_ZN5sc_dt7sc_uintILi1EEC1Ev, .Ltmp245-_ZN5sc_dt7sc_uintILi1EEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core22sc_get_curr_simcontextEv,"axG",@progbits,_ZN7sc_core22sc_get_curr_simcontextEv,comdat
	.weak	_ZN7sc_core22sc_get_curr_simcontextEv
	.align	16, 0x90
	.type	_ZN7sc_core22sc_get_curr_simcontextEv,@function
_ZN7sc_core22sc_get_curr_simcontextEv:  # @_ZN7sc_core22sc_get_curr_simcontextEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin16:
	.cfi_lsda 3, .Lexception16
# BB#0:
	pushq	%rbp
.Ltmp251:
	.cfi_def_cfa_offset 16
.Ltmp252:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp253:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	cmpq	$0, _ZN7sc_core18sc_curr_simcontextE
	jne	.LBB16_4
# BB#1:
	movl	$304, %edi              # imm = 0x130
	callq	_Znwm
	movq	%rax, %rdi
	movq	%rax, %rcx
.Ltmp246:
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core13sc_simcontextC1Ev
.Ltmp247:
	jmp	.LBB16_2
.LBB16_2:
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	%rax, _ZN7sc_core25sc_default_global_contextE
	movq	_ZN7sc_core25sc_default_global_contextE, %rcx
	movq	%rcx, _ZN7sc_core18sc_curr_simcontextE
	jmp	.LBB16_4
.LBB16_3:
.Ltmp248:
	movl	%edx, %ecx
	movq	%rax, -8(%rbp)
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZdlPv
	jmp	.LBB16_5
.LBB16_4:
	movq	_ZN7sc_core18sc_curr_simcontextE, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB16_5:
	movq	-8(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp254:
	.size	_ZN7sc_core22sc_get_curr_simcontextEv, .Ltmp254-_ZN7sc_core22sc_get_curr_simcontextEv
	.cfi_endproc
.Leh_func_end16:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table16:
.Lexception16:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset100 = .Leh_func_begin16-.Leh_func_begin16 # >> Call Site 1 <<
	.long	.Lset100
.Lset101 = .Ltmp246-.Leh_func_begin16   #   Call between .Leh_func_begin16 and .Ltmp246
	.long	.Lset101
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset102 = .Ltmp246-.Leh_func_begin16   # >> Call Site 2 <<
	.long	.Lset102
.Lset103 = .Ltmp247-.Ltmp246            #   Call between .Ltmp246 and .Ltmp247
	.long	.Lset103
.Lset104 = .Ltmp248-.Leh_func_begin16   #     jumps to .Ltmp248
	.long	.Lset104
	.byte	0                       #   On action: cleanup
.Lset105 = .Ltmp247-.Leh_func_begin16   # >> Call Site 3 <<
	.long	.Lset105
.Lset106 = .Leh_func_end16-.Ltmp247     #   Call between .Ltmp247 and .Leh_func_end16
	.long	.Lset106
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.text
	.globl	_ZN7WBSlave10processBusEv
	.align	16, 0x90
	.type	_ZN7WBSlave10processBusEv,@function
_ZN7WBSlave10processBusEv:              # @_ZN7WBSlave10processBusEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin17:
	.cfi_lsda 3, .Lexception17
# BB#0:
	pushq	%rbp
.Ltmp263:
	.cfi_def_cfa_offset 16
.Ltmp264:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp265:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
	addq	$1440, %rax             # imm = 0x5A0
	leaq	-32(%rbp), %rcx
	xorl	%esi, %esi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi32EEC1Ei
	movq	-56(%rbp), %rax         # 8-byte Reload
.Ltmp255:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
.Ltmp256:
	jmp	.LBB17_1
.LBB17_1:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
	leaq	-45(%rbp), %rsi
	movq	-80(%rbp), %rdi         # 8-byte Reload
	addq	$1592, %rdi             # imm = 0x638
	movb	$0, -45(%rbp)
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	leaq	-46(%rbp), %rsi
	movq	-80(%rbp), %rdi         # 8-byte Reload
	addq	$1760, %rdi             # imm = 0x6E0
	movb	$0, -46(%rbp)
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-80(%rbp), %rsi         # 8-byte Reload
	addq	$4288, %rsi             # imm = 0x10C0
	movq	%rsi, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movl	$0, 1928(%rsi,%rax,4)
.LBB17_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	leaq	-47(%rbp), %rsi
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	movb	$0, -47(%rbp)
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
.LBB17_3:                               #   Parent Loop BB17_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$976, %rax              # imm = 0x3D0
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE4readEv
	movb	$1, %cl
	movb	(%rax), %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	cmpl	$0, %esi
	movb	%cl, -81(%rbp)          # 1-byte Spill
	je	.LBB17_5
# BB#4:                                 #   in Loop: Header=BB17_3 Depth=2
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$1136, %rax             # imm = 0x470
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE4readEv
	movb	(%rax), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	cmpl	$0, %edx
	sete	%cl
	movb	%cl, -81(%rbp)          # 1-byte Spill
.LBB17_5:                               #   in Loop: Header=BB17_3 Depth=2
	movb	-81(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB17_6
	jmp	.LBB17_9
.LBB17_6:                               #   in Loop: Header=BB17_3 Depth=2
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB17_3
.LBB17_7:
.Ltmp257:
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
.Ltmp258:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp259:
	jmp	.LBB17_8
.LBB17_8:
	jmp	.LBB17_13
.LBB17_9:                               #   in Loop: Header=BB17_2 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$816, %rax              # imm = 0x330
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE4readEv
	testb	$1, (%rax)
	jne	.LBB17_10
	jmp	.LBB17_11
.LBB17_10:                              #   in Loop: Header=BB17_2 Depth=1
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave7receiveEv
	jmp	.LBB17_12
.LBB17_11:                              #   in Loop: Header=BB17_2 Depth=1
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave4sendEv
.LBB17_12:                              #   in Loop: Header=BB17_2 Depth=1
	jmp	.LBB17_2
.LBB17_13:
	movq	-40(%rbp), %rdi
	callq	_Unwind_Resume
.LBB17_14:
.Ltmp260:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp266:
	.size	_ZN7WBSlave10processBusEv, .Ltmp266-_ZN7WBSlave10processBusEv
	.cfi_endproc
.Leh_func_end17:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table17:
.Lexception17:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset107 = .Leh_func_begin17-.Leh_func_begin17 # >> Call Site 1 <<
	.long	.Lset107
.Lset108 = .Ltmp255-.Leh_func_begin17   #   Call between .Leh_func_begin17 and .Ltmp255
	.long	.Lset108
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset109 = .Ltmp255-.Leh_func_begin17   # >> Call Site 2 <<
	.long	.Lset109
.Lset110 = .Ltmp256-.Ltmp255            #   Call between .Ltmp255 and .Ltmp256
	.long	.Lset110
.Lset111 = .Ltmp257-.Leh_func_begin17   #     jumps to .Ltmp257
	.long	.Lset111
	.byte	0                       #   On action: cleanup
.Lset112 = .Ltmp256-.Leh_func_begin17   # >> Call Site 3 <<
	.long	.Lset112
.Lset113 = .Ltmp258-.Ltmp256            #   Call between .Ltmp256 and .Ltmp258
	.long	.Lset113
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset114 = .Ltmp258-.Leh_func_begin17   # >> Call Site 4 <<
	.long	.Lset114
.Lset115 = .Ltmp259-.Ltmp258            #   Call between .Ltmp258 and .Ltmp259
	.long	.Lset115
.Lset116 = .Ltmp260-.Leh_func_begin17   #     jumps to .Ltmp260
	.long	.Lset116
	.byte	1                       #   On action: 1
.Lset117 = .Ltmp259-.Leh_func_begin17   # >> Call Site 5 <<
	.long	.Lset117
.Lset118 = .Leh_func_end17-.Ltmp259     #   Call between .Ltmp259 and .Leh_func_end17
	.long	.Lset118
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core5sc_inIbE3posEv,"axG",@progbits,_ZNK7sc_core5sc_inIbE3posEv,comdat
	.weak	_ZNK7sc_core5sc_inIbE3posEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIbE3posEv,@function
_ZNK7sc_core5sc_inIbE3posEv:            # @_ZNK7sc_core5sc_inIbE3posEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin18:
	.cfi_lsda 3, .Lexception18
# BB#0:
	pushq	%rbp
.Ltmp272:
	.cfi_def_cfa_offset 16
.Ltmp273:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp274:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 152(%rdi)
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	jne	.LBB18_4
# BB#1:
	movl	$32, %edi
	callq	_Znwm
	movq	$0, -16(%rbp)
	movq	$41, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
.Ltmp267:
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
.Ltmp268:
	jmp	.LBB18_2
.LBB18_2:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	%rax, 152(%rcx)
	jmp	.LBB18_4
.LBB18_3:
.Ltmp269:
	movl	%edx, %ecx
	movq	%rax, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rdi         # 8-byte Reload
	callq	_ZdlPv
	jmp	.LBB18_5
.LBB18_4:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	152(%rax), %rax
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB18_5:
	movq	-32(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp275:
	.size	_ZNK7sc_core5sc_inIbE3posEv, .Ltmp275-_ZNK7sc_core5sc_inIbE3posEv
	.cfi_endproc
.Leh_func_end18:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table18:
.Lexception18:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset119 = .Leh_func_begin18-.Leh_func_begin18 # >> Call Site 1 <<
	.long	.Lset119
.Lset120 = .Ltmp267-.Leh_func_begin18   #   Call between .Leh_func_begin18 and .Ltmp267
	.long	.Lset120
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset121 = .Ltmp267-.Leh_func_begin18   # >> Call Site 2 <<
	.long	.Lset121
.Lset122 = .Ltmp268-.Ltmp267            #   Call between .Ltmp267 and .Ltmp268
	.long	.Lset122
.Lset123 = .Ltmp269-.Leh_func_begin18   #     jumps to .Ltmp269
	.long	.Lset123
	.byte	0                       #   On action: cleanup
.Lset124 = .Ltmp268-.Leh_func_begin18   # >> Call Site 3 <<
	.long	.Lset124
.Lset125 = .Leh_func_end18-.Ltmp268     #   Call between .Ltmp268 and .Leh_func_end18
	.long	.Lset125
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core17sc_process_handleD1Ev,"axG",@progbits,_ZN7sc_core17sc_process_handleD1Ev,comdat
	.weak	_ZN7sc_core17sc_process_handleD1Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_process_handleD1Ev,@function
_ZN7sc_core17sc_process_handleD1Ev:     # @_ZN7sc_core17sc_process_handleD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp278:
	.cfi_def_cfa_offset 16
.Ltmp279:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp280:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp281:
	.size	_ZN7sc_core17sc_process_handleD1Ev, .Ltmp281-_ZN7sc_core17sc_process_handleD1Ev
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI20_0:
	.quad	4607182418800017408     # double 1.000000e+00
                                        #  (0x3ff0000000000000)
	.text
	.globl	_ZN7WBSlave12processSlaveEv
	.align	16, 0x90
	.type	_ZN7WBSlave12processSlaveEv,@function
_ZN7WBSlave12processSlaveEv:            # @_ZN7WBSlave12processSlaveEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin20:
	.cfi_lsda 3, .Lexception20
# BB#0:
	pushq	%rbp
.Ltmp523:
	.cfi_def_cfa_offset 16
.Ltmp524:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp525:
	.cfi_def_cfa_register %rbp
	subq	$11232, %rsp            # imm = 0x2BE0
	movq	%rdi, -8(%rbp)
	movl	$0, -20(%rbp)
	leaq	-64(%rbp), %rax
	xorl	%ecx, %ecx
	movq	%rdi, -10784(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rcx, -10792(%rbp)      # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
	movq	-10784(%rbp), %rax      # 8-byte Reload
.Ltmp282:
	leaq	-104(%rbp), %rdi
	movq	-10792(%rbp), %rsi      # 8-byte Reload
	movq	%rax, -10800(%rbp)      # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp283:
	jmp	.LBB20_1
.LBB20_1:
.Ltmp285:
	leaq	-160(%rbp), %rdi
	xorl	%esi, %esi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp286:
	jmp	.LBB20_2
.LBB20_2:
.Ltmp288:
	leaq	-200(%rbp), %rdi
	xorl	%esi, %esi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp289:
	jmp	.LBB20_3
.LBB20_3:
.Ltmp291:
	leaq	-240(%rbp), %rdi
	xorl	%esi, %esi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp292:
	jmp	.LBB20_4
.LBB20_4:
	movl	$0, %eax
	leaq	-10480(%rbp), %rcx
	movq	%rcx, -10808(%rbp)      # 8-byte Spill
	movl	%eax, -10812(%rbp)      # 4-byte Spill
.LBB20_5:                               # %arrayctor.loop
                                        # =>This Inner Loop Header: Depth=1
	movl	-10812(%rbp), %eax      # 4-byte Reload
	movl	%eax, %ecx
	incl	%ecx
	movslq	%eax, %rdx
	leaq	(%rdx,%rdx,4), %rdx
	leaq	-10480(%rbp,%rdx,8), %rdx
.Ltmp294:
	xorl	%esi, %esi
	movq	%rdx, %rdi
	movl	%eax, -10816(%rbp)      # 4-byte Spill
	movl	%ecx, -10820(%rbp)      # 4-byte Spill
	movq	%rdx, -10832(%rbp)      # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp295:
	jmp	.LBB20_6
.LBB20_6:                               #   in Loop: Header=BB20_5 Depth=1
	movl	-10816(%rbp), %eax      # 4-byte Reload
	cmpl	$255, %eax
	movl	-10820(%rbp), %ecx      # 4-byte Reload
	movl	%ecx, -10812(%rbp)      # 4-byte Spill
	jne	.LBB20_5
# BB#7:
	jmp	.LBB20_12
.LBB20_8:
.Ltmp284:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_192
.LBB20_9:
.Ltmp287:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_190
.LBB20_10:
.Ltmp290:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_188
.LBB20_11:
.Ltmp293:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_186
.LBB20_12:
.Ltmp299:
	leaq	-10520(%rbp), %rdi
	xorl	%esi, %esi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp300:
	jmp	.LBB20_13
.LBB20_13:
.Ltmp302:
	leaq	-10560(%rbp), %rdi
	movl	$4096, %esi             # imm = 0x1000
	xorl	%edx, %edx
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EiPNS_17sc_fxnum_observerE
.Ltmp303:
	jmp	.LBB20_14
.LBB20_14:
.Ltmp305:
	leaq	-10600(%rbp), %rdi
	xorl	%esi, %esi
	movsd	.LCPI20_0(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp306:
	jmp	.LBB20_15
.LBB20_15:
	jmp	.LBB20_16
.LBB20_16:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_167 Depth 2
                                        #     Child Loop BB20_70 Depth 2
                                        #       Child Loop BB20_110 Depth 3
                                        #       Child Loop BB20_74 Depth 3
                                        #         Child Loop BB20_81 Depth 4
                                        #     Child Loop BB20_46 Depth 2
                                        #       Child Loop BB20_52 Depth 3
                                        #     Child Loop BB20_34 Depth 2
                                        #     Child Loop BB20_18 Depth 2
	jmp	.LBB20_17
.LBB20_17:                              #   in Loop: Header=BB20_16 Depth=1
	jmp	.LBB20_18
.LBB20_18:                              #   Parent Loop BB20_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
.Ltmp308:
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp309:
	movq	%rax, -10840(%rbp)      # 8-byte Spill
	jmp	.LBB20_19
.LBB20_19:                              #   in Loop: Header=BB20_18 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	movq	-10840(%rbp), %rcx      # 8-byte Reload
	cmpl	$0, 1928(%rax,%rcx,4)
	jne	.LBB20_30
# BB#20:                                #   in Loop: Header=BB20_18 Depth=2
.Ltmp499:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp500:
	jmp	.LBB20_21
.LBB20_21:                              #   in Loop: Header=BB20_18 Depth=2
	jmp	.LBB20_18
.LBB20_22:
.Ltmp296:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	-10832(%rbp), %rdx      # 8-byte Reload
	cmpq	%rdx, %rax
	movq	%rdx, -10848(%rbp)      # 8-byte Spill
	je	.LBB20_25
.LBB20_23:                              # =>This Inner Loop Header: Depth=1
	movq	-10848(%rbp), %rax      # 8-byte Reload
	addq	$-40, %rax
.Ltmp297:
	movq	%rax, %rdi
	movq	%rax, -10856(%rbp)      # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp298:
	jmp	.LBB20_24
.LBB20_24:                              #   in Loop: Header=BB20_23 Depth=1
	movq	-10856(%rbp), %rax      # 8-byte Reload
	movq	-10808(%rbp), %rcx      # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -10848(%rbp)      # 8-byte Spill
	jne	.LBB20_23
.LBB20_25:
	jmp	.LBB20_184
.LBB20_26:
.Ltmp301:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_180
.LBB20_27:
.Ltmp304:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_178
.LBB20_28:
.Ltmp307:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_176
.LBB20_29:
.Ltmp501:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_174
.LBB20_30:                              #   in Loop: Header=BB20_16 Depth=1
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4192, %rax             # imm = 0x1060
.Ltmp310:
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp311:
	movq	%rax, -10864(%rbp)      # 8-byte Spill
	jmp	.LBB20_31
.LBB20_31:                              #   in Loop: Header=BB20_16 Depth=1
	movq	-10800(%rbp), %rax      # 8-byte Reload
	movq	-10864(%rbp), %rcx      # 8-byte Reload
	movl	1928(%rax,%rcx,4), %esi
.Ltmp312:
	leaq	-10560(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj
.Ltmp313:
	movq	%rax, -10872(%rbp)      # 8-byte Spill
	jmp	.LBB20_32
.LBB20_32:                              #   in Loop: Header=BB20_16 Depth=1
.Ltmp314:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp315:
	jmp	.LBB20_33
.LBB20_33:                              #   in Loop: Header=BB20_16 Depth=1
	movl	$0, -12(%rbp)
.LBB20_34:                              #   Parent Loop BB20_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$256, -12(%rbp)         # imm = 0x100
	jge	.LBB20_44
# BB#35:                                #   in Loop: Header=BB20_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$64, %eax
	movslq	%eax, %rcx
	movq	-10800(%rbp), %rdx      # 8-byte Reload
	movl	1992(%rdx,%rcx,4), %esi
.Ltmp486:
	leaq	-10520(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj
.Ltmp487:
	movq	%rax, -10880(%rbp)      # 8-byte Spill
	jmp	.LBB20_36
.LBB20_36:                              #   in Loop: Header=BB20_34 Depth=2
	movslq	-12(%rbp), %rax
	leaq	(%rax,%rax,4), %rax
	leaq	-10480(%rbp,%rax,8), %rdi
	leaq	-10520(%rbp), %rsi
	leaq	-10560(%rbp), %rdx
.Ltmp488:
	leaq	-10616(%rbp), %rax
	movq	%rdi, -10888(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dtdvERKNS_8sc_fxnumES2_
.Ltmp489:
	jmp	.LBB20_37
.LBB20_37:                              #   in Loop: Header=BB20_34 Depth=2
.Ltmp490:
	leaq	-10616(%rbp), %rsi
	movq	-10888(%rbp), %rdi      # 8-byte Reload
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
.Ltmp491:
	movq	%rax, -10896(%rbp)      # 8-byte Spill
	jmp	.LBB20_38
.LBB20_38:                              #   in Loop: Header=BB20_34 Depth=2
.Ltmp495:
	leaq	-10616(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp496:
	jmp	.LBB20_39
.LBB20_39:                              #   in Loop: Header=BB20_34 Depth=2
.Ltmp497:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp498:
	jmp	.LBB20_40
.LBB20_40:                              #   in Loop: Header=BB20_34 Depth=2
	jmp	.LBB20_41
.LBB20_41:                              #   in Loop: Header=BB20_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_34
.LBB20_42:
.Ltmp492:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
.Ltmp493:
	leaq	-10616(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp494:
	jmp	.LBB20_43
.LBB20_43:
	jmp	.LBB20_174
.LBB20_44:                              #   in Loop: Header=BB20_16 Depth=1
	movl	$0, -12(%rbp)
.Ltmp316:
	leaq	-64(%rbp), %rdi
	xorps	%xmm0, %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd
.Ltmp317:
	movq	%rax, -10904(%rbp)      # 8-byte Spill
	jmp	.LBB20_45
.LBB20_45:                              #   in Loop: Header=BB20_16 Depth=1
	jmp	.LBB20_46
.LBB20_46:                              #   Parent Loop BB20_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_52 Depth 3
	cmpl	$256, -12(%rbp)         # imm = 0x100
	jge	.LBB20_68
# BB#47:                                #   in Loop: Header=BB20_46 Depth=2
	movslq	-12(%rbp), %rax
	leaq	(%rax,%rax,4), %rax
	leaq	-10480(%rbp,%rax,8), %rdi
.Ltmp459:
	xorps	%xmm0, %xmm0
	callq	_ZN5sc_dtneERKNS_8sc_fxnumEd
.Ltmp460:
	movb	%al, -10905(%rbp)       # 1-byte Spill
	jmp	.LBB20_48
.LBB20_48:                              #   in Loop: Header=BB20_46 Depth=2
	movb	-10905(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB20_49
	jmp	.LBB20_65
.LBB20_49:                              #   in Loop: Header=BB20_46 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
	movslq	-12(%rbp), %rcx
	leaq	(%rcx,%rcx,4), %rcx
	leaq	-10480(%rbp,%rcx,8), %rsi
.Ltmp461:
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_
.Ltmp462:
	movq	%rax, -10920(%rbp)      # 8-byte Spill
	jmp	.LBB20_50
.LBB20_50:                              #   in Loop: Header=BB20_46 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp463:
	movl	$1, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp464:
	movq	%rax, -10928(%rbp)      # 8-byte Spill
	jmp	.LBB20_51
.LBB20_51:                              #   in Loop: Header=BB20_46 Depth=2
	jmp	.LBB20_52
.LBB20_52:                              #   Parent Loop BB20_16 Depth=1
                                        #     Parent Loop BB20_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp465:
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp466:
	movq	%rax, -10936(%rbp)      # 8-byte Spill
	jmp	.LBB20_53
.LBB20_53:                              #   in Loop: Header=BB20_52 Depth=3
	movq	-10936(%rbp), %rax      # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB20_56
# BB#54:                                #   in Loop: Header=BB20_52 Depth=3
.Ltmp484:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp485:
	jmp	.LBB20_55
.LBB20_55:                              #   in Loop: Header=BB20_52 Depth=3
	jmp	.LBB20_52
.LBB20_56:                              #   in Loop: Header=BB20_46 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
.Ltmp467:
	leaq	-10520(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
.Ltmp468:
	movq	%rax, -10944(%rbp)      # 8-byte Spill
	jmp	.LBB20_57
.LBB20_57:                              #   in Loop: Header=BB20_46 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp469:
	xorl	%esi, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp470:
	movq	%rax, -10952(%rbp)      # 8-byte Spill
	jmp	.LBB20_58
.LBB20_58:                              #   in Loop: Header=BB20_46 Depth=2
.Ltmp471:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp472:
	jmp	.LBB20_59
.LBB20_59:                              #   in Loop: Header=BB20_46 Depth=2
	movslq	-12(%rbp), %rax
	leaq	(%rax,%rax,4), %rax
	leaq	-10480(%rbp,%rax,8), %rsi
	leaq	-10520(%rbp), %rdx
.Ltmp473:
	leaq	-10632(%rbp), %rdi
	callq	_ZN5sc_dtmlERKNS_8sc_fxnumES2_
.Ltmp474:
	jmp	.LBB20_60
.LBB20_60:                              #   in Loop: Header=BB20_46 Depth=2
.Ltmp475:
	leaq	-64(%rbp), %rdi
	leaq	-10632(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE
.Ltmp476:
	movq	%rax, -10960(%rbp)      # 8-byte Spill
	jmp	.LBB20_61
.LBB20_61:                              #   in Loop: Header=BB20_46 Depth=2
.Ltmp480:
	leaq	-10632(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp481:
	jmp	.LBB20_62
.LBB20_62:                              #   in Loop: Header=BB20_46 Depth=2
	jmp	.LBB20_65
.LBB20_63:
.Ltmp477:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
.Ltmp478:
	leaq	-10632(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp479:
	jmp	.LBB20_64
.LBB20_64:
	jmp	.LBB20_174
.LBB20_65:                              #   in Loop: Header=BB20_46 Depth=2
.Ltmp482:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp483:
	jmp	.LBB20_66
.LBB20_66:                              #   in Loop: Header=BB20_46 Depth=2
	jmp	.LBB20_67
.LBB20_67:                              #   in Loop: Header=BB20_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_46
.LBB20_68:                              #   in Loop: Header=BB20_16 Depth=1
	movl	$1, -12(%rbp)
.Ltmp318:
	leaq	-240(%rbp), %rdi
	xorps	%xmm0, %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd
.Ltmp319:
	movq	%rax, -10968(%rbp)      # 8-byte Spill
	jmp	.LBB20_69
.LBB20_69:                              #   in Loop: Header=BB20_16 Depth=1
	jmp	.LBB20_70
.LBB20_70:                              #   Parent Loop BB20_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_110 Depth 3
                                        #       Child Loop BB20_74 Depth 3
                                        #         Child Loop BB20_81 Depth 4
	cmpl	$256, -12(%rbp)         # imm = 0x100
	jge	.LBB20_162
# BB#71:                                #   in Loop: Header=BB20_70 Depth=2
	movl	$0, -16(%rbp)
.Ltmp336:
	leaq	-160(%rbp), %rdi
	xorps	%xmm0, %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd
.Ltmp337:
	movq	%rax, -10976(%rbp)      # 8-byte Spill
	jmp	.LBB20_72
.LBB20_72:                              #   in Loop: Header=BB20_70 Depth=2
.Ltmp338:
	leaq	-104(%rbp), %rdi
	movq	-10976(%rbp), %rsi      # 8-byte Reload
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_
.Ltmp339:
	movq	%rax, -10984(%rbp)      # 8-byte Spill
	jmp	.LBB20_73
.LBB20_73:                              #   in Loop: Header=BB20_70 Depth=2
	jmp	.LBB20_74
.LBB20_74:                              #   Parent Loop BB20_16 Depth=1
                                        #     Parent Loop BB20_70 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_81 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB20_97
# BB#75:                                #   in Loop: Header=BB20_74 Depth=3
	movslq	-16(%rbp), %rax
	leaq	(%rax,%rax,4), %rax
	leaq	-10480(%rbp,%rax,8), %rsi
.Ltmp430:
	leaq	-104(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE
.Ltmp431:
	movq	%rax, -10992(%rbp)      # 8-byte Spill
	jmp	.LBB20_76
.LBB20_76:                              #   in Loop: Header=BB20_74 Depth=3
	movslq	-16(%rbp), %rax
	leaq	(%rax,%rax,4), %rax
	leaq	-10480(%rbp,%rax,8), %rdi
.Ltmp432:
	xorps	%xmm0, %xmm0
	callq	_ZN5sc_dtgtERKNS_8sc_fxnumEd
.Ltmp433:
	movb	%al, -10993(%rbp)       # 1-byte Spill
	jmp	.LBB20_77
.LBB20_77:                              #   in Loop: Header=BB20_74 Depth=3
	movb	-10993(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB20_78
	jmp	.LBB20_94
.LBB20_78:                              #   in Loop: Header=BB20_74 Depth=3
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
	movslq	-16(%rbp), %rcx
	leaq	(%rcx,%rcx,4), %rcx
	leaq	-10480(%rbp,%rcx,8), %rsi
.Ltmp434:
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_
.Ltmp435:
	movq	%rax, -11008(%rbp)      # 8-byte Spill
	jmp	.LBB20_79
.LBB20_79:                              #   in Loop: Header=BB20_74 Depth=3
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp436:
	movl	$1, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp437:
	movq	%rax, -11016(%rbp)      # 8-byte Spill
	jmp	.LBB20_80
.LBB20_80:                              #   in Loop: Header=BB20_74 Depth=3
	jmp	.LBB20_81
.LBB20_81:                              #   Parent Loop BB20_16 Depth=1
                                        #     Parent Loop BB20_70 Depth=2
                                        #       Parent Loop BB20_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp438:
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp439:
	movq	%rax, -11024(%rbp)      # 8-byte Spill
	jmp	.LBB20_82
.LBB20_82:                              #   in Loop: Header=BB20_81 Depth=4
	movq	-11024(%rbp), %rax      # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB20_85
# BB#83:                                #   in Loop: Header=BB20_81 Depth=4
.Ltmp457:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp458:
	jmp	.LBB20_84
.LBB20_84:                              #   in Loop: Header=BB20_81 Depth=4
	jmp	.LBB20_81
.LBB20_85:                              #   in Loop: Header=BB20_74 Depth=3
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
.Ltmp440:
	leaq	-10520(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
.Ltmp441:
	movq	%rax, -11032(%rbp)      # 8-byte Spill
	jmp	.LBB20_86
.LBB20_86:                              #   in Loop: Header=BB20_74 Depth=3
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp442:
	xorl	%esi, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp443:
	movq	%rax, -11040(%rbp)      # 8-byte Spill
	jmp	.LBB20_87
.LBB20_87:                              #   in Loop: Header=BB20_74 Depth=3
.Ltmp444:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp445:
	jmp	.LBB20_88
.LBB20_88:                              #   in Loop: Header=BB20_74 Depth=3
	movslq	-16(%rbp), %rax
	leaq	(%rax,%rax,4), %rax
	leaq	-10480(%rbp,%rax,8), %rsi
	leaq	-10520(%rbp), %rdx
.Ltmp446:
	leaq	-10648(%rbp), %rdi
	callq	_ZN5sc_dtmlERKNS_8sc_fxnumES2_
.Ltmp447:
	jmp	.LBB20_89
.LBB20_89:                              #   in Loop: Header=BB20_74 Depth=3
.Ltmp448:
	leaq	-160(%rbp), %rdi
	leaq	-10648(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE
.Ltmp449:
	movq	%rax, -11048(%rbp)      # 8-byte Spill
	jmp	.LBB20_90
.LBB20_90:                              #   in Loop: Header=BB20_74 Depth=3
.Ltmp453:
	leaq	-10648(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp454:
	jmp	.LBB20_91
.LBB20_91:                              #   in Loop: Header=BB20_74 Depth=3
	jmp	.LBB20_94
.LBB20_92:
.Ltmp450:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
.Ltmp451:
	leaq	-10648(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp452:
	jmp	.LBB20_93
.LBB20_93:
	jmp	.LBB20_174
.LBB20_94:                              #   in Loop: Header=BB20_74 Depth=3
.Ltmp455:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp456:
	jmp	.LBB20_95
.LBB20_95:                              #   in Loop: Header=BB20_74 Depth=3
	jmp	.LBB20_96
.LBB20_96:                              #   in Loop: Header=BB20_74 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_74
.LBB20_97:                              #   in Loop: Header=BB20_70 Depth=2
	leaq	-104(%rbp), %rdi
.Ltmp340:
	xorps	%xmm0, %xmm0
	callq	_ZN5sc_dtgtERKNS_8sc_fxnumEd
.Ltmp341:
	movb	%al, -11049(%rbp)       # 1-byte Spill
	jmp	.LBB20_98
.LBB20_98:                              #   in Loop: Header=BB20_70 Depth=2
	movb	-11049(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB20_99
	jmp	.LBB20_154
.LBB20_99:                              #   in Loop: Header=BB20_70 Depth=2
	leaq	-104(%rbp), %rdi
.Ltmp342:
	movsd	.LCPI20_0(%rip), %xmm0
	callq	_ZN5sc_dtltERKNS_8sc_fxnumEd
.Ltmp343:
	movb	%al, -11050(%rbp)       # 1-byte Spill
	jmp	.LBB20_100
.LBB20_100:                             #   in Loop: Header=BB20_70 Depth=2
	movb	-11050(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB20_101
	jmp	.LBB20_154
.LBB20_101:                             #   in Loop: Header=BB20_70 Depth=2
	leaq	-104(%rbp), %rax
.Ltmp344:
	leaq	-10680(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, %rdx
	movq	%rax, -11064(%rbp)      # 8-byte Spill
	callq	_ZN5sc_dtmlERKNS_8sc_fxnumES2_
.Ltmp345:
	jmp	.LBB20_102
.LBB20_102:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp346:
	leaq	-10664(%rbp), %rdi
	leaq	-10680(%rbp), %rdx
	movq	-11064(%rbp), %rsi      # 8-byte Reload
	callq	_ZN5sc_dtmiERKNS_8sc_fxnumERKNS_8sc_fxvalE
.Ltmp347:
	jmp	.LBB20_103
.LBB20_103:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp348:
	leaq	-10520(%rbp), %rdi
	leaq	-10664(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
.Ltmp349:
	movq	%rax, -11072(%rbp)      # 8-byte Spill
	jmp	.LBB20_104
.LBB20_104:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp353:
	leaq	-10664(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp354:
	jmp	.LBB20_105
.LBB20_105:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp358:
	leaq	-10680(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp359:
	jmp	.LBB20_106
.LBB20_106:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp360:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp361:
	jmp	.LBB20_107
.LBB20_107:                             #   in Loop: Header=BB20_70 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
	leaq	-10520(%rbp), %rsi
.Ltmp362:
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
.Ltmp363:
	movq	%rax, -11080(%rbp)      # 8-byte Spill
	jmp	.LBB20_108
.LBB20_108:                             #   in Loop: Header=BB20_70 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp364:
	movl	$1, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp365:
	movq	%rax, -11088(%rbp)      # 8-byte Spill
	jmp	.LBB20_109
.LBB20_109:                             #   in Loop: Header=BB20_70 Depth=2
	jmp	.LBB20_110
.LBB20_110:                             #   Parent Loop BB20_16 Depth=1
                                        #     Parent Loop BB20_70 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp366:
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp367:
	movq	%rax, -11096(%rbp)      # 8-byte Spill
	jmp	.LBB20_111
.LBB20_111:                             #   in Loop: Header=BB20_110 Depth=3
	movq	-11096(%rbp), %rax      # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB20_119
# BB#112:                               #   in Loop: Header=BB20_110 Depth=3
.Ltmp428:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp429:
	jmp	.LBB20_113
.LBB20_113:                             #   in Loop: Header=BB20_110 Depth=3
	jmp	.LBB20_110
.LBB20_114:
.Ltmp355:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_117
.LBB20_115:
.Ltmp350:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
.Ltmp351:
	leaq	-10664(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp352:
	jmp	.LBB20_116
.LBB20_116:
	jmp	.LBB20_117
.LBB20_117:
.Ltmp356:
	leaq	-10680(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp357:
	jmp	.LBB20_118
.LBB20_118:
	jmp	.LBB20_174
.LBB20_119:                             #   in Loop: Header=BB20_70 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
.Ltmp368:
	leaq	-10520(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
.Ltmp369:
	movq	%rax, -11104(%rbp)      # 8-byte Spill
	jmp	.LBB20_120
.LBB20_120:                             #   in Loop: Header=BB20_70 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp370:
	xorl	%esi, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp371:
	movq	%rax, -11112(%rbp)      # 8-byte Spill
	jmp	.LBB20_121
.LBB20_121:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp372:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp373:
	jmp	.LBB20_122
.LBB20_122:                             #   in Loop: Header=BB20_70 Depth=2
	leaq	-10520(%rbp), %rsi
	leaq	-160(%rbp), %rax
	leaq	-104(%rbp), %rdx
.Ltmp374:
	leaq	-10728(%rbp), %rdi
	movq	%rsi, -11120(%rbp)      # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dtdvERKNS_8sc_fxnumES2_
.Ltmp375:
	jmp	.LBB20_123
.LBB20_123:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp376:
	leaq	-10712(%rbp), %rdi
	leaq	-10728(%rbp), %rdx
	movq	-11120(%rbp), %rsi      # 8-byte Reload
	callq	_ZN5sc_dtplERKNS_8sc_fxnumERKNS_8sc_fxvalE
.Ltmp377:
	jmp	.LBB20_124
.LBB20_124:                             #   in Loop: Header=BB20_70 Depth=2
	leaq	-64(%rbp), %rsi
	leaq	-160(%rbp), %rdx
.Ltmp378:
	leaq	-10760(%rbp), %rdi
	callq	_ZN5sc_dtmiERKNS_8sc_fxnumES2_
.Ltmp379:
	jmp	.LBB20_125
.LBB20_125:                             #   in Loop: Header=BB20_70 Depth=2
	leaq	-10600(%rbp), %rsi
	leaq	-104(%rbp), %rdx
.Ltmp380:
	leaq	-10776(%rbp), %rdi
	callq	_ZN5sc_dtmiERKNS_8sc_fxnumES2_
.Ltmp381:
	jmp	.LBB20_126
.LBB20_126:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp382:
	leaq	-10744(%rbp), %rdi
	leaq	-10760(%rbp), %rsi
	leaq	-10776(%rbp), %rdx
	callq	_ZN5sc_dtdvERKNS_8sc_fxvalES2_
.Ltmp383:
	jmp	.LBB20_127
.LBB20_127:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp384:
	leaq	-10696(%rbp), %rdi
	leaq	-10712(%rbp), %rsi
	leaq	-10744(%rbp), %rdx
	callq	_ZN5sc_dtplERKNS_8sc_fxvalES2_
.Ltmp385:
	jmp	.LBB20_128
.LBB20_128:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp386:
	leaq	-200(%rbp), %rdi
	leaq	-10696(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
.Ltmp387:
	movq	%rax, -11128(%rbp)      # 8-byte Spill
	jmp	.LBB20_129
.LBB20_129:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp391:
	leaq	-10696(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp392:
	jmp	.LBB20_130
.LBB20_130:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp396:
	leaq	-10744(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp397:
	jmp	.LBB20_131
.LBB20_131:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp401:
	leaq	-10776(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp402:
	jmp	.LBB20_132
.LBB20_132:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp406:
	leaq	-10760(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp407:
	jmp	.LBB20_133
.LBB20_133:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp411:
	leaq	-10712(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp412:
	jmp	.LBB20_134
.LBB20_134:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp416:
	leaq	-10728(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp417:
	jmp	.LBB20_135
.LBB20_135:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp418:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp419:
	jmp	.LBB20_136
.LBB20_136:                             #   in Loop: Header=BB20_70 Depth=2
	jmp	.LBB20_154
.LBB20_137:
.Ltmp413:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_152
.LBB20_138:
.Ltmp408:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_150
.LBB20_139:
.Ltmp403:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_148
.LBB20_140:
.Ltmp398:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_146
.LBB20_141:
.Ltmp393:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	jmp	.LBB20_144
.LBB20_142:
.Ltmp388:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
.Ltmp389:
	leaq	-10696(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp390:
	jmp	.LBB20_143
.LBB20_143:
	jmp	.LBB20_144
.LBB20_144:
.Ltmp394:
	leaq	-10744(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp395:
	jmp	.LBB20_145
.LBB20_145:
	jmp	.LBB20_146
.LBB20_146:
.Ltmp399:
	leaq	-10776(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp400:
	jmp	.LBB20_147
.LBB20_147:
	jmp	.LBB20_148
.LBB20_148:
.Ltmp404:
	leaq	-10760(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp405:
	jmp	.LBB20_149
.LBB20_149:
	jmp	.LBB20_150
.LBB20_150:
.Ltmp409:
	leaq	-10712(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp410:
	jmp	.LBB20_151
.LBB20_151:
	jmp	.LBB20_152
.LBB20_152:
.Ltmp414:
	leaq	-10728(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp415:
	jmp	.LBB20_153
.LBB20_153:
	jmp	.LBB20_174
.LBB20_154:                             #   in Loop: Header=BB20_70 Depth=2
	leaq	-200(%rbp), %rdi
	leaq	-240(%rbp), %rsi
.Ltmp420:
	callq	_ZN5sc_dtgtERKNS_8sc_fxnumES2_
.Ltmp421:
	movb	%al, -11129(%rbp)       # 1-byte Spill
	jmp	.LBB20_155
.LBB20_155:                             #   in Loop: Header=BB20_70 Depth=2
	movb	-11129(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB20_156
	jmp	.LBB20_159
.LBB20_156:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp422:
	leaq	-240(%rbp), %rdi
	leaq	-200(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_
.Ltmp423:
	movq	%rax, -11144(%rbp)      # 8-byte Spill
	jmp	.LBB20_157
.LBB20_157:                             #   in Loop: Header=BB20_70 Depth=2
	movl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
.Ltmp424:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp425:
	jmp	.LBB20_158
.LBB20_158:                             #   in Loop: Header=BB20_70 Depth=2
	jmp	.LBB20_159
.LBB20_159:                             #   in Loop: Header=BB20_70 Depth=2
.Ltmp426:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp427:
	jmp	.LBB20_160
.LBB20_160:                             #   in Loop: Header=BB20_70 Depth=2
	jmp	.LBB20_161
.LBB20_161:                             #   in Loop: Header=BB20_70 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_70
.LBB20_162:                             #   in Loop: Header=BB20_16 Depth=1
.Ltmp320:
	movl	$_ZSt4cout, %edi
	movl	$.L.str15, %esi
	callq	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
.Ltmp321:
	movq	%rax, -11152(%rbp)      # 8-byte Spill
	jmp	.LBB20_163
.LBB20_163:                             #   in Loop: Header=BB20_16 Depth=1
	movl	-20(%rbp), %esi
.Ltmp322:
	movq	-11152(%rbp), %rdi      # 8-byte Reload
	callq	_ZNSolsEi
.Ltmp323:
	movq	%rax, -11160(%rbp)      # 8-byte Spill
	jmp	.LBB20_164
.LBB20_164:                             #   in Loop: Header=BB20_16 Depth=1
.Ltmp324:
	movl	$.L.str16, %esi
	movq	-11160(%rbp), %rdi      # 8-byte Reload
	callq	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
.Ltmp325:
	movq	%rax, -11168(%rbp)      # 8-byte Spill
	jmp	.LBB20_165
.LBB20_165:                             #   in Loop: Header=BB20_16 Depth=1
	movl	-20(%rbp), %eax
	movq	-10800(%rbp), %rcx      # 8-byte Reload
	movl	%eax, 2248(%rcx)
	addq	$4016, %rcx             # imm = 0xFB0
.Ltmp326:
	movq	%rcx, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp327:
	movq	%rax, -11176(%rbp)      # 8-byte Spill
	jmp	.LBB20_166
.LBB20_166:                             #   in Loop: Header=BB20_16 Depth=1
	movq	-10800(%rbp), %rax      # 8-byte Reload
	movq	-11176(%rbp), %rcx      # 8-byte Reload
	movl	1928(%rax,%rcx,4), %edx
	orl	$1, %edx
	movl	%edx, 1928(%rax,%rcx,4)
.LBB20_167:                             #   Parent Loop BB20_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
.Ltmp328:
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp329:
	movq	%rax, -11184(%rbp)      # 8-byte Spill
	jmp	.LBB20_168
.LBB20_168:                             #   in Loop: Header=BB20_167 Depth=2
	movq	-10800(%rbp), %rax      # 8-byte Reload
	movq	-11184(%rbp), %rcx      # 8-byte Reload
	cmpl	$0, 1928(%rax,%rcx,4)
	je	.LBB20_171
# BB#169:                               #   in Loop: Header=BB20_167 Depth=2
.Ltmp334:
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp335:
	jmp	.LBB20_170
.LBB20_170:                             #   in Loop: Header=BB20_167 Depth=2
	jmp	.LBB20_167
.LBB20_171:                             #   in Loop: Header=BB20_16 Depth=1
	movq	-10800(%rbp), %rax      # 8-byte Reload
	addq	$4016, %rax             # imm = 0xFB0
.Ltmp330:
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp331:
	movq	%rax, -11192(%rbp)      # 8-byte Spill
	jmp	.LBB20_172
.LBB20_172:                             #   in Loop: Header=BB20_16 Depth=1
	movq	-10800(%rbp), %rax      # 8-byte Reload
	movq	-11192(%rbp), %rcx      # 8-byte Reload
	movl	$0, 1928(%rax,%rcx,4)
.Ltmp332:
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp333:
	jmp	.LBB20_173
.LBB20_173:                             #   in Loop: Header=BB20_16 Depth=1
	jmp	.LBB20_16
.LBB20_174:
.Ltmp502:
	leaq	-10600(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp503:
	jmp	.LBB20_175
.LBB20_175:
	jmp	.LBB20_176
.LBB20_176:
.Ltmp504:
	leaq	-10560(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp505:
	jmp	.LBB20_177
.LBB20_177:
	jmp	.LBB20_178
.LBB20_178:
.Ltmp506:
	leaq	-10520(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp507:
	jmp	.LBB20_179
.LBB20_179:
	jmp	.LBB20_180
.LBB20_180:
	leaq	-10480(%rbp), %rax
	movq	%rax, %rcx
	addq	$10240, %rcx            # imm = 0x2800
	movq	%rax, -11200(%rbp)      # 8-byte Spill
	movq	%rcx, -11208(%rbp)      # 8-byte Spill
.LBB20_181:                             # =>This Inner Loop Header: Depth=1
	movq	-11208(%rbp), %rax      # 8-byte Reload
	addq	$-40, %rax
.Ltmp508:
	movq	%rax, %rdi
	movq	%rax, -11216(%rbp)      # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp509:
	jmp	.LBB20_182
.LBB20_182:                             #   in Loop: Header=BB20_181 Depth=1
	movq	-11216(%rbp), %rax      # 8-byte Reload
	movq	-11200(%rbp), %rcx      # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -11208(%rbp)      # 8-byte Spill
	jne	.LBB20_181
# BB#183:
	jmp	.LBB20_184
.LBB20_184:
.Ltmp510:
	leaq	-240(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp511:
	jmp	.LBB20_185
.LBB20_185:
	jmp	.LBB20_186
.LBB20_186:
.Ltmp512:
	leaq	-200(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp513:
	jmp	.LBB20_187
.LBB20_187:
	jmp	.LBB20_188
.LBB20_188:
.Ltmp514:
	leaq	-160(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp515:
	jmp	.LBB20_189
.LBB20_189:
	jmp	.LBB20_190
.LBB20_190:
.Ltmp516:
	leaq	-104(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp517:
	jmp	.LBB20_191
.LBB20_191:
	jmp	.LBB20_192
.LBB20_192:
.Ltmp518:
	leaq	-64(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp519:
	jmp	.LBB20_193
.LBB20_193:
	jmp	.LBB20_194
.LBB20_194:
	movq	-112(%rbp), %rdi
	callq	_Unwind_Resume
.LBB20_195:
.Ltmp520:
	movq	%rax, -11224(%rbp)      # 8-byte Spill
	movq	%rdx, -11232(%rbp)      # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp526:
	.size	_ZN7WBSlave12processSlaveEv, .Ltmp526-_ZN7WBSlave12processSlaveEv
	.cfi_endproc
.Leh_func_end20:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table20:
.Lexception20:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\337\204"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.ascii	 "\326\004"             # Call site table length
.Lset126 = .Leh_func_begin20-.Leh_func_begin20 # >> Call Site 1 <<
	.long	.Lset126
.Lset127 = .Ltmp282-.Leh_func_begin20   #   Call between .Leh_func_begin20 and .Ltmp282
	.long	.Lset127
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset128 = .Ltmp282-.Leh_func_begin20   # >> Call Site 2 <<
	.long	.Lset128
.Lset129 = .Ltmp283-.Ltmp282            #   Call between .Ltmp282 and .Ltmp283
	.long	.Lset129
.Lset130 = .Ltmp284-.Leh_func_begin20   #     jumps to .Ltmp284
	.long	.Lset130
	.byte	0                       #   On action: cleanup
.Lset131 = .Ltmp285-.Leh_func_begin20   # >> Call Site 3 <<
	.long	.Lset131
.Lset132 = .Ltmp286-.Ltmp285            #   Call between .Ltmp285 and .Ltmp286
	.long	.Lset132
.Lset133 = .Ltmp287-.Leh_func_begin20   #     jumps to .Ltmp287
	.long	.Lset133
	.byte	0                       #   On action: cleanup
.Lset134 = .Ltmp288-.Leh_func_begin20   # >> Call Site 4 <<
	.long	.Lset134
.Lset135 = .Ltmp289-.Ltmp288            #   Call between .Ltmp288 and .Ltmp289
	.long	.Lset135
.Lset136 = .Ltmp290-.Leh_func_begin20   #     jumps to .Ltmp290
	.long	.Lset136
	.byte	0                       #   On action: cleanup
.Lset137 = .Ltmp291-.Leh_func_begin20   # >> Call Site 5 <<
	.long	.Lset137
.Lset138 = .Ltmp292-.Ltmp291            #   Call between .Ltmp291 and .Ltmp292
	.long	.Lset138
.Lset139 = .Ltmp293-.Leh_func_begin20   #     jumps to .Ltmp293
	.long	.Lset139
	.byte	0                       #   On action: cleanup
.Lset140 = .Ltmp294-.Leh_func_begin20   # >> Call Site 6 <<
	.long	.Lset140
.Lset141 = .Ltmp295-.Ltmp294            #   Call between .Ltmp294 and .Ltmp295
	.long	.Lset141
.Lset142 = .Ltmp296-.Leh_func_begin20   #     jumps to .Ltmp296
	.long	.Lset142
	.byte	0                       #   On action: cleanup
.Lset143 = .Ltmp299-.Leh_func_begin20   # >> Call Site 7 <<
	.long	.Lset143
.Lset144 = .Ltmp300-.Ltmp299            #   Call between .Ltmp299 and .Ltmp300
	.long	.Lset144
.Lset145 = .Ltmp301-.Leh_func_begin20   #     jumps to .Ltmp301
	.long	.Lset145
	.byte	0                       #   On action: cleanup
.Lset146 = .Ltmp302-.Leh_func_begin20   # >> Call Site 8 <<
	.long	.Lset146
.Lset147 = .Ltmp303-.Ltmp302            #   Call between .Ltmp302 and .Ltmp303
	.long	.Lset147
.Lset148 = .Ltmp304-.Leh_func_begin20   #     jumps to .Ltmp304
	.long	.Lset148
	.byte	0                       #   On action: cleanup
.Lset149 = .Ltmp305-.Leh_func_begin20   # >> Call Site 9 <<
	.long	.Lset149
.Lset150 = .Ltmp306-.Ltmp305            #   Call between .Ltmp305 and .Ltmp306
	.long	.Lset150
.Lset151 = .Ltmp307-.Leh_func_begin20   #     jumps to .Ltmp307
	.long	.Lset151
	.byte	0                       #   On action: cleanup
.Lset152 = .Ltmp308-.Leh_func_begin20   # >> Call Site 10 <<
	.long	.Lset152
.Lset153 = .Ltmp500-.Ltmp308            #   Call between .Ltmp308 and .Ltmp500
	.long	.Lset153
.Lset154 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset154
	.byte	0                       #   On action: cleanup
.Lset155 = .Ltmp297-.Leh_func_begin20   # >> Call Site 11 <<
	.long	.Lset155
.Lset156 = .Ltmp298-.Ltmp297            #   Call between .Ltmp297 and .Ltmp298
	.long	.Lset156
.Lset157 = .Ltmp520-.Leh_func_begin20   #     jumps to .Ltmp520
	.long	.Lset157
	.byte	1                       #   On action: 1
.Lset158 = .Ltmp310-.Leh_func_begin20   # >> Call Site 12 <<
	.long	.Lset158
.Lset159 = .Ltmp489-.Ltmp310            #   Call between .Ltmp310 and .Ltmp489
	.long	.Lset159
.Lset160 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset160
	.byte	0                       #   On action: cleanup
.Lset161 = .Ltmp490-.Leh_func_begin20   # >> Call Site 13 <<
	.long	.Lset161
.Lset162 = .Ltmp491-.Ltmp490            #   Call between .Ltmp490 and .Ltmp491
	.long	.Lset162
.Lset163 = .Ltmp492-.Leh_func_begin20   #     jumps to .Ltmp492
	.long	.Lset163
	.byte	0                       #   On action: cleanup
.Lset164 = .Ltmp495-.Leh_func_begin20   # >> Call Site 14 <<
	.long	.Lset164
.Lset165 = .Ltmp498-.Ltmp495            #   Call between .Ltmp495 and .Ltmp498
	.long	.Lset165
.Lset166 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset166
	.byte	0                       #   On action: cleanup
.Lset167 = .Ltmp493-.Leh_func_begin20   # >> Call Site 15 <<
	.long	.Lset167
.Lset168 = .Ltmp494-.Ltmp493            #   Call between .Ltmp493 and .Ltmp494
	.long	.Lset168
.Lset169 = .Ltmp520-.Leh_func_begin20   #     jumps to .Ltmp520
	.long	.Lset169
	.byte	1                       #   On action: 1
.Lset170 = .Ltmp316-.Leh_func_begin20   # >> Call Site 16 <<
	.long	.Lset170
.Lset171 = .Ltmp474-.Ltmp316            #   Call between .Ltmp316 and .Ltmp474
	.long	.Lset171
.Lset172 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset172
	.byte	0                       #   On action: cleanup
.Lset173 = .Ltmp475-.Leh_func_begin20   # >> Call Site 17 <<
	.long	.Lset173
.Lset174 = .Ltmp476-.Ltmp475            #   Call between .Ltmp475 and .Ltmp476
	.long	.Lset174
.Lset175 = .Ltmp477-.Leh_func_begin20   #     jumps to .Ltmp477
	.long	.Lset175
	.byte	0                       #   On action: cleanup
.Lset176 = .Ltmp480-.Leh_func_begin20   # >> Call Site 18 <<
	.long	.Lset176
.Lset177 = .Ltmp481-.Ltmp480            #   Call between .Ltmp480 and .Ltmp481
	.long	.Lset177
.Lset178 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset178
	.byte	0                       #   On action: cleanup
.Lset179 = .Ltmp478-.Leh_func_begin20   # >> Call Site 19 <<
	.long	.Lset179
.Lset180 = .Ltmp479-.Ltmp478            #   Call between .Ltmp478 and .Ltmp479
	.long	.Lset180
.Lset181 = .Ltmp520-.Leh_func_begin20   #     jumps to .Ltmp520
	.long	.Lset181
	.byte	1                       #   On action: 1
.Lset182 = .Ltmp482-.Leh_func_begin20   # >> Call Site 20 <<
	.long	.Lset182
.Lset183 = .Ltmp447-.Ltmp482            #   Call between .Ltmp482 and .Ltmp447
	.long	.Lset183
.Lset184 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset184
	.byte	0                       #   On action: cleanup
.Lset185 = .Ltmp448-.Leh_func_begin20   # >> Call Site 21 <<
	.long	.Lset185
.Lset186 = .Ltmp449-.Ltmp448            #   Call between .Ltmp448 and .Ltmp449
	.long	.Lset186
.Lset187 = .Ltmp450-.Leh_func_begin20   #     jumps to .Ltmp450
	.long	.Lset187
	.byte	0                       #   On action: cleanup
.Lset188 = .Ltmp453-.Leh_func_begin20   # >> Call Site 22 <<
	.long	.Lset188
.Lset189 = .Ltmp454-.Ltmp453            #   Call between .Ltmp453 and .Ltmp454
	.long	.Lset189
.Lset190 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset190
	.byte	0                       #   On action: cleanup
.Lset191 = .Ltmp451-.Leh_func_begin20   # >> Call Site 23 <<
	.long	.Lset191
.Lset192 = .Ltmp452-.Ltmp451            #   Call between .Ltmp451 and .Ltmp452
	.long	.Lset192
.Lset193 = .Ltmp520-.Leh_func_begin20   #     jumps to .Ltmp520
	.long	.Lset193
	.byte	1                       #   On action: 1
.Lset194 = .Ltmp455-.Leh_func_begin20   # >> Call Site 24 <<
	.long	.Lset194
.Lset195 = .Ltmp345-.Ltmp455            #   Call between .Ltmp455 and .Ltmp345
	.long	.Lset195
.Lset196 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset196
	.byte	0                       #   On action: cleanup
.Lset197 = .Ltmp346-.Leh_func_begin20   # >> Call Site 25 <<
	.long	.Lset197
.Lset198 = .Ltmp347-.Ltmp346            #   Call between .Ltmp346 and .Ltmp347
	.long	.Lset198
.Lset199 = .Ltmp355-.Leh_func_begin20   #     jumps to .Ltmp355
	.long	.Lset199
	.byte	0                       #   On action: cleanup
.Lset200 = .Ltmp348-.Leh_func_begin20   # >> Call Site 26 <<
	.long	.Lset200
.Lset201 = .Ltmp349-.Ltmp348            #   Call between .Ltmp348 and .Ltmp349
	.long	.Lset201
.Lset202 = .Ltmp350-.Leh_func_begin20   #     jumps to .Ltmp350
	.long	.Lset202
	.byte	0                       #   On action: cleanup
.Lset203 = .Ltmp353-.Leh_func_begin20   # >> Call Site 27 <<
	.long	.Lset203
.Lset204 = .Ltmp354-.Ltmp353            #   Call between .Ltmp353 and .Ltmp354
	.long	.Lset204
.Lset205 = .Ltmp355-.Leh_func_begin20   #     jumps to .Ltmp355
	.long	.Lset205
	.byte	0                       #   On action: cleanup
.Lset206 = .Ltmp358-.Leh_func_begin20   # >> Call Site 28 <<
	.long	.Lset206
.Lset207 = .Ltmp429-.Ltmp358            #   Call between .Ltmp358 and .Ltmp429
	.long	.Lset207
.Lset208 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset208
	.byte	0                       #   On action: cleanup
.Lset209 = .Ltmp351-.Leh_func_begin20   # >> Call Site 29 <<
	.long	.Lset209
.Lset210 = .Ltmp357-.Ltmp351            #   Call between .Ltmp351 and .Ltmp357
	.long	.Lset210
.Lset211 = .Ltmp520-.Leh_func_begin20   #     jumps to .Ltmp520
	.long	.Lset211
	.byte	1                       #   On action: 1
.Lset212 = .Ltmp368-.Leh_func_begin20   # >> Call Site 30 <<
	.long	.Lset212
.Lset213 = .Ltmp375-.Ltmp368            #   Call between .Ltmp368 and .Ltmp375
	.long	.Lset213
.Lset214 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset214
	.byte	0                       #   On action: cleanup
.Lset215 = .Ltmp376-.Leh_func_begin20   # >> Call Site 31 <<
	.long	.Lset215
.Lset216 = .Ltmp377-.Ltmp376            #   Call between .Ltmp376 and .Ltmp377
	.long	.Lset216
.Lset217 = .Ltmp413-.Leh_func_begin20   #     jumps to .Ltmp413
	.long	.Lset217
	.byte	0                       #   On action: cleanup
.Lset218 = .Ltmp378-.Leh_func_begin20   # >> Call Site 32 <<
	.long	.Lset218
.Lset219 = .Ltmp379-.Ltmp378            #   Call between .Ltmp378 and .Ltmp379
	.long	.Lset219
.Lset220 = .Ltmp408-.Leh_func_begin20   #     jumps to .Ltmp408
	.long	.Lset220
	.byte	0                       #   On action: cleanup
.Lset221 = .Ltmp380-.Leh_func_begin20   # >> Call Site 33 <<
	.long	.Lset221
.Lset222 = .Ltmp381-.Ltmp380            #   Call between .Ltmp380 and .Ltmp381
	.long	.Lset222
.Lset223 = .Ltmp403-.Leh_func_begin20   #     jumps to .Ltmp403
	.long	.Lset223
	.byte	0                       #   On action: cleanup
.Lset224 = .Ltmp382-.Leh_func_begin20   # >> Call Site 34 <<
	.long	.Lset224
.Lset225 = .Ltmp383-.Ltmp382            #   Call between .Ltmp382 and .Ltmp383
	.long	.Lset225
.Lset226 = .Ltmp398-.Leh_func_begin20   #     jumps to .Ltmp398
	.long	.Lset226
	.byte	0                       #   On action: cleanup
.Lset227 = .Ltmp384-.Leh_func_begin20   # >> Call Site 35 <<
	.long	.Lset227
.Lset228 = .Ltmp385-.Ltmp384            #   Call between .Ltmp384 and .Ltmp385
	.long	.Lset228
.Lset229 = .Ltmp393-.Leh_func_begin20   #     jumps to .Ltmp393
	.long	.Lset229
	.byte	0                       #   On action: cleanup
.Lset230 = .Ltmp386-.Leh_func_begin20   # >> Call Site 36 <<
	.long	.Lset230
.Lset231 = .Ltmp387-.Ltmp386            #   Call between .Ltmp386 and .Ltmp387
	.long	.Lset231
.Lset232 = .Ltmp388-.Leh_func_begin20   #     jumps to .Ltmp388
	.long	.Lset232
	.byte	0                       #   On action: cleanup
.Lset233 = .Ltmp391-.Leh_func_begin20   # >> Call Site 37 <<
	.long	.Lset233
.Lset234 = .Ltmp392-.Ltmp391            #   Call between .Ltmp391 and .Ltmp392
	.long	.Lset234
.Lset235 = .Ltmp393-.Leh_func_begin20   #     jumps to .Ltmp393
	.long	.Lset235
	.byte	0                       #   On action: cleanup
.Lset236 = .Ltmp396-.Leh_func_begin20   # >> Call Site 38 <<
	.long	.Lset236
.Lset237 = .Ltmp397-.Ltmp396            #   Call between .Ltmp396 and .Ltmp397
	.long	.Lset237
.Lset238 = .Ltmp398-.Leh_func_begin20   #     jumps to .Ltmp398
	.long	.Lset238
	.byte	0                       #   On action: cleanup
.Lset239 = .Ltmp401-.Leh_func_begin20   # >> Call Site 39 <<
	.long	.Lset239
.Lset240 = .Ltmp402-.Ltmp401            #   Call between .Ltmp401 and .Ltmp402
	.long	.Lset240
.Lset241 = .Ltmp403-.Leh_func_begin20   #     jumps to .Ltmp403
	.long	.Lset241
	.byte	0                       #   On action: cleanup
.Lset242 = .Ltmp406-.Leh_func_begin20   # >> Call Site 40 <<
	.long	.Lset242
.Lset243 = .Ltmp407-.Ltmp406            #   Call between .Ltmp406 and .Ltmp407
	.long	.Lset243
.Lset244 = .Ltmp408-.Leh_func_begin20   #     jumps to .Ltmp408
	.long	.Lset244
	.byte	0                       #   On action: cleanup
.Lset245 = .Ltmp411-.Leh_func_begin20   # >> Call Site 41 <<
	.long	.Lset245
.Lset246 = .Ltmp412-.Ltmp411            #   Call between .Ltmp411 and .Ltmp412
	.long	.Lset246
.Lset247 = .Ltmp413-.Leh_func_begin20   #     jumps to .Ltmp413
	.long	.Lset247
	.byte	0                       #   On action: cleanup
.Lset248 = .Ltmp416-.Leh_func_begin20   # >> Call Site 42 <<
	.long	.Lset248
.Lset249 = .Ltmp419-.Ltmp416            #   Call between .Ltmp416 and .Ltmp419
	.long	.Lset249
.Lset250 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset250
	.byte	0                       #   On action: cleanup
.Lset251 = .Ltmp389-.Leh_func_begin20   # >> Call Site 43 <<
	.long	.Lset251
.Lset252 = .Ltmp415-.Ltmp389            #   Call between .Ltmp389 and .Ltmp415
	.long	.Lset252
.Lset253 = .Ltmp520-.Leh_func_begin20   #     jumps to .Ltmp520
	.long	.Lset253
	.byte	1                       #   On action: 1
.Lset254 = .Ltmp420-.Leh_func_begin20   # >> Call Site 44 <<
	.long	.Lset254
.Lset255 = .Ltmp333-.Ltmp420            #   Call between .Ltmp420 and .Ltmp333
	.long	.Lset255
.Lset256 = .Ltmp501-.Leh_func_begin20   #     jumps to .Ltmp501
	.long	.Lset256
	.byte	0                       #   On action: cleanup
.Lset257 = .Ltmp502-.Leh_func_begin20   # >> Call Site 45 <<
	.long	.Lset257
.Lset258 = .Ltmp519-.Ltmp502            #   Call between .Ltmp502 and .Ltmp519
	.long	.Lset258
.Lset259 = .Ltmp520-.Leh_func_begin20   #     jumps to .Ltmp520
	.long	.Lset259
	.byte	1                       #   On action: 1
.Lset260 = .Ltmp519-.Leh_func_begin20   # >> Call Site 46 <<
	.long	.Lset260
.Lset261 = .Leh_func_end20-.Ltmp519     #   Call between .Ltmp519 and .Leh_func_end20
	.long	.Lset261
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI21_0:
	.quad	-4600548896847311975    # double -1.178350e+01
                                        #  (0xc02791272f99cb99)
.LCPI21_1:
	.quad	-4600939104020007089    # double -1.109035e+01
                                        #  (0xc0262e42ffaef74f)
.LCPI21_2:
	.quad	-4601329311192702203    # double -1.039721e+01
                                        #  (0xc024cb5ecfc42305)
.LCPI21_3:
	.quad	-4601557567756927720    # double -9.991743e+00
                                        #  (0xc023fbc5b0567d18)
.LCPI21_4:
	.quad	-4601719518366523217    # double -9.704061e+00
                                        #  (0xc023687a9fc820af)
.LCPI21_5:
	.quad	-4601947774930185784    # double -9.298595e+00
                                        #  (0xc02298e1806311c8)
.LCPI21_6:
	.quad	-4602109724986964426    # double -9.010914e+00
                                        #  (0xc022059690c80636)
.LCPI21_7:
	.quad	-4602337981734711628    # double -8.605449e+00
                                        #  (0xc02135fd666a0eb4)
.LCPI21_8:
	.quad	-4602499931282583512    # double -8.317769e+00
                                        #  (0xc020a2b295245028)
.LCPI21_9:
	.quad	-4602777557105313199    # double -7.912303e+00
                                        #  (0xc01fa632c898fa51)
.LCPI21_10:
	.quad	-4603101459966066256    # double -7.624620e+00
                                        #  (0xc01e7f9c45a401b0)
.LCPI21_11:
	.quad	-4603557972350297452    # double -7.219155e+00
                                        #  (0xc01ce06a33249a94)
.LCPI21_12:
	.quad	-4603881876735518983    # double -6.931470e+00
                                        #  (0xc01bb9d3555216f9)
.LCPI21_13:
	.quad	-4604112992863142649    # double -6.726198e+00
                                        #  (0xc01ae7a06aa1bd07)
.LCPI21_14:
	.quad	-4604338389055573884    # double -6.526006e+00
                                        #  (0xc01a1aa146a5f084)
.LCPI21_15:
	.quad	-4604469464557317449    # double -6.409587e+00
                                        #  (0xc019a36ae1ed92b7)
.LCPI21_16:
	.quad	-4604662289313246357    # double -6.238325e+00
                                        #  (0xc018f40b5ed8d36b)
.LCPI21_17:
	.quad	-4604821603656920429    # double -6.096825e+00
                                        #  (0xc01863261bfc1293)
.LCPI21_18:
	.quad	-4605118803030543042    # double -5.832859e+00
                                        #  (0xc01754d8fce4753e)
.LCPI21_19:
	.quad	-4605145504876111422    # double -5.809143e+00
                                        #  (0xc0173c8ffadf59c2)
.LCPI21_20:
	.quad	-4605442703659762484    # double -5.545177e+00
                                        #  (0xc0162e42fef1fccc)
.LCPI21_21:
	.quad	-4605602018003436556    # double -5.403678e+00
                                        #  (0xc0159d5dbc153bf4)
.LCPI21_22:
	.quad	-4605899216787087619    # double -5.139712e+00
                                        #  (0xc0148f10c027defd)
.LCPI21_23:
	.quad	-4605983480239497629    # double -5.064871e+00
                                        #  (0xc014426da301de63)
.LCPI21_24:
	.quad	-4606223118005152712    # double -4.852030e+00
                                        #  (0xc013687a9f1c5438)
.LCPI21_25:
	.quad	-4606427268725298805    # double -4.670708e+00
                                        #  (0xc012aece13f4a98b)
.LCPI21_26:
	.quad	-4606679631132477846    # double -4.446565e+00
                                        #  (0xc011c9486052366a)
.LCPI21_27:
	.quad	-4606817335687426720    # double -4.324259e+00
                                        #  (0xc0114c0a893d4d60)
.LCPI21_28:
	.quad	-4607003532351668839    # double -4.158883e+00
                                        #  (0xc010a2b23f357d99)
.LCPI21_29:
	.quad	-4607380525380966996    # double -3.912023e+00
                                        #  (0xc00f4bd2b79d65ac)
.LCPI21_30:
	.quad	-4607737672157970539    # double -3.753418e+00
                                        #  (0xc00e070000d6bf95)
.LCPI21_31:
	.quad	-4607882999987533861    # double -3.688879e+00
                                        #  (0xc00d82d33b2e87db)
.LCPI21_32:
	.quad	-4608271338114592220    # double -3.516423e+00
                                        #  (0xc00c21a23710d224)
.LCPI21_33:
	.quad	-4608715606382372499    # double -3.319128e+00
                                        #  (0xc00a8d92f2c7996d)
.LCPI21_34:
	.quad	-4609534150863835425    # double -2.955621e+00
                                        #  (0xc007a51cb5baaedf)
.LCPI21_35:
	.quad	-4609659894562987344    # double -2.899780e+00
                                        #  (0xc00732bfb93562b0)
.LCPI21_36:
	.quad	4676476128479850864     # double 4.542609e+04
                                        #  (0x40e62e4306a2b170)
.LCPI21_37:
	.quad	4671972528852480368     # double 2.271305e+04
                                        #  (0x40d62e4306a2b170)
.LCPI21_38:
	.quad	4667468929225109872     # double 1.135652e+04
                                        #  (0x40c62e4306a2b170)
.LCPI21_39:
	.quad	4665046434562188702     # double 7.571016e+03
                                        #  (0x40bd930408c8259e)
.LCPI21_40:
	.quad	4662965329596639865     # double 5.678262e+03
                                        #  (0x40b62e430691ea79)
.LCPI21_41:
	.quad	4660542834935917718     # double 3.785508e+03
                                        #  (0x40ad930408d8ec96)
.LCPI21_42:
	.quad	4658461738806044321     # double 2.839135e+03
                                        #  (0x40a62e45154866a1)
.LCPI21_43:
	.quad	4656039243163458291     # double 1.892756e+03
                                        #  (0x409d9305dd095af3)
.LCPI21_44:
	.quad	4653958146197956057     # double 1.419569e+03
                                        #  (0x40962e46b7aa25d9)
.LCPI21_45:
	.quad	4651535653700852891     # double 9.463790e+02
                                        #  (0x408d93083ae75c9b)
.LCPI21_46:
	.quad	4649454528754978754     # double 7.097825e+02
                                        #  (0x40862e4291c58fc2)
.LCPI21_47:
	.quad	4647032041357850322     # double 4.731888e+02
                                        #  (0x407d930544fe36d2)
.LCPI21_48:
	.quad	4644950923883377598     # double 3.548910e+02
                                        #  (0x40762e415930f3be)
.LCPI21_49:
	.quad	4643877842374164291     # double 2.938933e+02
                                        #  (0x40725e4b1704ff43)
.LCPI21_50:
	.quad	4642528429150307586     # double 2.365940e+02
                                        #  (0x406d930257280502)
.LCPI21_51:
	.quad	4641789717939026950     # double 2.155986e+02
                                        #  (0x406af327bbd0fc06)
.LCPI21_52:
	.quad	4640447331331584329     # double 1.774457e+02
                                        #  (0x40662e42feedb149)
.LCPI21_53:
	.quad	4639623560634141547     # double 1.540327e+02
                                        #  (0x4063410bef218b6b)
.LCPI21_54:
	.quad	4638024833481178950     # double 1.182971e+02
                                        #  (0x405d93034315ff46)
.LCPI21_55:
	.quad	4637829733041721633     # double 1.155245e+02
                                        #  (0x405ce191e6b25121)
.LCPI21_56:
	.quad	4635943731704917520     # double 8.872284e+01
                                        #  (0x40562e42fef86e10)
.LCPI21_57:
	.quad	4635119961006771051     # double 7.701635e+01
                                        #  (0x4053410bef218b6b)
.LCPI21_58:
	.quad	4633521237000698693     # double 5.914856e+01
                                        #  (0x404d9303fea7bb45)
.LCPI21_59:
	.quad	4632726539473609137     # double 5.350189e+01
                                        #  (0x404ac03e0ed961b1)
.LCPI21_60:
	.quad	4631440132078250712     # double 4.436142e+01
                                        #  (0x40462e42ff032ad8)
.LCPI21_61:
	.quad	4630304997654369530     # double 3.629580e+01
                                        #  (0x404225dceae794fa)
.LCPI21_62:
	.quad	4629017637371920823     # double 2.957428e+01
                                        #  (0x403d9303fe9241b7)
.LCPI21_63:
	.quad	4628172157943639354     # double 2.657053e+01
                                        #  (0x403a920e79956d3a)
.LCPI21_64:
	.quad	4626936532450880216     # double 2.218071e+01
                                        #  (0x40362e42ff032ad8)
.LCPI21_65:
	.quad	4625570807343632568     # double 1.732868e+01
                                        #  (0x40315424572250b8)
.LCPI21_66:
	.quad	4624514037744550327     # double 1.478714e+01
                                        #  (0x402d9303fe9241b7)
.LCPI21_67:
	.quad	4623993761514290175     # double 1.386294e+01
                                        #  (0x402bb9d3beae7bff)
.LCPI21_68:
	.quad	4622889478739291941     # double 1.190134e+01
                                        #  (0x4027cd7ce0256f25)
.LCPI21_69:
	.quad	4621772669246966173     # double 9.917491e+00
                                        #  (0x4023d5c16713099d)
.LCPI21_70:
	.quad	4618753638040482535     # double 6.277307e+00
                                        #  (0x40191bf66c7232e7)
.LCPI21_71:
	.quad	4618409832470309936     # double 5.971947e+00
                                        #  (0x4017e345f3906c30)
.LCPI21_72:
	.quad	-4602109725539218330    # double -9.010913e+00
                                        #  (0xc02205966fdd4c66)
.LCPI21_73:
	.quad	-4602337982102880898    # double -8.605448e+00
                                        #  (0xc02135fd50783d7e)
.LCPI21_74:
	.quad	-4602499932712476394    # double -8.317766e+00
                                        #  (0xc020a2b23fe9e116)
.LCPI21_75:
	.quad	-4602777559379631011    # double -7.912301e+00
                                        #  (0xc01fa6324109a45d)
.LCPI21_76:
	.quad	-4603101457739036240    # double -7.624622e+00
                                        #  (0xc01e7f9cca61c9b0)
.LCPI21_77:
	.quad	-4603557971818872696    # double -7.219156e+00
                                        #  (0xc01ce06a52d18088)
.LCPI21_78:
	.quad	-4603881872084426468    # double -6.931474e+00
                                        #  (0xc01bb9d46a8c211c)
.LCPI21_79:
	.quad	-4604338385212877502    # double -6.526009e+00
                                        #  (0xc01a1aa22bb0d542)
.LCPI21_80:
	.quad	-4604662292195550118    # double -6.238322e+00
                                        #  (0xc018f40ab30c5c5a)
.LCPI21_81:
	.quad	-4604940229052069720    # double -5.991465e+00
                                        #  (0xc017f7427b7208a8)
.LCPI21_82:
	.quad	-4605118803400964112    # double -5.832859e+00
                                        #  (0xc01754d8e6d047f0)
.LCPI21_83:
	.quad	-4605319063112363149    # double -5.654992e+00
                                        #  (0xc0169eb64dda5373)
.LCPI21_84:
	.quad	-4605899217747480239    # double -5.139711e+00
                                        #  (0xc0148f1086e97151)
.LCPI21_85:
	.quad	-4605925919221501649    # double -5.115996e+00
                                        #  (0xc01476c79b09b12f)
.LCPI21_86:
	.quad	-4606382432348826784    # double -4.710531e+00
                                        #  (0xc012d7955c3f9360)
.LCPI21_87:
	.quad	-4606706333568017777    # double -4.422849e+00
                                        #  (0xc011b0ff3b22da8f)
.LCPI21_88:
	.quad	-4607162846695342911    # double -4.017384e+00
                                        #  (0xc01011ccfc58bcc1)
.LCPI21_89:
	.quad	-4608097619433100168    # double -3.593569e+00
                                        #  (0xc00cbfa13f5dec78)
.LCPI21_90:
	.quad	-4608385474594100725    # double -3.465736e+00
                                        #  (0xc00bb9d3bebfaa0b)
.LCPI21_91:
	.quad	-4608941354071747451    # double -3.218876e+00
                                        #  (0xc009c041f7f21485)
.LCPI21_92:
	.quad	-4609298500848750994    # double -3.060271e+00
                                        #  (0xc0087b6f412b6e6e)
.LCPI21_93:
	.quad	-4609443828678314316    # double -2.995732e+00
                                        #  (0xc007f7427b8336b4)
.LCPI21_94:
	.quad	-4609946303287132980    # double -2.772589e+00
                                        #  (0xc0062e42fef1fccc)
.LCPI21_95:
	.quad	-4610502182764779706    # double -2.525729e+00
                                        #  (0xc00434b138246746)
.LCPI21_96:
	.quad	-4610859329541783249    # double -2.367124e+00
                                        #  (0xc002efde815dc12f)
.LCPI21_97:
	.quad	-4611004657371346571    # double -2.302585e+00
                                        #  (0xc0026bb1bbb58975)
.LCPI21_98:
	.quad	4535124824577622031     # double 1.525879e-05
                                        #  (0x3eeffffff501400f)
.LCPI21_99:
	.quad	4539628424204992527     # double 3.051758e-05
                                        #  (0x3efffffff501400f)
.LCPI21_100:
	.quad	4544132023832363023     # double 6.103515e-05
                                        #  (0x3f0ffffff501400f)
.LCPI21_101:
	.quad	4546383823692165131     # double 9.155273e-05
                                        #  (0x3f17fffff7c0f00b)
.LCPI21_102:
	.quad	4548635623459733519     # double 1.220703e-04
                                        #  (0x3f1ffffff501400f)
.LCPI21_103:
	.quad	4550887423319535627     # double 1.831055e-04
                                        #  (0x3f27fffff7c0f00b)
.LCPI21_104:
	.quad	4553139223087104015     # double 2.441406e-04
                                        #  (0x3f2ffffff501400f)
.LCPI21_105:
	.quad	4555391022946906123     # double 3.662109e-04
                                        #  (0x3f37fffff7c0f00b)
.LCPI21_106:
	.quad	4557642799840511860     # double 4.882800e-04
                                        #  (0x3f3ffffaa19c4774)
.LCPI21_107:
	.quad	4559894611137295294     # double 7.324206e-04
                                        #  (0x3f47fffd4e0e73be)
.LCPI21_108:
	.quad	4562146399467882356     # double 9.765600e-04
                                        #  (0x3f4ffffaa19c4774)
.LCPI21_109:
	.quad	4564398205046175127     # double 1.464840e-03
                                        #  (0x3f57fffbf9353597)
.LCPI21_110:
	.quad	4566650033682897990     # double 1.953130e-03
                                        #  (0x3f600002af31dc46)
.LCPI21_111:
	.quad	4567911030049346683     # double 2.500000e-03
                                        #  (0x3f647ae147ae147b)
.LCPI21_112:
	.quad	4568901827731975715     # double 2.929690e-03
                                        #  (0x3f6800015798ee23)
.LCPI21_113:
	.quad	4570216873058560377     # double 3.500000e-03
                                        #  (0x3f6cac083126e979)
.LCPI21_114:
	.quad	4571153621781053440     # double 3.906250e-03
                                        #  (0x3f70000000000000)
.LCPI21_115:
	.quad	4571838168924413755     # double 4.500000e-03
                                        #  (0x3f726e978d4fdf3b)
.LCPI21_116:
	.quad	4573405427359346211     # double 5.859380e-03
                                        #  (0x3f7800015798ee23)
.LCPI21_117:
	.quad	4573567551181324026     # double 6.000000e-03
                                        #  (0x3f789374bc6a7efa)
.LCPI21_118:
	.quad	4575657221408423936     # double 7.812500e-03
                                        #  (0x3f80000000000000)
.LCPI21_119:
	.quad	4576341768551784251     # double 9.000000e-03
                                        #  (0x3f826e978d4fdf3b)
.LCPI21_120:
	.quad	4577909021222109184     # double 1.171875e-02
                                        #  (0x3f88000000000000)
.LCPI21_121:
	.quad	4578071150808694522     # double 1.200000e-02
                                        #  (0x3f889374bc6a7efa)
.LCPI21_122:
	.quad	4580160821035794432     # double 1.562500e-02
                                        #  (0x3f90000000000000)
.LCPI21_123:
	.quad	4580845368179154747     # double 1.800000e-02
                                        #  (0x3f926e978d4fdf3b)
.LCPI21_124:
	.quad	4582412620849479680     # double 2.343750e-02
                                        #  (0x3f98000000000000)
.LCPI21_125:
	.quad	4583583556752596009     # double 2.750000e-02
                                        #  (0x3f9c28f5c28f5c29)
.LCPI21_126:
	.quad	4584664420663164928     # double 3.125000e-02
                                        #  (0x3fa0000000000000)
.LCPI21_127:
	.quad	4585925428558828667     # double 4.000000e-02
                                        #  (0x3fa47ae147ae147b)
.LCPI21_128:
	.quad	4586916220476850176     # double 4.687500e-02
                                        #  (0x3fa8000000000000)
.LCPI21_129:
	.quad	4587366580439587226     # double 5.000000e-02
                                        #  (0x3fa999999999999a)
.LCPI21_130:
	.quad	4589168020290535424     # double 6.250000e-02
                                        #  (0x3fb0000000000000)
.LCPI21_131:
	.quad	4590429028186199163     # double 8.000000e-02
                                        #  (0x3fb47ae147ae147b)
.LCPI21_132:
	.quad	4591419820104220672     # double 9.375000e-02
                                        #  (0x3fb8000000000000)
.LCPI21_133:
	.quad	4591870180066957722     # double 1.000000e-01
                                        #  (0x3fb999999999999a)
.LCPI21_134:
	.quad	4607182418800017408     # double 1.000000e+00
                                        #  (0x3ff0000000000000)
	.text
	.globl	_ZN7WBSlave6getLogEv
	.align	16, 0x90
	.type	_ZN7WBSlave6getLogEv,@function
_ZN7WBSlave6getLogEv:                   # @_ZN7WBSlave6getLogEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin21:
	.cfi_lsda 3, .Lexception21
# BB#0:
	pushq	%rbp
.Ltmp963:
	.cfi_def_cfa_offset 16
.Ltmp964:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp965:
	.cfi_def_cfa_register %rbp
	subq	$624, %rsp              # imm = 0x270
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpb	$0, _ZGVZN7WBSlave6getLogEvE9offsetLUT
	movq	%rdi, -344(%rbp)        # 8-byte Spill
	jne	.LBB21_39
# BB#1:
	leaq	_ZGVZN7WBSlave6getLogEvE9offsetLUT, %rdi
	callq	__cxa_guard_acquire
	cmpl	$0, %eax
	je	.LBB21_39
# BB#2:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT, -16(%rbp)
.Ltmp527:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT, %edi
	movsd	.LCPI21_0(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp528:
	jmp	.LBB21_3
.LBB21_3:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+40, -16(%rbp)
.Ltmp529:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+40, %edi
	movsd	.LCPI21_1(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp530:
	jmp	.LBB21_4
.LBB21_4:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+80, -16(%rbp)
.Ltmp531:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+80, %edi
	movsd	.LCPI21_2(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp532:
	jmp	.LBB21_5
.LBB21_5:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+120, -16(%rbp)
.Ltmp533:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+120, %edi
	movsd	.LCPI21_3(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp534:
	jmp	.LBB21_6
.LBB21_6:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+160, -16(%rbp)
.Ltmp535:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+160, %edi
	movsd	.LCPI21_4(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp536:
	jmp	.LBB21_7
.LBB21_7:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+200, -16(%rbp)
.Ltmp537:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+200, %edi
	movsd	.LCPI21_5(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp538:
	jmp	.LBB21_8
.LBB21_8:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+240, -16(%rbp)
.Ltmp539:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+240, %edi
	movsd	.LCPI21_6(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp540:
	jmp	.LBB21_9
.LBB21_9:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+280, -16(%rbp)
.Ltmp541:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+280, %edi
	movsd	.LCPI21_7(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp542:
	jmp	.LBB21_10
.LBB21_10:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+320, -16(%rbp)
.Ltmp543:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+320, %edi
	movsd	.LCPI21_8(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp544:
	jmp	.LBB21_11
.LBB21_11:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+360, -16(%rbp)
.Ltmp545:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+360, %edi
	movsd	.LCPI21_9(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp546:
	jmp	.LBB21_12
.LBB21_12:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+400, -16(%rbp)
.Ltmp547:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+400, %edi
	movsd	.LCPI21_10(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp548:
	jmp	.LBB21_13
.LBB21_13:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+440, -16(%rbp)
.Ltmp549:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+440, %edi
	movsd	.LCPI21_11(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp550:
	jmp	.LBB21_14
.LBB21_14:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+480, -16(%rbp)
.Ltmp551:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+480, %edi
	movsd	.LCPI21_12(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp552:
	jmp	.LBB21_15
.LBB21_15:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+520, -16(%rbp)
.Ltmp553:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+520, %edi
	movsd	.LCPI21_13(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp554:
	jmp	.LBB21_16
.LBB21_16:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+560, -16(%rbp)
.Ltmp555:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+560, %edi
	movsd	.LCPI21_14(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp556:
	jmp	.LBB21_17
.LBB21_17:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+600, -16(%rbp)
.Ltmp557:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+600, %edi
	movsd	.LCPI21_15(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp558:
	jmp	.LBB21_18
.LBB21_18:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+640, -16(%rbp)
.Ltmp559:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+640, %edi
	movsd	.LCPI21_16(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp560:
	jmp	.LBB21_19
.LBB21_19:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+680, -16(%rbp)
.Ltmp561:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+680, %edi
	movsd	.LCPI21_17(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp562:
	jmp	.LBB21_20
.LBB21_20:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+720, -16(%rbp)
.Ltmp563:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+720, %edi
	movsd	.LCPI21_18(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp564:
	jmp	.LBB21_21
.LBB21_21:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+760, -16(%rbp)
.Ltmp565:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+760, %edi
	movsd	.LCPI21_19(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp566:
	jmp	.LBB21_22
.LBB21_22:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+800, -16(%rbp)
.Ltmp567:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+800, %edi
	movsd	.LCPI21_20(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp568:
	jmp	.LBB21_23
.LBB21_23:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+840, -16(%rbp)
.Ltmp569:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+840, %edi
	movsd	.LCPI21_21(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp570:
	jmp	.LBB21_24
.LBB21_24:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+880, -16(%rbp)
.Ltmp571:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+880, %edi
	movsd	.LCPI21_22(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp572:
	jmp	.LBB21_25
.LBB21_25:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+920, -16(%rbp)
.Ltmp573:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+920, %edi
	movsd	.LCPI21_23(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp574:
	jmp	.LBB21_26
.LBB21_26:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+960, -16(%rbp)
.Ltmp575:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+960, %edi
	movsd	.LCPI21_24(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp576:
	jmp	.LBB21_27
.LBB21_27:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1000, -16(%rbp)
.Ltmp577:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1000, %edi
	movsd	.LCPI21_25(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp578:
	jmp	.LBB21_28
.LBB21_28:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1040, -16(%rbp)
.Ltmp579:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1040, %edi
	movsd	.LCPI21_26(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp580:
	jmp	.LBB21_29
.LBB21_29:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1080, -16(%rbp)
.Ltmp581:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1080, %edi
	movsd	.LCPI21_27(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp582:
	jmp	.LBB21_30
.LBB21_30:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1120, -16(%rbp)
.Ltmp583:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1120, %edi
	movsd	.LCPI21_28(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp584:
	jmp	.LBB21_31
.LBB21_31:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1160, -16(%rbp)
.Ltmp585:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1160, %edi
	movsd	.LCPI21_29(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp586:
	jmp	.LBB21_32
.LBB21_32:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1200, -16(%rbp)
.Ltmp587:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1200, %edi
	movsd	.LCPI21_30(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp588:
	jmp	.LBB21_33
.LBB21_33:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1240, -16(%rbp)
.Ltmp589:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1240, %edi
	movsd	.LCPI21_31(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp590:
	jmp	.LBB21_34
.LBB21_34:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1280, -16(%rbp)
.Ltmp591:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1280, %edi
	movsd	.LCPI21_32(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp592:
	jmp	.LBB21_35
.LBB21_35:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1320, -16(%rbp)
.Ltmp593:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1320, %edi
	movsd	.LCPI21_33(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp594:
	jmp	.LBB21_36
.LBB21_36:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1360, -16(%rbp)
.Ltmp595:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1360, %edi
	movsd	.LCPI21_34(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp596:
	jmp	.LBB21_37
.LBB21_37:
	movq	$_ZZN7WBSlave6getLogEvE9offsetLUT+1400, -16(%rbp)
.Ltmp597:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE9offsetLUT+1400, %edi
	movsd	.LCPI21_35(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp598:
	jmp	.LBB21_38
.LBB21_38:
	leaq	__cxx_global_array_dtor, %rdi
	movabsq	$0, %rsi
	leaq	__dso_handle, %rdx
	callq	__cxa_atexit
	leaq	_ZGVZN7WBSlave6getLogEvE9offsetLUT, %rdi
	movl	%eax, -348(%rbp)        # 4-byte Spill
	callq	__cxa_guard_release
.LBB21_39:
	cmpb	$0, _ZGVZN7WBSlave6getLogEvE11gradientLUT
	jne	.LBB21_78
# BB#40:
	leaq	_ZGVZN7WBSlave6getLogEvE11gradientLUT, %rdi
	callq	__cxa_guard_acquire
	cmpl	$0, %eax
	je	.LBB21_78
# BB#41:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT, -40(%rbp)
.Ltmp602:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT, %edi
	movsd	.LCPI21_36(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp603:
	jmp	.LBB21_42
.LBB21_42:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+40, -40(%rbp)
.Ltmp604:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+40, %edi
	movsd	.LCPI21_37(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp605:
	jmp	.LBB21_43
.LBB21_43:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+80, -40(%rbp)
.Ltmp606:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+80, %edi
	movsd	.LCPI21_38(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp607:
	jmp	.LBB21_44
.LBB21_44:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+120, -40(%rbp)
.Ltmp608:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+120, %edi
	movsd	.LCPI21_39(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp609:
	jmp	.LBB21_45
.LBB21_45:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+160, -40(%rbp)
.Ltmp610:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+160, %edi
	movsd	.LCPI21_40(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp611:
	jmp	.LBB21_46
.LBB21_46:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+200, -40(%rbp)
.Ltmp612:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+200, %edi
	movsd	.LCPI21_41(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp613:
	jmp	.LBB21_47
.LBB21_47:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+240, -40(%rbp)
.Ltmp614:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+240, %edi
	movsd	.LCPI21_42(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp615:
	jmp	.LBB21_48
.LBB21_48:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+280, -40(%rbp)
.Ltmp616:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+280, %edi
	movsd	.LCPI21_43(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp617:
	jmp	.LBB21_49
.LBB21_49:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+320, -40(%rbp)
.Ltmp618:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+320, %edi
	movsd	.LCPI21_44(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp619:
	jmp	.LBB21_50
.LBB21_50:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+360, -40(%rbp)
.Ltmp620:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+360, %edi
	movsd	.LCPI21_45(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp621:
	jmp	.LBB21_51
.LBB21_51:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+400, -40(%rbp)
.Ltmp622:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+400, %edi
	movsd	.LCPI21_46(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp623:
	jmp	.LBB21_52
.LBB21_52:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+440, -40(%rbp)
.Ltmp624:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+440, %edi
	movsd	.LCPI21_47(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp625:
	jmp	.LBB21_53
.LBB21_53:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+480, -40(%rbp)
.Ltmp626:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+480, %edi
	movsd	.LCPI21_48(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp627:
	jmp	.LBB21_54
.LBB21_54:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+520, -40(%rbp)
.Ltmp628:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+520, %edi
	movsd	.LCPI21_49(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp629:
	jmp	.LBB21_55
.LBB21_55:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+560, -40(%rbp)
.Ltmp630:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+560, %edi
	movsd	.LCPI21_50(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp631:
	jmp	.LBB21_56
.LBB21_56:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+600, -40(%rbp)
.Ltmp632:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+600, %edi
	movsd	.LCPI21_51(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp633:
	jmp	.LBB21_57
.LBB21_57:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+640, -40(%rbp)
.Ltmp634:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+640, %edi
	movsd	.LCPI21_52(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp635:
	jmp	.LBB21_58
.LBB21_58:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+680, -40(%rbp)
.Ltmp636:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+680, %edi
	movsd	.LCPI21_53(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp637:
	jmp	.LBB21_59
.LBB21_59:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+720, -40(%rbp)
.Ltmp638:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+720, %edi
	movsd	.LCPI21_54(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp639:
	jmp	.LBB21_60
.LBB21_60:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+760, -40(%rbp)
.Ltmp640:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+760, %edi
	movsd	.LCPI21_55(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp641:
	jmp	.LBB21_61
.LBB21_61:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+800, -40(%rbp)
.Ltmp642:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+800, %edi
	movsd	.LCPI21_56(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp643:
	jmp	.LBB21_62
.LBB21_62:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+840, -40(%rbp)
.Ltmp644:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+840, %edi
	movsd	.LCPI21_57(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp645:
	jmp	.LBB21_63
.LBB21_63:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+880, -40(%rbp)
.Ltmp646:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+880, %edi
	movsd	.LCPI21_58(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp647:
	jmp	.LBB21_64
.LBB21_64:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+920, -40(%rbp)
.Ltmp648:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+920, %edi
	movsd	.LCPI21_59(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp649:
	jmp	.LBB21_65
.LBB21_65:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+960, -40(%rbp)
.Ltmp650:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+960, %edi
	movsd	.LCPI21_60(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp651:
	jmp	.LBB21_66
.LBB21_66:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1000, -40(%rbp)
.Ltmp652:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1000, %edi
	movsd	.LCPI21_61(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp653:
	jmp	.LBB21_67
.LBB21_67:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1040, -40(%rbp)
.Ltmp654:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1040, %edi
	movsd	.LCPI21_62(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp655:
	jmp	.LBB21_68
.LBB21_68:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1080, -40(%rbp)
.Ltmp656:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1080, %edi
	movsd	.LCPI21_63(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp657:
	jmp	.LBB21_69
.LBB21_69:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1120, -40(%rbp)
.Ltmp658:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1120, %edi
	movsd	.LCPI21_64(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp659:
	jmp	.LBB21_70
.LBB21_70:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1160, -40(%rbp)
.Ltmp660:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1160, %edi
	movsd	.LCPI21_65(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp661:
	jmp	.LBB21_71
.LBB21_71:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1200, -40(%rbp)
.Ltmp662:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1200, %edi
	movsd	.LCPI21_66(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp663:
	jmp	.LBB21_72
.LBB21_72:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1240, -40(%rbp)
.Ltmp664:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1240, %edi
	movsd	.LCPI21_67(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp665:
	jmp	.LBB21_73
.LBB21_73:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1280, -40(%rbp)
.Ltmp666:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1280, %edi
	movsd	.LCPI21_68(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp667:
	jmp	.LBB21_74
.LBB21_74:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1320, -40(%rbp)
.Ltmp668:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1320, %edi
	movsd	.LCPI21_69(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp669:
	jmp	.LBB21_75
.LBB21_75:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1360, -40(%rbp)
.Ltmp670:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1360, %edi
	movsd	.LCPI21_70(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp671:
	jmp	.LBB21_76
.LBB21_76:
	movq	$_ZZN7WBSlave6getLogEvE11gradientLUT+1400, -40(%rbp)
.Ltmp672:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE11gradientLUT+1400, %edi
	movsd	.LCPI21_71(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp673:
	jmp	.LBB21_77
.LBB21_77:
	leaq	__cxx_global_array_dtor12, %rdi
	movabsq	$0, %rsi
	leaq	__dso_handle, %rdx
	callq	__cxa_atexit
	leaq	_ZGVZN7WBSlave6getLogEvE11gradientLUT, %rdi
	movl	%eax, -352(%rbp)        # 4-byte Spill
	callq	__cxa_guard_release
.LBB21_78:
	cmpb	$0, _ZGVZN7WBSlave6getLogEvE6logLUT
	jne	.LBB21_117
# BB#79:
	leaq	_ZGVZN7WBSlave6getLogEvE6logLUT, %rdi
	callq	__cxa_guard_acquire
	cmpl	$0, %eax
	je	.LBB21_117
# BB#80:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT, -48(%rbp)
.Ltmp677:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT, %edi
	movsd	.LCPI21_1(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp678:
	jmp	.LBB21_81
.LBB21_81:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+40, -48(%rbp)
.Ltmp679:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+40, %edi
	movsd	.LCPI21_2(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp680:
	jmp	.LBB21_82
.LBB21_82:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+80, -48(%rbp)
.Ltmp681:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+80, %edi
	movsd	.LCPI21_4(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp682:
	jmp	.LBB21_83
.LBB21_83:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+120, -48(%rbp)
.Ltmp683:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+120, %edi
	movsd	.LCPI21_5(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp684:
	jmp	.LBB21_84
.LBB21_84:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+160, -48(%rbp)
.Ltmp685:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+160, %edi
	movsd	.LCPI21_72(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp686:
	jmp	.LBB21_85
.LBB21_85:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+200, -48(%rbp)
.Ltmp687:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+200, %edi
	movsd	.LCPI21_73(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp688:
	jmp	.LBB21_86
.LBB21_86:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+240, -48(%rbp)
.Ltmp689:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+240, %edi
	movsd	.LCPI21_74(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp690:
	jmp	.LBB21_87
.LBB21_87:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+280, -48(%rbp)
.Ltmp691:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+280, %edi
	movsd	.LCPI21_75(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp692:
	jmp	.LBB21_88
.LBB21_88:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+320, -48(%rbp)
.Ltmp693:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+320, %edi
	movsd	.LCPI21_76(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp694:
	jmp	.LBB21_89
.LBB21_89:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+360, -48(%rbp)
.Ltmp695:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+360, %edi
	movsd	.LCPI21_77(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp696:
	jmp	.LBB21_90
.LBB21_90:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+400, -48(%rbp)
.Ltmp697:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+400, %edi
	movsd	.LCPI21_78(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp698:
	jmp	.LBB21_91
.LBB21_91:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+440, -48(%rbp)
.Ltmp699:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+440, %edi
	movsd	.LCPI21_79(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp700:
	jmp	.LBB21_92
.LBB21_92:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+480, -48(%rbp)
.Ltmp701:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+480, %edi
	movsd	.LCPI21_80(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp702:
	jmp	.LBB21_93
.LBB21_93:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+520, -48(%rbp)
.Ltmp703:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+520, %edi
	movsd	.LCPI21_81(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp704:
	jmp	.LBB21_94
.LBB21_94:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+560, -48(%rbp)
.Ltmp705:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+560, %edi
	movsd	.LCPI21_82(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp706:
	jmp	.LBB21_95
.LBB21_95:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+600, -48(%rbp)
.Ltmp707:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+600, %edi
	movsd	.LCPI21_83(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp708:
	jmp	.LBB21_96
.LBB21_96:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+640, -48(%rbp)
.Ltmp709:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+640, %edi
	movsd	.LCPI21_20(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp710:
	jmp	.LBB21_97
.LBB21_97:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+680, -48(%rbp)
.Ltmp711:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+680, %edi
	movsd	.LCPI21_21(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp712:
	jmp	.LBB21_98
.LBB21_98:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+720, -48(%rbp)
.Ltmp713:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+720, %edi
	movsd	.LCPI21_84(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp714:
	jmp	.LBB21_99
.LBB21_99:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+760, -48(%rbp)
.Ltmp715:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+760, %edi
	movsd	.LCPI21_85(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp716:
	jmp	.LBB21_100
.LBB21_100:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+800, -48(%rbp)
.Ltmp717:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+800, %edi
	movsd	.LCPI21_24(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp718:
	jmp	.LBB21_101
.LBB21_101:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+840, -48(%rbp)
.Ltmp719:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+840, %edi
	movsd	.LCPI21_86(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp720:
	jmp	.LBB21_102
.LBB21_102:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+880, -48(%rbp)
.Ltmp721:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+880, %edi
	movsd	.LCPI21_26(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp722:
	jmp	.LBB21_103
.LBB21_103:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+920, -48(%rbp)
.Ltmp723:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+920, %edi
	movsd	.LCPI21_87(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp724:
	jmp	.LBB21_104
.LBB21_104:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+960, -48(%rbp)
.Ltmp725:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+960, %edi
	movsd	.LCPI21_28(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp726:
	jmp	.LBB21_105
.LBB21_105:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1000, -48(%rbp)
.Ltmp727:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1000, %edi
	movsd	.LCPI21_88(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp728:
	jmp	.LBB21_106
.LBB21_106:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1040, -48(%rbp)
.Ltmp729:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1040, %edi
	movsd	.LCPI21_30(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp730:
	jmp	.LBB21_107
.LBB21_107:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1080, -48(%rbp)
.Ltmp731:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1080, %edi
	movsd	.LCPI21_89(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp732:
	jmp	.LBB21_108
.LBB21_108:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1120, -48(%rbp)
.Ltmp733:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1120, %edi
	movsd	.LCPI21_90(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp734:
	jmp	.LBB21_109
.LBB21_109:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1160, -48(%rbp)
.Ltmp735:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1160, %edi
	movsd	.LCPI21_91(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp736:
	jmp	.LBB21_110
.LBB21_110:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1200, -48(%rbp)
.Ltmp737:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1200, %edi
	movsd	.LCPI21_92(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp738:
	jmp	.LBB21_111
.LBB21_111:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1240, -48(%rbp)
.Ltmp739:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1240, %edi
	movsd	.LCPI21_93(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp740:
	jmp	.LBB21_112
.LBB21_112:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1280, -48(%rbp)
.Ltmp741:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1280, %edi
	movsd	.LCPI21_94(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp742:
	jmp	.LBB21_113
.LBB21_113:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1320, -48(%rbp)
.Ltmp743:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1320, %edi
	movsd	.LCPI21_95(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp744:
	jmp	.LBB21_114
.LBB21_114:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1360, -48(%rbp)
.Ltmp745:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1360, %edi
	movsd	.LCPI21_96(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp746:
	jmp	.LBB21_115
.LBB21_115:
	movq	$_ZZN7WBSlave6getLogEvE6logLUT+1400, -48(%rbp)
.Ltmp747:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE6logLUT+1400, %edi
	movsd	.LCPI21_97(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp748:
	jmp	.LBB21_116
.LBB21_116:
	leaq	__cxx_global_array_dtor13, %rdi
	movabsq	$0, %rsi
	leaq	__dso_handle, %rdx
	callq	__cxa_atexit
	leaq	_ZGVZN7WBSlave6getLogEvE6logLUT, %rdi
	movl	%eax, -356(%rbp)        # 4-byte Spill
	callq	__cxa_guard_release
.LBB21_117:
	cmpb	$0, _ZGVZN7WBSlave6getLogEvE8inputLUT
	jne	.LBB21_156
# BB#118:
	leaq	_ZGVZN7WBSlave6getLogEvE8inputLUT, %rdi
	callq	__cxa_guard_acquire
	cmpl	$0, %eax
	je	.LBB21_156
# BB#119:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT, -56(%rbp)
.Ltmp752:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT, %edi
	movsd	.LCPI21_98(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp753:
	jmp	.LBB21_120
.LBB21_120:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+40, -56(%rbp)
.Ltmp754:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+40, %edi
	movsd	.LCPI21_99(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp755:
	jmp	.LBB21_121
.LBB21_121:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+80, -56(%rbp)
.Ltmp756:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+80, %edi
	movsd	.LCPI21_100(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp757:
	jmp	.LBB21_122
.LBB21_122:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+120, -56(%rbp)
.Ltmp758:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+120, %edi
	movsd	.LCPI21_101(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp759:
	jmp	.LBB21_123
.LBB21_123:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+160, -56(%rbp)
.Ltmp760:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+160, %edi
	movsd	.LCPI21_102(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp761:
	jmp	.LBB21_124
.LBB21_124:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+200, -56(%rbp)
.Ltmp762:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+200, %edi
	movsd	.LCPI21_103(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp763:
	jmp	.LBB21_125
.LBB21_125:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+240, -56(%rbp)
.Ltmp764:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+240, %edi
	movsd	.LCPI21_104(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp765:
	jmp	.LBB21_126
.LBB21_126:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+280, -56(%rbp)
.Ltmp766:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+280, %edi
	movsd	.LCPI21_105(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp767:
	jmp	.LBB21_127
.LBB21_127:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+320, -56(%rbp)
.Ltmp768:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+320, %edi
	movsd	.LCPI21_106(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp769:
	jmp	.LBB21_128
.LBB21_128:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+360, -56(%rbp)
.Ltmp770:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+360, %edi
	movsd	.LCPI21_107(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp771:
	jmp	.LBB21_129
.LBB21_129:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+400, -56(%rbp)
.Ltmp772:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+400, %edi
	movsd	.LCPI21_108(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp773:
	jmp	.LBB21_130
.LBB21_130:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+440, -56(%rbp)
.Ltmp774:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+440, %edi
	movsd	.LCPI21_109(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp775:
	jmp	.LBB21_131
.LBB21_131:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+480, -56(%rbp)
.Ltmp776:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+480, %edi
	movsd	.LCPI21_110(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp777:
	jmp	.LBB21_132
.LBB21_132:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+520, -56(%rbp)
.Ltmp778:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+520, %edi
	movsd	.LCPI21_111(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp779:
	jmp	.LBB21_133
.LBB21_133:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+560, -56(%rbp)
.Ltmp780:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+560, %edi
	movsd	.LCPI21_112(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp781:
	jmp	.LBB21_134
.LBB21_134:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+600, -56(%rbp)
.Ltmp782:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+600, %edi
	movsd	.LCPI21_113(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp783:
	jmp	.LBB21_135
.LBB21_135:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+640, -56(%rbp)
.Ltmp784:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+640, %edi
	movsd	.LCPI21_114(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp785:
	jmp	.LBB21_136
.LBB21_136:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+680, -56(%rbp)
.Ltmp786:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+680, %edi
	movsd	.LCPI21_115(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp787:
	jmp	.LBB21_137
.LBB21_137:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+720, -56(%rbp)
.Ltmp788:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+720, %edi
	movsd	.LCPI21_116(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp789:
	jmp	.LBB21_138
.LBB21_138:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+760, -56(%rbp)
.Ltmp790:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+760, %edi
	movsd	.LCPI21_117(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp791:
	jmp	.LBB21_139
.LBB21_139:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+800, -56(%rbp)
.Ltmp792:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+800, %edi
	movsd	.LCPI21_118(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp793:
	jmp	.LBB21_140
.LBB21_140:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+840, -56(%rbp)
.Ltmp794:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+840, %edi
	movsd	.LCPI21_119(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp795:
	jmp	.LBB21_141
.LBB21_141:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+880, -56(%rbp)
.Ltmp796:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+880, %edi
	movsd	.LCPI21_120(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp797:
	jmp	.LBB21_142
.LBB21_142:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+920, -56(%rbp)
.Ltmp798:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+920, %edi
	movsd	.LCPI21_121(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp799:
	jmp	.LBB21_143
.LBB21_143:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+960, -56(%rbp)
.Ltmp800:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+960, %edi
	movsd	.LCPI21_122(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp801:
	jmp	.LBB21_144
.LBB21_144:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1000, -56(%rbp)
.Ltmp802:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1000, %edi
	movsd	.LCPI21_123(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp803:
	jmp	.LBB21_145
.LBB21_145:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1040, -56(%rbp)
.Ltmp804:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1040, %edi
	movsd	.LCPI21_124(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp805:
	jmp	.LBB21_146
.LBB21_146:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1080, -56(%rbp)
.Ltmp806:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1080, %edi
	movsd	.LCPI21_125(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp807:
	jmp	.LBB21_147
.LBB21_147:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1120, -56(%rbp)
.Ltmp808:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1120, %edi
	movsd	.LCPI21_126(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp809:
	jmp	.LBB21_148
.LBB21_148:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1160, -56(%rbp)
.Ltmp810:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1160, %edi
	movsd	.LCPI21_127(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp811:
	jmp	.LBB21_149
.LBB21_149:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1200, -56(%rbp)
.Ltmp812:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1200, %edi
	movsd	.LCPI21_128(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp813:
	jmp	.LBB21_150
.LBB21_150:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1240, -56(%rbp)
.Ltmp814:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1240, %edi
	movsd	.LCPI21_129(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp815:
	jmp	.LBB21_151
.LBB21_151:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1280, -56(%rbp)
.Ltmp816:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1280, %edi
	movsd	.LCPI21_130(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp817:
	jmp	.LBB21_152
.LBB21_152:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1320, -56(%rbp)
.Ltmp818:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1320, %edi
	movsd	.LCPI21_131(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp819:
	jmp	.LBB21_153
.LBB21_153:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1360, -56(%rbp)
.Ltmp820:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1360, %edi
	movsd	.LCPI21_132(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp821:
	jmp	.LBB21_154
.LBB21_154:
	movq	$_ZZN7WBSlave6getLogEvE8inputLUT+1400, -56(%rbp)
.Ltmp822:
	xorl	%esi, %esi
	movl	$_ZZN7WBSlave6getLogEvE8inputLUT+1400, %edi
	movsd	.LCPI21_133(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp823:
	jmp	.LBB21_155
.LBB21_155:
	leaq	__cxx_global_array_dtor14, %rdi
	movabsq	$0, %rsi
	leaq	__dso_handle, %rdx
	callq	__cxa_atexit
	leaq	_ZGVZN7WBSlave6getLogEvE8inputLUT, %rdi
	movl	%eax, -360(%rbp)        # 4-byte Spill
	callq	__cxa_guard_release
.LBB21_156:
	leaq	-104(%rbp), %rdi
	xorl	%eax, %eax
	movq	%rax, %rsi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp827:
	leaq	-144(%rbp), %rdi
	movq	-368(%rbp), %rsi        # 8-byte Reload
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp828:
	jmp	.LBB21_157
.LBB21_157:
.Ltmp830:
	leaq	-184(%rbp), %rdi
	xorl	%esi, %esi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
.Ltmp831:
	jmp	.LBB21_158
.LBB21_158:
.Ltmp833:
	leaq	-224(%rbp), %rdi
	xorl	%esi, %esi
	movsd	.LCPI21_134(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
.Ltmp834:
	jmp	.LBB21_159
.LBB21_159:
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp836:
	xorl	%esi, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp837:
	movq	%rax, -376(%rbp)        # 8-byte Spill
	jmp	.LBB21_160
.LBB21_160:
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp838:
	xorl	%esi, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp839:
	movq	%rax, -384(%rbp)        # 8-byte Spill
	jmp	.LBB21_161
.LBB21_161:
	jmp	.LBB21_162
.LBB21_162:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_264 Depth 2
                                        #     Child Loop BB21_192 Depth 2
                                        #     Child Loop BB21_164 Depth 2
                                        #     Child Loop BB21_224 Depth 2
	jmp	.LBB21_163
.LBB21_163:                             #   in Loop: Header=BB21_162 Depth=1
	jmp	.LBB21_164
.LBB21_164:                             #   Parent Loop BB21_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp840:
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp841:
	movq	%rax, -392(%rbp)        # 8-byte Spill
	jmp	.LBB21_165
.LBB21_165:                             #   in Loop: Header=BB21_164 Depth=2
	movq	-392(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB21_188
# BB#166:                               #   in Loop: Header=BB21_164 Depth=2
.Ltmp949:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp950:
	jmp	.LBB21_167
.LBB21_167:                             #   in Loop: Header=BB21_164 Depth=2
	jmp	.LBB21_164
.LBB21_168:
.Ltmp599:
	leaq	_ZZN7WBSlave6getLogEvE9offsetLUT, %rcx
	movl	%edx, %esi
	movq	%rax, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-16(%rbp), %rax
	cmpq	%rax, %rcx
	movq	%rax, -400(%rbp)        # 8-byte Spill
	je	.LBB21_171
.LBB21_169:                             # =>This Inner Loop Header: Depth=1
	movq	-400(%rbp), %rax        # 8-byte Reload
	addq	$-40, %rax
.Ltmp600:
	movq	%rax, %rdi
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp601:
	jmp	.LBB21_170
.LBB21_170:                             #   in Loop: Header=BB21_169 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE9offsetLUT, %rax
	movq	-408(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	jne	.LBB21_169
.LBB21_171:
	leaq	_ZGVZN7WBSlave6getLogEvE9offsetLUT, %rdi
	callq	__cxa_guard_abort
	jmp	.LBB21_278
.LBB21_172:
.Ltmp674:
	leaq	_ZZN7WBSlave6getLogEvE11gradientLUT, %rcx
	movl	%edx, %esi
	movq	%rax, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-40(%rbp), %rax
	cmpq	%rax, %rcx
	movq	%rax, -416(%rbp)        # 8-byte Spill
	je	.LBB21_175
.LBB21_173:                             # =>This Inner Loop Header: Depth=1
	movq	-416(%rbp), %rax        # 8-byte Reload
	addq	$-40, %rax
.Ltmp675:
	movq	%rax, %rdi
	movq	%rax, -424(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp676:
	jmp	.LBB21_174
.LBB21_174:                             #   in Loop: Header=BB21_173 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE11gradientLUT, %rax
	movq	-424(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	jne	.LBB21_173
.LBB21_175:
	leaq	_ZGVZN7WBSlave6getLogEvE11gradientLUT, %rdi
	callq	__cxa_guard_abort
	jmp	.LBB21_278
.LBB21_176:
.Ltmp749:
	leaq	_ZZN7WBSlave6getLogEvE6logLUT, %rcx
	movl	%edx, %esi
	movq	%rax, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-48(%rbp), %rax
	cmpq	%rax, %rcx
	movq	%rax, -432(%rbp)        # 8-byte Spill
	je	.LBB21_179
.LBB21_177:                             # =>This Inner Loop Header: Depth=1
	movq	-432(%rbp), %rax        # 8-byte Reload
	addq	$-40, %rax
.Ltmp750:
	movq	%rax, %rdi
	movq	%rax, -440(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp751:
	jmp	.LBB21_178
.LBB21_178:                             #   in Loop: Header=BB21_177 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE6logLUT, %rax
	movq	-440(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -432(%rbp)        # 8-byte Spill
	jne	.LBB21_177
.LBB21_179:
	leaq	_ZGVZN7WBSlave6getLogEvE6logLUT, %rdi
	callq	__cxa_guard_abort
	jmp	.LBB21_278
.LBB21_180:
.Ltmp824:
	leaq	_ZZN7WBSlave6getLogEvE8inputLUT, %rcx
	movl	%edx, %esi
	movq	%rax, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-56(%rbp), %rax
	cmpq	%rax, %rcx
	movq	%rax, -448(%rbp)        # 8-byte Spill
	je	.LBB21_183
.LBB21_181:                             # =>This Inner Loop Header: Depth=1
	movq	-448(%rbp), %rax        # 8-byte Reload
	addq	$-40, %rax
.Ltmp825:
	movq	%rax, %rdi
	movq	%rax, -456(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp826:
	jmp	.LBB21_182
.LBB21_182:                             #   in Loop: Header=BB21_181 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE8inputLUT, %rax
	movq	-456(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -448(%rbp)        # 8-byte Spill
	jne	.LBB21_181
.LBB21_183:
	leaq	_ZGVZN7WBSlave6getLogEvE8inputLUT, %rdi
	callq	__cxa_guard_abort
	jmp	.LBB21_278
.LBB21_184:
.Ltmp829:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	jmp	.LBB21_276
.LBB21_185:
.Ltmp832:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	jmp	.LBB21_274
.LBB21_186:
.Ltmp835:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	jmp	.LBB21_272
.LBB21_187:
.Ltmp951:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	jmp	.LBB21_270
.LBB21_188:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp842:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp843:
	jmp	.LBB21_189
.LBB21_189:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
.Ltmp844:
	movsd	.LCPI21_133(%rip), %xmm0
	movq	%rax, %rdi
	callq	_ZN5sc_dtltERKNS_8sc_fxnumEd
.Ltmp845:
	movb	%al, -457(%rbp)         # 1-byte Spill
	jmp	.LBB21_190
.LBB21_190:                             #   in Loop: Header=BB21_162 Depth=1
	movb	-457(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_191
	jmp	.LBB21_218
.LBB21_191:                             #   in Loop: Header=BB21_162 Depth=1
	movl	$0, -60(%rbp)
.LBB21_192:                             #   Parent Loop BB21_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$35, -60(%rbp)
	jae	.LBB21_217
# BB#193:                               #   in Loop: Header=BB21_192 Depth=2
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
	movl	-60(%rbp), %ecx
	leaq	(%rcx,%rcx,4), %rcx
	leaq	_ZZN7WBSlave6getLogEvE8inputLUT(,%rcx,8), %rsi
.Ltmp910:
	movq	%rax, %rdi
	callq	_ZN5sc_dteqERKNS_8sc_fxnumES2_
.Ltmp911:
	movb	%al, -458(%rbp)         # 1-byte Spill
	jmp	.LBB21_194
.LBB21_194:                             #   in Loop: Header=BB21_192 Depth=2
	movb	-458(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_195
	jmp	.LBB21_199
.LBB21_195:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
	movl	-60(%rbp), %ecx
	leaq	(%rcx,%rcx,4), %rcx
	leaq	_ZZN7WBSlave6getLogEvE6logLUT(,%rcx,8), %rsi
.Ltmp937:
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_
.Ltmp938:
	movq	%rax, -472(%rbp)        # 8-byte Spill
	jmp	.LBB21_196
.LBB21_196:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp939:
	movl	$1, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp940:
	movq	%rax, -480(%rbp)        # 8-byte Spill
	jmp	.LBB21_197
.LBB21_197:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp941:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp942:
	jmp	.LBB21_198
.LBB21_198:                             #   in Loop: Header=BB21_162 Depth=1
	jmp	.LBB21_217
.LBB21_199:                             #   in Loop: Header=BB21_192 Depth=2
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
	movl	-60(%rbp), %ecx
	leaq	(%rcx,%rcx,4), %rcx
	leaq	_ZZN7WBSlave6getLogEvE8inputLUT(,%rcx,8), %rsi
.Ltmp912:
	movq	%rax, %rdi
	callq	_ZN5sc_dtgtERKNS_8sc_fxnumES2_
.Ltmp913:
	movb	%al, -481(%rbp)         # 1-byte Spill
	jmp	.LBB21_200
.LBB21_200:                             #   in Loop: Header=BB21_192 Depth=2
	movb	-481(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_201
	jmp	.LBB21_214
.LBB21_201:                             #   in Loop: Header=BB21_192 Depth=2
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
	movl	-60(%rbp), %ecx
	incl	%ecx
	movl	%ecx, %edx
	leaq	(%rdx,%rdx,4), %rdx
	leaq	_ZZN7WBSlave6getLogEvE8inputLUT(,%rdx,8), %rsi
.Ltmp914:
	movq	%rax, %rdi
	callq	_ZN5sc_dtltERKNS_8sc_fxnumES2_
.Ltmp915:
	movb	%al, -482(%rbp)         # 1-byte Spill
	jmp	.LBB21_202
.LBB21_202:                             #   in Loop: Header=BB21_192 Depth=2
	movb	-482(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_203
	jmp	.LBB21_214
.LBB21_203:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
	movl	-60(%rbp), %ecx
	leaq	(%rcx,%rcx,4), %rcx
	leaq	_ZZN7WBSlave6getLogEvE11gradientLUT(,%rcx,8), %rsi
	movq	-344(%rbp), %rcx        # 8-byte Reload
	addq	$4040, %rcx             # imm = 0xFC8
.Ltmp918:
	leaq	-240(%rbp), %rdi
	movq	%rcx, %rdx
	movq	%rax, -496(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dtmlERKNS_8sc_fxnumES2_
.Ltmp919:
	jmp	.LBB21_204
.LBB21_204:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp920:
	leaq	-240(%rbp), %rsi
	movq	-496(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
.Ltmp921:
	movq	%rax, -504(%rbp)        # 8-byte Spill
	jmp	.LBB21_205
.LBB21_205:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp925:
	leaq	-240(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp926:
	jmp	.LBB21_206
.LBB21_206:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp927:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp928:
	jmp	.LBB21_207
.LBB21_207:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
	movl	-60(%rbp), %ecx
	leaq	(%rcx,%rcx,4), %rcx
	leaq	_ZZN7WBSlave6getLogEvE9offsetLUT(,%rcx,8), %rsi
.Ltmp929:
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE
.Ltmp930:
	movq	%rax, -512(%rbp)        # 8-byte Spill
	jmp	.LBB21_208
.LBB21_208:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp931:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp932:
	jmp	.LBB21_209
.LBB21_209:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp933:
	movl	$1, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp934:
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jmp	.LBB21_210
.LBB21_210:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp935:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp936:
	jmp	.LBB21_211
.LBB21_211:                             #   in Loop: Header=BB21_162 Depth=1
	jmp	.LBB21_217
.LBB21_212:
.Ltmp922:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp923:
	leaq	-240(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp924:
	jmp	.LBB21_213
.LBB21_213:
	jmp	.LBB21_270
.LBB21_214:                             #   in Loop: Header=BB21_192 Depth=2
.Ltmp916:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp917:
	jmp	.LBB21_215
.LBB21_215:                             #   in Loop: Header=BB21_192 Depth=2
	jmp	.LBB21_216
.LBB21_216:                             #   in Loop: Header=BB21_192 Depth=2
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB21_192
.LBB21_217:                             #   in Loop: Header=BB21_162 Depth=1
	jmp	.LBB21_263
.LBB21_218:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp846:
	leaq	-144(%rbp), %rdi
	xorps	%xmm0, %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd
.Ltmp847:
	movq	%rax, -528(%rbp)        # 8-byte Spill
	jmp	.LBB21_219
.LBB21_219:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
	leaq	-224(%rbp), %rdx
.Ltmp848:
	leaq	-256(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZN5sc_dtmiERKNS_8sc_fxnumES2_
.Ltmp849:
	jmp	.LBB21_220
.LBB21_220:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp850:
	leaq	-184(%rbp), %rdi
	leaq	-256(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
.Ltmp851:
	movq	%rax, -536(%rbp)        # 8-byte Spill
	jmp	.LBB21_221
.LBB21_221:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp855:
	leaq	-256(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp856:
	jmp	.LBB21_222
.LBB21_222:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp857:
	leaq	-104(%rbp), %rdi
	movsd	.LCPI21_134(%rip), %xmm0
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd
.Ltmp858:
	movq	%rax, -544(%rbp)        # 8-byte Spill
	jmp	.LBB21_223
.LBB21_223:                             #   in Loop: Header=BB21_162 Depth=1
	movl	$1, -60(%rbp)
.LBB21_224:                             #   Parent Loop BB21_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -60(%rbp)
	ja	.LBB21_259
# BB#225:                               #   in Loop: Header=BB21_224 Depth=2
	leaq	-104(%rbp), %rsi
	leaq	-184(%rbp), %rdx
.Ltmp865:
	leaq	-272(%rbp), %rdi
	callq	_ZN5sc_dtmlERKNS_8sc_fxnumES2_
.Ltmp866:
	jmp	.LBB21_226
.LBB21_226:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp867:
	leaq	-104(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
.Ltmp868:
	movq	%rax, -552(%rbp)        # 8-byte Spill
	jmp	.LBB21_227
.LBB21_227:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp872:
	leaq	-272(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp873:
	jmp	.LBB21_228
.LBB21_228:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp874:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp875:
	jmp	.LBB21_229
.LBB21_229:                             #   in Loop: Header=BB21_224 Depth=2
	movl	-60(%rbp), %eax
	addl	$1, %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB21_245
# BB#230:                               #   in Loop: Header=BB21_224 Depth=2
	leaq	-224(%rbp), %rsi
	movl	-60(%rbp), %edx
.Ltmp892:
	leaq	-304(%rbp), %rdi
	callq	_ZN5sc_dtdvERKNS_8sc_fxnumEj
.Ltmp893:
	jmp	.LBB21_231
.LBB21_231:                             #   in Loop: Header=BB21_224 Depth=2
	leaq	-104(%rbp), %rdx
.Ltmp894:
	leaq	-288(%rbp), %rdi
	leaq	-304(%rbp), %rsi
	callq	_ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE
.Ltmp895:
	jmp	.LBB21_232
.LBB21_232:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp896:
	leaq	-144(%rbp), %rdi
	leaq	-288(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE
.Ltmp897:
	movq	%rax, -560(%rbp)        # 8-byte Spill
	jmp	.LBB21_233
.LBB21_233:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp901:
	leaq	-288(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp902:
	jmp	.LBB21_234
.LBB21_234:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp906:
	leaq	-304(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp907:
	jmp	.LBB21_235
.LBB21_235:                             #   in Loop: Header=BB21_224 Depth=2
	jmp	.LBB21_256
.LBB21_236:
.Ltmp852:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp853:
	leaq	-256(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp854:
	jmp	.LBB21_237
.LBB21_237:
	jmp	.LBB21_270
.LBB21_238:
.Ltmp869:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp870:
	leaq	-272(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp871:
	jmp	.LBB21_239
.LBB21_239:
	jmp	.LBB21_270
.LBB21_240:
.Ltmp903:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	jmp	.LBB21_243
.LBB21_241:
.Ltmp898:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp899:
	leaq	-288(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp900:
	jmp	.LBB21_242
.LBB21_242:
	jmp	.LBB21_243
.LBB21_243:
.Ltmp904:
	leaq	-304(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp905:
	jmp	.LBB21_244
.LBB21_244:
	jmp	.LBB21_270
.LBB21_245:                             #   in Loop: Header=BB21_224 Depth=2
	leaq	-224(%rbp), %rsi
	movl	-60(%rbp), %edx
.Ltmp876:
	leaq	-336(%rbp), %rdi
	callq	_ZN5sc_dtdvERKNS_8sc_fxnumEj
.Ltmp877:
	jmp	.LBB21_246
.LBB21_246:                             #   in Loop: Header=BB21_224 Depth=2
	leaq	-104(%rbp), %rdx
.Ltmp878:
	leaq	-320(%rbp), %rdi
	leaq	-336(%rbp), %rsi
	callq	_ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE
.Ltmp879:
	jmp	.LBB21_247
.LBB21_247:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp880:
	leaq	-144(%rbp), %rdi
	leaq	-320(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxvalE
.Ltmp881:
	movq	%rax, -568(%rbp)        # 8-byte Spill
	jmp	.LBB21_248
.LBB21_248:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp885:
	leaq	-320(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp886:
	jmp	.LBB21_249
.LBB21_249:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp890:
	leaq	-336(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp891:
	jmp	.LBB21_250
.LBB21_250:                             #   in Loop: Header=BB21_224 Depth=2
	jmp	.LBB21_256
.LBB21_251:
.Ltmp887:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	jmp	.LBB21_254
.LBB21_252:
.Ltmp882:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp883:
	leaq	-320(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp884:
	jmp	.LBB21_253
.LBB21_253:
	jmp	.LBB21_254
.LBB21_254:
.Ltmp888:
	leaq	-336(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp889:
	jmp	.LBB21_255
.LBB21_255:
	jmp	.LBB21_270
.LBB21_256:                             #   in Loop: Header=BB21_224 Depth=2
.Ltmp908:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp909:
	jmp	.LBB21_257
.LBB21_257:                             #   in Loop: Header=BB21_224 Depth=2
	jmp	.LBB21_258
.LBB21_258:                             #   in Loop: Header=BB21_224 Depth=2
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB21_224
.LBB21_259:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
.Ltmp859:
	leaq	-144(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_
.Ltmp860:
	movq	%rax, -576(%rbp)        # 8-byte Spill
	jmp	.LBB21_260
.LBB21_260:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp861:
	movl	$1, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp862:
	movq	%rax, -584(%rbp)        # 8-byte Spill
	jmp	.LBB21_261
.LBB21_261:                             #   in Loop: Header=BB21_162 Depth=1
.Ltmp863:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp864:
	jmp	.LBB21_262
.LBB21_262:                             #   in Loop: Header=BB21_162 Depth=1
	jmp	.LBB21_263
.LBB21_263:                             #   in Loop: Header=BB21_162 Depth=1
	jmp	.LBB21_264
.LBB21_264:                             #   Parent Loop BB21_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp943:
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp944:
	movq	%rax, -592(%rbp)        # 8-byte Spill
	jmp	.LBB21_265
.LBB21_265:                             #   in Loop: Header=BB21_264 Depth=2
	movq	-592(%rbp), %rax        # 8-byte Reload
	cmpq	$1, %rax
	jne	.LBB21_268
# BB#266:                               #   in Loop: Header=BB21_264 Depth=2
.Ltmp947:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp948:
	jmp	.LBB21_267
.LBB21_267:                             #   in Loop: Header=BB21_264 Depth=2
	jmp	.LBB21_264
.LBB21_268:                             #   in Loop: Header=BB21_162 Depth=1
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp945:
	xorl	%esi, %esi
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
.Ltmp946:
	movq	%rax, -600(%rbp)        # 8-byte Spill
	jmp	.LBB21_269
.LBB21_269:                             #   in Loop: Header=BB21_162 Depth=1
	jmp	.LBB21_162
.LBB21_270:
.Ltmp952:
	leaq	-224(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp953:
	jmp	.LBB21_271
.LBB21_271:
	jmp	.LBB21_272
.LBB21_272:
.Ltmp954:
	leaq	-184(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp955:
	jmp	.LBB21_273
.LBB21_273:
	jmp	.LBB21_274
.LBB21_274:
.Ltmp956:
	leaq	-144(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp957:
	jmp	.LBB21_275
.LBB21_275:
	jmp	.LBB21_276
.LBB21_276:
.Ltmp958:
	leaq	-104(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp959:
	jmp	.LBB21_277
.LBB21_277:
	jmp	.LBB21_278
.LBB21_278:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB21_279:
.Ltmp960:
	movq	%rax, -608(%rbp)        # 8-byte Spill
	movq	%rdx, -616(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp966:
	.size	_ZN7WBSlave6getLogEv, .Ltmp966-_ZN7WBSlave6getLogEv
	.cfi_endproc
.Leh_func_end21:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table21:
.Lexception21:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\266\203\200"         # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.ascii	 "\255\003"             # Call site table length
.Lset262 = .Ltmp527-.Leh_func_begin21   # >> Call Site 1 <<
	.long	.Lset262
.Lset263 = .Ltmp598-.Ltmp527            #   Call between .Ltmp527 and .Ltmp598
	.long	.Lset263
.Lset264 = .Ltmp599-.Leh_func_begin21   #     jumps to .Ltmp599
	.long	.Lset264
	.byte	0                       #   On action: cleanup
.Lset265 = .Ltmp602-.Leh_func_begin21   # >> Call Site 2 <<
	.long	.Lset265
.Lset266 = .Ltmp673-.Ltmp602            #   Call between .Ltmp602 and .Ltmp673
	.long	.Lset266
.Lset267 = .Ltmp674-.Leh_func_begin21   #     jumps to .Ltmp674
	.long	.Lset267
	.byte	0                       #   On action: cleanup
.Lset268 = .Ltmp677-.Leh_func_begin21   # >> Call Site 3 <<
	.long	.Lset268
.Lset269 = .Ltmp748-.Ltmp677            #   Call between .Ltmp677 and .Ltmp748
	.long	.Lset269
.Lset270 = .Ltmp749-.Leh_func_begin21   #     jumps to .Ltmp749
	.long	.Lset270
	.byte	0                       #   On action: cleanup
.Lset271 = .Ltmp752-.Leh_func_begin21   # >> Call Site 4 <<
	.long	.Lset271
.Lset272 = .Ltmp823-.Ltmp752            #   Call between .Ltmp752 and .Ltmp823
	.long	.Lset272
.Lset273 = .Ltmp824-.Leh_func_begin21   #     jumps to .Ltmp824
	.long	.Lset273
	.byte	0                       #   On action: cleanup
.Lset274 = .Ltmp823-.Leh_func_begin21   # >> Call Site 5 <<
	.long	.Lset274
.Lset275 = .Ltmp827-.Ltmp823            #   Call between .Ltmp823 and .Ltmp827
	.long	.Lset275
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset276 = .Ltmp827-.Leh_func_begin21   # >> Call Site 6 <<
	.long	.Lset276
.Lset277 = .Ltmp828-.Ltmp827            #   Call between .Ltmp827 and .Ltmp828
	.long	.Lset277
.Lset278 = .Ltmp829-.Leh_func_begin21   #     jumps to .Ltmp829
	.long	.Lset278
	.byte	0                       #   On action: cleanup
.Lset279 = .Ltmp830-.Leh_func_begin21   # >> Call Site 7 <<
	.long	.Lset279
.Lset280 = .Ltmp831-.Ltmp830            #   Call between .Ltmp830 and .Ltmp831
	.long	.Lset280
.Lset281 = .Ltmp832-.Leh_func_begin21   #     jumps to .Ltmp832
	.long	.Lset281
	.byte	0                       #   On action: cleanup
.Lset282 = .Ltmp833-.Leh_func_begin21   # >> Call Site 8 <<
	.long	.Lset282
.Lset283 = .Ltmp834-.Ltmp833            #   Call between .Ltmp833 and .Ltmp834
	.long	.Lset283
.Lset284 = .Ltmp835-.Leh_func_begin21   #     jumps to .Ltmp835
	.long	.Lset284
	.byte	0                       #   On action: cleanup
.Lset285 = .Ltmp836-.Leh_func_begin21   # >> Call Site 9 <<
	.long	.Lset285
.Lset286 = .Ltmp950-.Ltmp836            #   Call between .Ltmp836 and .Ltmp950
	.long	.Lset286
.Lset287 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset287
	.byte	0                       #   On action: cleanup
.Lset288 = .Ltmp600-.Leh_func_begin21   # >> Call Site 10 <<
	.long	.Lset288
.Lset289 = .Ltmp826-.Ltmp600            #   Call between .Ltmp600 and .Ltmp826
	.long	.Lset289
.Lset290 = .Ltmp960-.Leh_func_begin21   #     jumps to .Ltmp960
	.long	.Lset290
	.byte	1                       #   On action: 1
.Lset291 = .Ltmp842-.Leh_func_begin21   # >> Call Site 11 <<
	.long	.Lset291
.Lset292 = .Ltmp919-.Ltmp842            #   Call between .Ltmp842 and .Ltmp919
	.long	.Lset292
.Lset293 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset293
	.byte	0                       #   On action: cleanup
.Lset294 = .Ltmp920-.Leh_func_begin21   # >> Call Site 12 <<
	.long	.Lset294
.Lset295 = .Ltmp921-.Ltmp920            #   Call between .Ltmp920 and .Ltmp921
	.long	.Lset295
.Lset296 = .Ltmp922-.Leh_func_begin21   #     jumps to .Ltmp922
	.long	.Lset296
	.byte	0                       #   On action: cleanup
.Lset297 = .Ltmp925-.Leh_func_begin21   # >> Call Site 13 <<
	.long	.Lset297
.Lset298 = .Ltmp936-.Ltmp925            #   Call between .Ltmp925 and .Ltmp936
	.long	.Lset298
.Lset299 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset299
	.byte	0                       #   On action: cleanup
.Lset300 = .Ltmp923-.Leh_func_begin21   # >> Call Site 14 <<
	.long	.Lset300
.Lset301 = .Ltmp924-.Ltmp923            #   Call between .Ltmp923 and .Ltmp924
	.long	.Lset301
.Lset302 = .Ltmp960-.Leh_func_begin21   #     jumps to .Ltmp960
	.long	.Lset302
	.byte	1                       #   On action: 1
.Lset303 = .Ltmp916-.Leh_func_begin21   # >> Call Site 15 <<
	.long	.Lset303
.Lset304 = .Ltmp849-.Ltmp916            #   Call between .Ltmp916 and .Ltmp849
	.long	.Lset304
.Lset305 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset305
	.byte	0                       #   On action: cleanup
.Lset306 = .Ltmp850-.Leh_func_begin21   # >> Call Site 16 <<
	.long	.Lset306
.Lset307 = .Ltmp851-.Ltmp850            #   Call between .Ltmp850 and .Ltmp851
	.long	.Lset307
.Lset308 = .Ltmp852-.Leh_func_begin21   #     jumps to .Ltmp852
	.long	.Lset308
	.byte	0                       #   On action: cleanup
.Lset309 = .Ltmp855-.Leh_func_begin21   # >> Call Site 17 <<
	.long	.Lset309
.Lset310 = .Ltmp866-.Ltmp855            #   Call between .Ltmp855 and .Ltmp866
	.long	.Lset310
.Lset311 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset311
	.byte	0                       #   On action: cleanup
.Lset312 = .Ltmp867-.Leh_func_begin21   # >> Call Site 18 <<
	.long	.Lset312
.Lset313 = .Ltmp868-.Ltmp867            #   Call between .Ltmp867 and .Ltmp868
	.long	.Lset313
.Lset314 = .Ltmp869-.Leh_func_begin21   #     jumps to .Ltmp869
	.long	.Lset314
	.byte	0                       #   On action: cleanup
.Lset315 = .Ltmp872-.Leh_func_begin21   # >> Call Site 19 <<
	.long	.Lset315
.Lset316 = .Ltmp893-.Ltmp872            #   Call between .Ltmp872 and .Ltmp893
	.long	.Lset316
.Lset317 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset317
	.byte	0                       #   On action: cleanup
.Lset318 = .Ltmp894-.Leh_func_begin21   # >> Call Site 20 <<
	.long	.Lset318
.Lset319 = .Ltmp895-.Ltmp894            #   Call between .Ltmp894 and .Ltmp895
	.long	.Lset319
.Lset320 = .Ltmp903-.Leh_func_begin21   #     jumps to .Ltmp903
	.long	.Lset320
	.byte	0                       #   On action: cleanup
.Lset321 = .Ltmp896-.Leh_func_begin21   # >> Call Site 21 <<
	.long	.Lset321
.Lset322 = .Ltmp897-.Ltmp896            #   Call between .Ltmp896 and .Ltmp897
	.long	.Lset322
.Lset323 = .Ltmp898-.Leh_func_begin21   #     jumps to .Ltmp898
	.long	.Lset323
	.byte	0                       #   On action: cleanup
.Lset324 = .Ltmp901-.Leh_func_begin21   # >> Call Site 22 <<
	.long	.Lset324
.Lset325 = .Ltmp902-.Ltmp901            #   Call between .Ltmp901 and .Ltmp902
	.long	.Lset325
.Lset326 = .Ltmp903-.Leh_func_begin21   #     jumps to .Ltmp903
	.long	.Lset326
	.byte	0                       #   On action: cleanup
.Lset327 = .Ltmp906-.Leh_func_begin21   # >> Call Site 23 <<
	.long	.Lset327
.Lset328 = .Ltmp907-.Ltmp906            #   Call between .Ltmp906 and .Ltmp907
	.long	.Lset328
.Lset329 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset329
	.byte	0                       #   On action: cleanup
.Lset330 = .Ltmp853-.Leh_func_begin21   # >> Call Site 24 <<
	.long	.Lset330
.Lset331 = .Ltmp905-.Ltmp853            #   Call between .Ltmp853 and .Ltmp905
	.long	.Lset331
.Lset332 = .Ltmp960-.Leh_func_begin21   #     jumps to .Ltmp960
	.long	.Lset332
	.byte	1                       #   On action: 1
.Lset333 = .Ltmp876-.Leh_func_begin21   # >> Call Site 25 <<
	.long	.Lset333
.Lset334 = .Ltmp877-.Ltmp876            #   Call between .Ltmp876 and .Ltmp877
	.long	.Lset334
.Lset335 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset335
	.byte	0                       #   On action: cleanup
.Lset336 = .Ltmp878-.Leh_func_begin21   # >> Call Site 26 <<
	.long	.Lset336
.Lset337 = .Ltmp879-.Ltmp878            #   Call between .Ltmp878 and .Ltmp879
	.long	.Lset337
.Lset338 = .Ltmp887-.Leh_func_begin21   #     jumps to .Ltmp887
	.long	.Lset338
	.byte	0                       #   On action: cleanup
.Lset339 = .Ltmp880-.Leh_func_begin21   # >> Call Site 27 <<
	.long	.Lset339
.Lset340 = .Ltmp881-.Ltmp880            #   Call between .Ltmp880 and .Ltmp881
	.long	.Lset340
.Lset341 = .Ltmp882-.Leh_func_begin21   #     jumps to .Ltmp882
	.long	.Lset341
	.byte	0                       #   On action: cleanup
.Lset342 = .Ltmp885-.Leh_func_begin21   # >> Call Site 28 <<
	.long	.Lset342
.Lset343 = .Ltmp886-.Ltmp885            #   Call between .Ltmp885 and .Ltmp886
	.long	.Lset343
.Lset344 = .Ltmp887-.Leh_func_begin21   #     jumps to .Ltmp887
	.long	.Lset344
	.byte	0                       #   On action: cleanup
.Lset345 = .Ltmp890-.Leh_func_begin21   # >> Call Site 29 <<
	.long	.Lset345
.Lset346 = .Ltmp891-.Ltmp890            #   Call between .Ltmp890 and .Ltmp891
	.long	.Lset346
.Lset347 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset347
	.byte	0                       #   On action: cleanup
.Lset348 = .Ltmp883-.Leh_func_begin21   # >> Call Site 30 <<
	.long	.Lset348
.Lset349 = .Ltmp889-.Ltmp883            #   Call between .Ltmp883 and .Ltmp889
	.long	.Lset349
.Lset350 = .Ltmp960-.Leh_func_begin21   #     jumps to .Ltmp960
	.long	.Lset350
	.byte	1                       #   On action: 1
.Lset351 = .Ltmp908-.Leh_func_begin21   # >> Call Site 31 <<
	.long	.Lset351
.Lset352 = .Ltmp946-.Ltmp908            #   Call between .Ltmp908 and .Ltmp946
	.long	.Lset352
.Lset353 = .Ltmp951-.Leh_func_begin21   #     jumps to .Ltmp951
	.long	.Lset353
	.byte	0                       #   On action: cleanup
.Lset354 = .Ltmp952-.Leh_func_begin21   # >> Call Site 32 <<
	.long	.Lset354
.Lset355 = .Ltmp959-.Ltmp952            #   Call between .Ltmp952 and .Ltmp959
	.long	.Lset355
.Lset356 = .Ltmp960-.Leh_func_begin21   #     jumps to .Ltmp960
	.long	.Lset356
	.byte	1                       #   On action: 1
.Lset357 = .Ltmp959-.Leh_func_begin21   # >> Call Site 33 <<
	.long	.Lset357
.Lset358 = .Leh_func_end21-.Ltmp959     #   Call between .Ltmp959 and .Leh_func_end21
	.long	.Lset358
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt7sc_uintILi3EED1Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EED1Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EED1Ev,@function
_ZN5sc_dt7sc_uintILi3EED1Ev:            # @_ZN5sc_dt7sc_uintILi3EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp969:
	.cfi_def_cfa_offset 16
.Ltmp970:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp971:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp972:
	.size	_ZN5sc_dt7sc_uintILi3EED1Ev, .Ltmp972-_ZN5sc_dt7sc_uintILi3EED1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EED1Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EED1Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EED1Ev,@function
_ZN5sc_dt7sc_uintILi1EED1Ev:            # @_ZN5sc_dt7sc_uintILi1EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp975:
	.cfi_def_cfa_offset 16
.Ltmp976:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp977:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp978:
	.size	_ZN5sc_dt7sc_uintILi1EED1Ev, .Ltmp978-_ZN5sc_dt7sc_uintILi1EED1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp981:
	.cfi_def_cfa_offset 16
.Ltmp982:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp983:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp984:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev, .Ltmp984-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIbED1Ev,"axG",@progbits,_ZN7sc_core6sc_outIbED1Ev,comdat
	.weak	_ZN7sc_core6sc_outIbED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbED1Ev,@function
_ZN7sc_core6sc_outIbED1Ev:              # @_ZN7sc_core6sc_outIbED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp987:
	.cfi_def_cfa_offset 16
.Ltmp988:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp989:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core6sc_outIbED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp990:
	.size	_ZN7sc_core6sc_outIbED1Ev, .Ltmp990-_ZN7sc_core6sc_outIbED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp993:
	.cfi_def_cfa_offset 16
.Ltmp994:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp995:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp996:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev, .Ltmp996-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp999:
	.cfi_def_cfa_offset 16
.Ltmp1000:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1001:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1002:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev, .Ltmp1002-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIbED1Ev,"axG",@progbits,_ZN7sc_core5sc_inIbED1Ev,comdat
	.weak	_ZN7sc_core5sc_inIbED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIbED1Ev,@function
_ZN7sc_core5sc_inIbED1Ev:               # @_ZN7sc_core5sc_inIbED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1005:
	.cfi_def_cfa_offset 16
.Ltmp1006:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1007:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIbED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1008:
	.size	_ZN7sc_core5sc_inIbED1Ev, .Ltmp1008-_ZN7sc_core5sc_inIbED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1011:
	.cfi_def_cfa_offset 16
.Ltmp1012:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1013:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1014:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev, .Ltmp1014-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1017:
	.cfi_def_cfa_offset 16
.Ltmp1018:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1019:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	movq	-24(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1020:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE, .Ltmp1020-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_array_dtor,@function
__cxx_global_array_dtor:                # @__cxx_global_array_dtor
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin31:
	.cfi_lsda 3, .Lexception31
# BB#0:
	pushq	%rbp
.Ltmp1029:
	.cfi_def_cfa_offset 16
.Ltmp1030:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1031:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	_ZZN7WBSlave6getLogEvE9offsetLUT, %rax
	addq	$1440, %rax             # imm = 0x5A0
	movq	%rdi, -8(%rbp)
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB31_1:                               # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$-40, %rax
.Ltmp1021:
	movq	%rax, %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1022:
	jmp	.LBB31_2
.LBB31_2:                               #   in Loop: Header=BB31_1 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE9offsetLUT, %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	jne	.LBB31_1
# BB#3:
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB31_4:
.Ltmp1023:
	leaq	_ZZN7WBSlave6getLogEvE9offsetLUT, %rcx
	movl	%edx, %esi
	movq	%rax, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB31_7
.LBB31_5:                               # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$-40, %rax
.Ltmp1024:
	movq	%rax, %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1025:
	jmp	.LBB31_6
.LBB31_6:                               #   in Loop: Header=BB31_5 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE9offsetLUT, %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jne	.LBB31_5
.LBB31_7:
	jmp	.LBB31_8
.LBB31_8:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB31_9:
.Ltmp1026:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1032:
	.size	__cxx_global_array_dtor, .Ltmp1032-__cxx_global_array_dtor
	.cfi_endproc
.Leh_func_end31:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table31:
.Lexception31:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\257\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset359 = .Ltmp1021-.Leh_func_begin31  # >> Call Site 1 <<
	.long	.Lset359
.Lset360 = .Ltmp1022-.Ltmp1021          #   Call between .Ltmp1021 and .Ltmp1022
	.long	.Lset360
.Lset361 = .Ltmp1023-.Leh_func_begin31  #     jumps to .Ltmp1023
	.long	.Lset361
	.byte	0                       #   On action: cleanup
.Lset362 = .Ltmp1024-.Leh_func_begin31  # >> Call Site 2 <<
	.long	.Lset362
.Lset363 = .Ltmp1025-.Ltmp1024          #   Call between .Ltmp1024 and .Ltmp1025
	.long	.Lset363
.Lset364 = .Ltmp1026-.Leh_func_begin31  #     jumps to .Ltmp1026
	.long	.Lset364
	.byte	1                       #   On action: 1
.Lset365 = .Ltmp1025-.Leh_func_begin31  # >> Call Site 3 <<
	.long	.Lset365
.Lset366 = .Leh_func_end31-.Ltmp1025    #   Call between .Ltmp1025 and .Leh_func_end31
	.long	.Lset366
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1035:
	.cfi_def_cfa_offset 16
.Ltmp1036:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1037:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	movq	-24(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1038:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE, .Ltmp1038-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EdPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1041:
	.cfi_def_cfa_offset 16
.Ltmp1042:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1043:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1044:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev, .Ltmp1044-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_array_dtor12,@function
__cxx_global_array_dtor12:              # @__cxx_global_array_dtor12
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin34:
	.cfi_lsda 3, .Lexception34
# BB#0:
	pushq	%rbp
.Ltmp1053:
	.cfi_def_cfa_offset 16
.Ltmp1054:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1055:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	_ZZN7WBSlave6getLogEvE11gradientLUT, %rax
	addq	$1440, %rax             # imm = 0x5A0
	movq	%rdi, -8(%rbp)
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB34_1:                               # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$-40, %rax
.Ltmp1045:
	movq	%rax, %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1046:
	jmp	.LBB34_2
.LBB34_2:                               #   in Loop: Header=BB34_1 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE11gradientLUT, %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	jne	.LBB34_1
# BB#3:
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB34_4:
.Ltmp1047:
	leaq	_ZZN7WBSlave6getLogEvE11gradientLUT, %rcx
	movl	%edx, %esi
	movq	%rax, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB34_7
.LBB34_5:                               # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$-40, %rax
.Ltmp1048:
	movq	%rax, %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1049:
	jmp	.LBB34_6
.LBB34_6:                               #   in Loop: Header=BB34_5 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE11gradientLUT, %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jne	.LBB34_5
.LBB34_7:
	jmp	.LBB34_8
.LBB34_8:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB34_9:
.Ltmp1050:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1056:
	.size	__cxx_global_array_dtor12, .Ltmp1056-__cxx_global_array_dtor12
	.cfi_endproc
.Leh_func_end34:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table34:
.Lexception34:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\257\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset367 = .Ltmp1045-.Leh_func_begin34  # >> Call Site 1 <<
	.long	.Lset367
.Lset368 = .Ltmp1046-.Ltmp1045          #   Call between .Ltmp1045 and .Ltmp1046
	.long	.Lset368
.Lset369 = .Ltmp1047-.Leh_func_begin34  #     jumps to .Ltmp1047
	.long	.Lset369
	.byte	0                       #   On action: cleanup
.Lset370 = .Ltmp1048-.Leh_func_begin34  # >> Call Site 2 <<
	.long	.Lset370
.Lset371 = .Ltmp1049-.Ltmp1048          #   Call between .Ltmp1048 and .Ltmp1049
	.long	.Lset371
.Lset372 = .Ltmp1050-.Leh_func_begin34  #     jumps to .Ltmp1050
	.long	.Lset372
	.byte	1                       #   On action: 1
.Lset373 = .Ltmp1049-.Leh_func_begin34  # >> Call Site 3 <<
	.long	.Lset373
.Lset374 = .Leh_func_end34-.Ltmp1049    #   Call between .Ltmp1049 and .Leh_func_end34
	.long	.Lset374
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_array_dtor13,@function
__cxx_global_array_dtor13:              # @__cxx_global_array_dtor13
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin35:
	.cfi_lsda 3, .Lexception35
# BB#0:
	pushq	%rbp
.Ltmp1065:
	.cfi_def_cfa_offset 16
.Ltmp1066:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1067:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	_ZZN7WBSlave6getLogEvE6logLUT, %rax
	addq	$1440, %rax             # imm = 0x5A0
	movq	%rdi, -8(%rbp)
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB35_1:                               # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$-40, %rax
.Ltmp1057:
	movq	%rax, %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1058:
	jmp	.LBB35_2
.LBB35_2:                               #   in Loop: Header=BB35_1 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE6logLUT, %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	jne	.LBB35_1
# BB#3:
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB35_4:
.Ltmp1059:
	leaq	_ZZN7WBSlave6getLogEvE6logLUT, %rcx
	movl	%edx, %esi
	movq	%rax, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB35_7
.LBB35_5:                               # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$-40, %rax
.Ltmp1060:
	movq	%rax, %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1061:
	jmp	.LBB35_6
.LBB35_6:                               #   in Loop: Header=BB35_5 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE6logLUT, %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jne	.LBB35_5
.LBB35_7:
	jmp	.LBB35_8
.LBB35_8:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB35_9:
.Ltmp1062:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1068:
	.size	__cxx_global_array_dtor13, .Ltmp1068-__cxx_global_array_dtor13
	.cfi_endproc
.Leh_func_end35:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table35:
.Lexception35:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\257\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset375 = .Ltmp1057-.Leh_func_begin35  # >> Call Site 1 <<
	.long	.Lset375
.Lset376 = .Ltmp1058-.Ltmp1057          #   Call between .Ltmp1057 and .Ltmp1058
	.long	.Lset376
.Lset377 = .Ltmp1059-.Leh_func_begin35  #     jumps to .Ltmp1059
	.long	.Lset377
	.byte	0                       #   On action: cleanup
.Lset378 = .Ltmp1060-.Leh_func_begin35  # >> Call Site 2 <<
	.long	.Lset378
.Lset379 = .Ltmp1061-.Ltmp1060          #   Call between .Ltmp1060 and .Ltmp1061
	.long	.Lset379
.Lset380 = .Ltmp1062-.Leh_func_begin35  #     jumps to .Ltmp1062
	.long	.Lset380
	.byte	1                       #   On action: 1
.Lset381 = .Ltmp1061-.Leh_func_begin35  # >> Call Site 3 <<
	.long	.Lset381
.Lset382 = .Leh_func_end35-.Ltmp1061    #   Call between .Ltmp1061 and .Leh_func_end35
	.long	.Lset382
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_array_dtor14,@function
__cxx_global_array_dtor14:              # @__cxx_global_array_dtor14
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin36:
	.cfi_lsda 3, .Lexception36
# BB#0:
	pushq	%rbp
.Ltmp1077:
	.cfi_def_cfa_offset 16
.Ltmp1078:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1079:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	_ZZN7WBSlave6getLogEvE8inputLUT, %rax
	addq	$1440, %rax             # imm = 0x5A0
	movq	%rdi, -8(%rbp)
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB36_1:                               # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$-40, %rax
.Ltmp1069:
	movq	%rax, %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1070:
	jmp	.LBB36_2
.LBB36_2:                               #   in Loop: Header=BB36_1 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE8inputLUT, %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	jne	.LBB36_1
# BB#3:
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB36_4:
.Ltmp1071:
	leaq	_ZZN7WBSlave6getLogEvE8inputLUT, %rcx
	movl	%edx, %esi
	movq	%rax, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB36_7
.LBB36_5:                               # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$-40, %rax
.Ltmp1072:
	movq	%rax, %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1073:
	jmp	.LBB36_6
.LBB36_6:                               #   in Loop: Header=BB36_5 Depth=1
	leaq	_ZZN7WBSlave6getLogEvE8inputLUT, %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jne	.LBB36_5
.LBB36_7:
	jmp	.LBB36_8
.LBB36_8:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB36_9:
.Ltmp1074:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1080:
	.size	__cxx_global_array_dtor14, .Ltmp1080-__cxx_global_array_dtor14
	.cfi_endproc
.Leh_func_end36:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table36:
.Lexception36:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\257\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset383 = .Ltmp1069-.Leh_func_begin36  # >> Call Site 1 <<
	.long	.Lset383
.Lset384 = .Ltmp1070-.Ltmp1069          #   Call between .Ltmp1069 and .Ltmp1070
	.long	.Lset384
.Lset385 = .Ltmp1071-.Leh_func_begin36  #     jumps to .Ltmp1071
	.long	.Lset385
	.byte	0                       #   On action: cleanup
.Lset386 = .Ltmp1072-.Leh_func_begin36  # >> Call Site 2 <<
	.long	.Lset386
.Lset387 = .Ltmp1073-.Ltmp1072          #   Call between .Ltmp1072 and .Ltmp1073
	.long	.Lset387
.Lset388 = .Ltmp1074-.Leh_func_begin36  #     jumps to .Ltmp1074
	.long	.Lset388
	.byte	1                       #   On action: 1
.Lset389 = .Ltmp1073-.Leh_func_begin36  # >> Call Site 3 <<
	.long	.Lset389
.Lset390 = .Leh_func_end36-.Ltmp1073    #   Call between .Ltmp1073 and .Leh_func_end36
	.long	.Lset390
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt7sc_uintILi1EEaSEi,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EEaSEi,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EEaSEi
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EEaSEi,@function
_ZN5sc_dt7sc_uintILi1EEaSEi:            # @_ZN5sc_dt7sc_uintILi1EEaSEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1083:
	.cfi_def_cfa_offset 16
.Ltmp1084:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1085:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movl	-12(%rbp), %esi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt12sc_uint_baseaSEi
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1086:
	.size	_ZN5sc_dt7sc_uintILi1EEaSEi, .Ltmp1086-_ZN5sc_dt7sc_uintILi1EEaSEi
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_basecvyEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_basecvyEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_basecvyEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_basecvyEv,@function
_ZNK5sc_dt12sc_uint_basecvyEv:          # @_ZNK5sc_dt12sc_uint_basecvyEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp1087:
	.size	_ZNK5sc_dt12sc_uint_basecvyEv, .Ltmp1087-_ZNK5sc_dt12sc_uint_basecvyEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_module4waitEv,"axG",@progbits,_ZN7sc_core9sc_module4waitEv,comdat
	.weak	_ZN7sc_core9sc_module4waitEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_module4waitEv,@function
_ZN7sc_core9sc_module4waitEv:           # @_ZN7sc_core9sc_module4waitEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1090:
	.cfi_def_cfa_offset 16
.Ltmp1091:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1092:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_object10simcontextEv
	movq	%rax, %rdi
	callq	_ZN7sc_core4waitEPNS_13sc_simcontextE
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1093:
	.size	_ZN7sc_core9sc_module4waitEv, .Ltmp1093-_ZN7sc_core9sc_module4waitEv
	.cfi_endproc

	.section	.text._ZN5sc_dtltERKNS_8sc_fxnumEd,"axG",@progbits,_ZN5sc_dtltERKNS_8sc_fxnumEd,comdat
	.weak	_ZN5sc_dtltERKNS_8sc_fxnumEd
	.align	16, 0x90
	.type	_ZN5sc_dtltERKNS_8sc_fxnumEd,@function
_ZN5sc_dtltERKNS_8sc_fxnumEd:           # @_ZN5sc_dtltERKNS_8sc_fxnumEd
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin40:
	.cfi_lsda 3, .Lexception40
# BB#0:
	pushq	%rbp
.Ltmp1104:
	.cfi_def_cfa_offset 16
.Ltmp1105:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1106:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	leaq	-32(%rbp), %rdi
	xorl	%esi, %esi
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
.Ltmp1094:
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
.Ltmp1095:
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB40_1
.LBB40_1:
.Ltmp1096:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	callq	_ZN5sc_dt12cmp_scfx_repERKNS_8scfx_repES2_
.Ltmp1097:
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB40_2
.LBB40_2:
	leaq	-32(%rbp), %rdi
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	setl	%cl
	movl	$1, -56(%rbp)
	movb	%cl, -85(%rbp)          # 1-byte Spill
	callq	_ZN5sc_dt8sc_fxvalD1Ev
	movb	-85(%rbp), %cl          # 1-byte Reload
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$112, %rsp
	popq	%rbp
	ret
.LBB40_3:
.Ltmp1098:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp1099:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp1100:
	jmp	.LBB40_4
.LBB40_4:
	jmp	.LBB40_5
.LBB40_5:
	movq	-48(%rbp), %rdi
	callq	_Unwind_Resume
.LBB40_6:
.Ltmp1101:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1107:
	.size	_ZN5sc_dtltERKNS_8sc_fxnumEd, .Ltmp1107-_ZN5sc_dtltERKNS_8sc_fxnumEd
	.cfi_endproc
.Leh_func_end40:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table40:
.Lexception40:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset391 = .Leh_func_begin40-.Leh_func_begin40 # >> Call Site 1 <<
	.long	.Lset391
.Lset392 = .Ltmp1094-.Leh_func_begin40  #   Call between .Leh_func_begin40 and .Ltmp1094
	.long	.Lset392
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset393 = .Ltmp1094-.Leh_func_begin40  # >> Call Site 2 <<
	.long	.Lset393
.Lset394 = .Ltmp1097-.Ltmp1094          #   Call between .Ltmp1094 and .Ltmp1097
	.long	.Lset394
.Lset395 = .Ltmp1098-.Leh_func_begin40  #     jumps to .Ltmp1098
	.long	.Lset395
	.byte	0                       #   On action: cleanup
.Lset396 = .Ltmp1097-.Leh_func_begin40  # >> Call Site 3 <<
	.long	.Lset396
.Lset397 = .Ltmp1099-.Ltmp1097          #   Call between .Ltmp1097 and .Ltmp1099
	.long	.Lset397
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset398 = .Ltmp1099-.Leh_func_begin40  # >> Call Site 4 <<
	.long	.Lset398
.Lset399 = .Ltmp1100-.Ltmp1099          #   Call between .Ltmp1099 and .Ltmp1100
	.long	.Lset399
.Lset400 = .Ltmp1101-.Leh_func_begin40  #     jumps to .Ltmp1101
	.long	.Lset400
	.byte	1                       #   On action: 1
.Lset401 = .Ltmp1100-.Leh_func_begin40  # >> Call Site 5 <<
	.long	.Lset401
.Lset402 = .Leh_func_end40-.Ltmp1100    #   Call between .Ltmp1100 and .Leh_func_end40
	.long	.Lset402
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dteqERKNS_8sc_fxnumES2_,"axG",@progbits,_ZN5sc_dteqERKNS_8sc_fxnumES2_,comdat
	.weak	_ZN5sc_dteqERKNS_8sc_fxnumES2_
	.align	16, 0x90
	.type	_ZN5sc_dteqERKNS_8sc_fxnumES2_,@function
_ZN5sc_dteqERKNS_8sc_fxnumES2_:         # @_ZN5sc_dteqERKNS_8sc_fxnumES2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1110:
	.cfi_def_cfa_offset 16
.Ltmp1111:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1112:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	callq	_ZN5sc_dt12cmp_scfx_repERKNS_8scfx_repES2_
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1113:
	.size	_ZN5sc_dteqERKNS_8sc_fxnumES2_, .Ltmp1113-_ZN5sc_dteqERKNS_8sc_fxnumES2_
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1116:
	.cfi_def_cfa_offset 16
.Ltmp1117:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1118:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_fixaSERKS0_
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1119:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_, .Ltmp1119-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKS3_
	.cfi_endproc

	.section	.text._ZN5sc_dtgtERKNS_8sc_fxnumES2_,"axG",@progbits,_ZN5sc_dtgtERKNS_8sc_fxnumES2_,comdat
	.weak	_ZN5sc_dtgtERKNS_8sc_fxnumES2_
	.align	16, 0x90
	.type	_ZN5sc_dtgtERKNS_8sc_fxnumES2_,@function
_ZN5sc_dtgtERKNS_8sc_fxnumES2_:         # @_ZN5sc_dtgtERKNS_8sc_fxnumES2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1122:
	.cfi_def_cfa_offset 16
.Ltmp1123:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1124:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	callq	_ZN5sc_dt12cmp_scfx_repERKNS_8scfx_repES2_
	movb	$0, %cl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	movb	%cl, -21(%rbp)          # 1-byte Spill
	jle	.LBB43_2
# BB#1:
	cmpl	$2, -20(%rbp)
	setne	%al
	movb	%al, -21(%rbp)          # 1-byte Spill
.LBB43_2:
	movb	-21(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1125:
	.size	_ZN5sc_dtgtERKNS_8sc_fxnumES2_, .Ltmp1125-_ZN5sc_dtgtERKNS_8sc_fxnumES2_
	.cfi_endproc

	.section	.text._ZN5sc_dtltERKNS_8sc_fxnumES2_,"axG",@progbits,_ZN5sc_dtltERKNS_8sc_fxnumES2_,comdat
	.weak	_ZN5sc_dtltERKNS_8sc_fxnumES2_
	.align	16, 0x90
	.type	_ZN5sc_dtltERKNS_8sc_fxnumES2_,@function
_ZN5sc_dtltERKNS_8sc_fxnumES2_:         # @_ZN5sc_dtltERKNS_8sc_fxnumES2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1128:
	.cfi_def_cfa_offset 16
.Ltmp1129:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1130:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	callq	_ZN5sc_dt12cmp_scfx_repERKNS_8scfx_repES2_
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	setl	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1131:
	.size	_ZN5sc_dtltERKNS_8sc_fxnumES2_, .Ltmp1131-_ZN5sc_dtltERKNS_8sc_fxnumES2_
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1134:
	.cfi_def_cfa_offset 16
.Ltmp1135:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1136:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1137:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE, .Ltmp1137-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dtmlERKNS_8sc_fxnumES2_,"axG",@progbits,_ZN5sc_dtmlERKNS_8sc_fxnumES2_,comdat
	.weak	_ZN5sc_dtmlERKNS_8sc_fxnumES2_
	.align	16, 0x90
	.type	_ZN5sc_dtmlERKNS_8sc_fxnumES2_,@function
_ZN5sc_dtmlERKNS_8sc_fxnumES2_:         # @_ZN5sc_dtmlERKNS_8sc_fxnumES2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1140:
	.cfi_def_cfa_offset 16
.Ltmp1141:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1142:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	movl	$1024, %ecx             # imm = 0x400
	movq	%rsi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movl	%ecx, %edx
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1143:
	.size	_ZN5sc_dtmlERKNS_8sc_fxnumES2_, .Ltmp1143-_ZN5sc_dtmlERKNS_8sc_fxnumES2_
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxvalD1Ev,"axG",@progbits,_ZN5sc_dt8sc_fxvalD1Ev,comdat
	.weak	_ZN5sc_dt8sc_fxvalD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxvalD1Ev,@function
_ZN5sc_dt8sc_fxvalD1Ev:                 # @_ZN5sc_dt8sc_fxvalD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1146:
	.cfi_def_cfa_offset 16
.Ltmp1147:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1148:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1149:
	.size	_ZN5sc_dt8sc_fxvalD1Ev, .Ltmp1149-_ZN5sc_dt8sc_fxvalD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1152:
	.cfi_def_cfa_offset 16
.Ltmp1153:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1154:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_fixpLERKNS_8sc_fxnumE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1155:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE, .Ltmp1155-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1158:
	.cfi_def_cfa_offset 16
.Ltmp1159:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1160:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movsd	-16(%rbp), %xmm0
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_fixaSEd
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1161:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd, .Ltmp1161-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEd
	.cfi_endproc

	.section	.text._ZN5sc_dtmiERKNS_8sc_fxnumES2_,"axG",@progbits,_ZN5sc_dtmiERKNS_8sc_fxnumES2_,comdat
	.weak	_ZN5sc_dtmiERKNS_8sc_fxnumES2_
	.align	16, 0x90
	.type	_ZN5sc_dtmiERKNS_8sc_fxnumES2_,@function
_ZN5sc_dtmiERKNS_8sc_fxnumES2_:         # @_ZN5sc_dtmiERKNS_8sc_fxnumES2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1164:
	.cfi_def_cfa_offset 16
.Ltmp1165:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1166:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	movl	$1024, %ecx             # imm = 0x400
	movq	%rsi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movl	%ecx, %edx
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sub_scfx_repERKNS_8scfx_repES2_i
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1167:
	.size	_ZN5sc_dtmiERKNS_8sc_fxnumES2_, .Ltmp1167-_ZN5sc_dtmiERKNS_8sc_fxnumES2_
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1170:
	.cfi_def_cfa_offset 16
.Ltmp1171:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1172:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_fixmIERKNS_8sc_fxvalE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1173:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE, .Ltmp1173-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEmIERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE,@function
_ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE: # @_ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1176:
	.cfi_def_cfa_offset 16
.Ltmp1177:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1178:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
	movl	$1024, %edx             # imm = 0x400
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rax, %rdi
	callq	_ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1179:
	.size	_ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE, .Ltmp1179-_ZN5sc_dtmlERKNS_8sc_fxvalERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dtdvERKNS_8sc_fxnumEj,"axG",@progbits,_ZN5sc_dtdvERKNS_8sc_fxnumEj,comdat
	.weak	_ZN5sc_dtdvERKNS_8sc_fxnumEj
	.align	16, 0x90
	.type	_ZN5sc_dtdvERKNS_8sc_fxnumEj,@function
_ZN5sc_dtdvERKNS_8sc_fxnumEj:           # @_ZN5sc_dtdvERKNS_8sc_fxnumEj
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin53:
	.cfi_lsda 3, .Lexception53
# BB#0:
	pushq	%rbp
.Ltmp1192:
	.cfi_def_cfa_offset 16
.Ltmp1193:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1194:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movl	%edx, -12(%rbp)
	leaq	-32(%rbp), %rsi
	xorl	%ecx, %ecx
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	movl	%edx, %esi
	movq	%rcx, %rdx
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
.Ltmp1180:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
.Ltmp1181:
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB53_1
.LBB53_1:
.Ltmp1182:
	movl	$64, %edx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	-88(%rbp), %rsi         # 8-byte Reload
	callq	_ZN5sc_dt12div_scfx_repERKNS_8scfx_repES2_i
.Ltmp1183:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB53_2
.LBB53_2:
.Ltmp1184:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	callq	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
.Ltmp1185:
	jmp	.LBB53_3
.LBB53_3:
	leaq	-32(%rbp), %rdi
	movl	$1, -48(%rbp)
	callq	_ZN5sc_dt8sc_fxvalD1Ev
	addq	$112, %rsp
	popq	%rbp
	ret
.LBB53_4:
.Ltmp1186:
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
.Ltmp1187:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp1188:
	jmp	.LBB53_5
.LBB53_5:
	jmp	.LBB53_6
.LBB53_6:
	movq	-40(%rbp), %rdi
	callq	_Unwind_Resume
.LBB53_7:
.Ltmp1189:
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1195:
	.size	_ZN5sc_dtdvERKNS_8sc_fxnumEj, .Ltmp1195-_ZN5sc_dtdvERKNS_8sc_fxnumEj
	.cfi_endproc
.Leh_func_end53:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table53:
.Lexception53:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset403 = .Leh_func_begin53-.Leh_func_begin53 # >> Call Site 1 <<
	.long	.Lset403
.Lset404 = .Ltmp1180-.Leh_func_begin53  #   Call between .Leh_func_begin53 and .Ltmp1180
	.long	.Lset404
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset405 = .Ltmp1180-.Leh_func_begin53  # >> Call Site 2 <<
	.long	.Lset405
.Lset406 = .Ltmp1185-.Ltmp1180          #   Call between .Ltmp1180 and .Ltmp1185
	.long	.Lset406
.Lset407 = .Ltmp1186-.Leh_func_begin53  #     jumps to .Ltmp1186
	.long	.Lset407
	.byte	0                       #   On action: cleanup
.Lset408 = .Ltmp1185-.Leh_func_begin53  # >> Call Site 3 <<
	.long	.Lset408
.Lset409 = .Ltmp1187-.Ltmp1185          #   Call between .Ltmp1185 and .Ltmp1187
	.long	.Lset409
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset410 = .Ltmp1187-.Leh_func_begin53  # >> Call Site 4 <<
	.long	.Lset410
.Lset411 = .Ltmp1188-.Ltmp1187          #   Call between .Ltmp1187 and .Ltmp1188
	.long	.Lset411
.Lset412 = .Ltmp1189-.Leh_func_begin53  #     jumps to .Ltmp1189
	.long	.Lset412
	.byte	1                       #   On action: 1
.Lset413 = .Ltmp1188-.Leh_func_begin53  # >> Call Site 5 <<
	.long	.Lset413
.Lset414 = .Leh_func_end53-.Ltmp1188    #   Call between .Ltmp1188 and .Leh_func_end53
	.long	.Lset414
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxvalE,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxvalE: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1198:
	.cfi_def_cfa_offset 16
.Ltmp1199:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1200:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_fixpLERKNS_8sc_fxvalE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1201:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxvalE, .Ltmp1201-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEpLERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1204:
	.cfi_def_cfa_offset 16
.Ltmp1205:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1206:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	movq	%rax, %rsi
	addq	$8, %rsi
	movq	8(%rax), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1207:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_, .Ltmp1207-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC1Ei,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC1Ei,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC1Ei
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC1Ei,@function
_ZN5sc_dt7sc_uintILi32EEC1Ei:           # @_ZN5sc_dt7sc_uintILi32EEC1Ei
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1210:
	.cfi_def_cfa_offset 16
.Ltmp1211:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1212:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	_ZN5sc_dt7sc_uintILi32EEC2Ei
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1213:
	.size	_ZN5sc_dt7sc_uintILi32EEC1Ei, .Ltmp1213-_ZN5sc_dt7sc_uintILi32EEC1Ei
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EED1Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EED1Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EED1Ev,@function
_ZN5sc_dt7sc_uintILi32EED1Ev:           # @_ZN5sc_dt7sc_uintILi32EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1216:
	.cfi_def_cfa_offset 16
.Ltmp1217:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1218:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1219:
	.size	_ZN5sc_dt7sc_uintILi32EED1Ev, .Ltmp1219-_ZN5sc_dt7sc_uintILi32EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIbE5writeERKb,"axG",@progbits,_ZN7sc_core8sc_inoutIbE5writeERKb,comdat
	.weak	_ZN7sc_core8sc_inoutIbE5writeERKb
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIbE5writeERKb,@function
_ZN7sc_core8sc_inoutIbE5writeERKb:      # @_ZN7sc_core8sc_inoutIbE5writeERKb
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1222:
	.cfi_def_cfa_offset 16
.Ltmp1223:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1224:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv
	movq	%rax, %rsi
	addq	$8, %rsi
	movq	8(%rax), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1225:
	.size	_ZN7sc_core8sc_inoutIbE5writeERKb, .Ltmp1225-_ZN7sc_core8sc_inoutIbE5writeERKb
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIbE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIbE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIbE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIbE4readEv,@function
_ZNK7sc_core5sc_inIbE4readEv:           # @_ZNK7sc_core5sc_inIbE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1228:
	.cfi_def_cfa_offset 16
.Ltmp1229:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1230:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*56(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1231:
	.size	_ZNK7sc_core5sc_inIbE4readEv, .Ltmp1231-_ZNK7sc_core5sc_inIbE4readEv
	.cfi_endproc

	.text
	.globl	_ZN7WBSlave7receiveEv
	.align	16, 0x90
	.type	_ZN7WBSlave7receiveEv,@function
_ZN7WBSlave7receiveEv:                  # @_ZN7WBSlave7receiveEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin60:
	.cfi_lsda 3, .Lexception60
# BB#0:
	pushq	%rbp
.Ltmp1274:
	.cfi_def_cfa_offset 16
.Ltmp1275:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1276:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	addq	$528, %rax              # imm = 0x210
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	shrq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$672, %rax              # imm = 0x2A0
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	leaq	-40(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZN5sc_dt7sc_uintILi32EEC1ERKS1_
	cmpl	$15, -12(%rbp)
	ja	.LBB60_14
# BB#1:
.Ltmp1250:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave15gen_select_maskEv
.Ltmp1251:
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB60_2
.LBB60_2:
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %ecx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movl	1928(%rdx,%rcx,4), %esi
	notl	%eax
	andl	%eax, %esi
	movl	%esi, %ecx
	leaq	-40(%rbp), %rdi
.Ltmp1252:
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp1253:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB60_3
.LBB60_3:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	-44(%rbp), %edx
	andl	%edx, %ecx
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movl	%esi, %edx
	orl	%ecx, %edx
	movl	-12(%rbp), %edi
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	%edx, 1928(%r8,%rdi,4)
	addq	$4288, %r8              # imm = 0x10C0
.Ltmp1254:
	movq	%r8, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp1255:
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB60_4
.LBB60_4:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpl	$0, 1928(%rax,%rcx,4)
	jbe	.LBB60_9
# BB#5:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$4288, %rax             # imm = 0x10C0
	movq	-72(%rbp), %rcx         # 8-byte Reload
.Ltmp1256:
	movq	%rax, %rdi
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp1257:
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB60_6
.LBB60_6:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	1928(%rax,%rcx,4), %esi
.Ltmp1258:
	movq	-112(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEi
.Ltmp1259:
	jmp	.LBB60_7
.LBB60_7:
	jmp	.LBB60_9
.LBB60_8:
.Ltmp1268:
	movl	%edx, %ecx
	movq	%rax, -56(%rbp)
	movl	%ecx, -60(%rbp)
.Ltmp1269:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp1270:
	jmp	.LBB60_30
.LBB60_9:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	leaq	-61(%rbp), %rsi
	movb	$1, -61(%rbp)
.Ltmp1260:
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
.Ltmp1261:
	jmp	.LBB60_10
.LBB60_10:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
	movq	-72(%rbp), %rcx         # 8-byte Reload
	addq	$4016, %rcx             # imm = 0xFB0
.Ltmp1262:
	movq	%rcx, %rdi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp1263:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB60_11
.LBB60_11:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	1928(%rax,%rcx,4), %edx
	leaq	-62(%rbp), %rsi
	testl	%edx, %edx
	setne	-62(%rbp)
.Ltmp1264:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
.Ltmp1265:
	jmp	.LBB60_12
.LBB60_12:
.Ltmp1266:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp1267:
	jmp	.LBB60_13
.LBB60_13:
	jmp	.LBB60_29
.LBB60_14:
	cmpl	$64, -12(%rbp)
	jb	.LBB60_28
# BB#15:
	cmpl	$320, -12(%rbp)         # imm = 0x140
	jae	.LBB60_28
# BB#16:
.Ltmp1232:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave15gen_select_maskEv
.Ltmp1233:
	movl	%eax, -140(%rbp)        # 4-byte Spill
	jmp	.LBB60_17
.LBB60_17:
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %ecx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movl	1992(%rdx,%rcx,4), %esi
	notl	%eax
	andl	%eax, %esi
	movl	%esi, %ecx
	leaq	-40(%rbp), %rdi
.Ltmp1234:
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp1235:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB60_18
.LBB60_18:
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	-44(%rbp), %edx
	andl	%edx, %ecx
	movq	-152(%rbp), %rsi        # 8-byte Reload
	movl	%esi, %edx
	orl	%ecx, %edx
	movl	-12(%rbp), %edi
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	%edx, 1992(%r8,%rdi,4)
	addq	$4288, %r8              # imm = 0x10C0
.Ltmp1236:
	movq	%r8, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp1237:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB60_19
.LBB60_19:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpl	$0, 1928(%rax,%rcx,4)
	jbe	.LBB60_23
# BB#20:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$4288, %rax             # imm = 0x10C0
	movq	-72(%rbp), %rcx         # 8-byte Reload
.Ltmp1238:
	movq	%rax, %rdi
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp1239:
	movq	%rax, -184(%rbp)        # 8-byte Spill
	jmp	.LBB60_21
.LBB60_21:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-184(%rbp), %rcx        # 8-byte Reload
	movl	1928(%rax,%rcx,4), %esi
.Ltmp1240:
	movq	-176(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEi
.Ltmp1241:
	jmp	.LBB60_22
.LBB60_22:
	jmp	.LBB60_23
.LBB60_23:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	leaq	-63(%rbp), %rsi
	movb	$1, -63(%rbp)
.Ltmp1242:
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
.Ltmp1243:
	jmp	.LBB60_24
.LBB60_24:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
	movq	-72(%rbp), %rcx         # 8-byte Reload
	addq	$4016, %rcx             # imm = 0xFB0
.Ltmp1244:
	movq	%rcx, %rdi
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp1245:
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB60_25
.LBB60_25:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movl	1928(%rax,%rcx,4), %edx
	leaq	-64(%rbp), %rsi
	testl	%edx, %edx
	setne	-64(%rbp)
.Ltmp1246:
	movq	-192(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
.Ltmp1247:
	jmp	.LBB60_26
.LBB60_26:
.Ltmp1248:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp1249:
	jmp	.LBB60_27
.LBB60_27:
	jmp	.LBB60_28
.LBB60_28:
	jmp	.LBB60_29
.LBB60_29:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
	addq	$224, %rsp
	popq	%rbp
	ret
.LBB60_30:
	jmp	.LBB60_31
.LBB60_31:
	movq	-56(%rbp), %rdi
	callq	_Unwind_Resume
.LBB60_32:
.Ltmp1271:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1277:
	.size	_ZN7WBSlave7receiveEv, .Ltmp1277-_ZN7WBSlave7receiveEv
	.cfi_endproc
.Leh_func_end60:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table60:
.Lexception60:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset415 = .Leh_func_begin60-.Leh_func_begin60 # >> Call Site 1 <<
	.long	.Lset415
.Lset416 = .Ltmp1250-.Leh_func_begin60  #   Call between .Leh_func_begin60 and .Ltmp1250
	.long	.Lset416
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset417 = .Ltmp1250-.Leh_func_begin60  # >> Call Site 2 <<
	.long	.Lset417
.Lset418 = .Ltmp1259-.Ltmp1250          #   Call between .Ltmp1250 and .Ltmp1259
	.long	.Lset418
.Lset419 = .Ltmp1268-.Leh_func_begin60  #     jumps to .Ltmp1268
	.long	.Lset419
	.byte	0                       #   On action: cleanup
.Lset420 = .Ltmp1269-.Leh_func_begin60  # >> Call Site 3 <<
	.long	.Lset420
.Lset421 = .Ltmp1270-.Ltmp1269          #   Call between .Ltmp1269 and .Ltmp1270
	.long	.Lset421
.Lset422 = .Ltmp1271-.Leh_func_begin60  #     jumps to .Ltmp1271
	.long	.Lset422
	.byte	1                       #   On action: 1
.Lset423 = .Ltmp1260-.Leh_func_begin60  # >> Call Site 4 <<
	.long	.Lset423
.Lset424 = .Ltmp1249-.Ltmp1260          #   Call between .Ltmp1260 and .Ltmp1249
	.long	.Lset424
.Lset425 = .Ltmp1268-.Leh_func_begin60  #     jumps to .Ltmp1268
	.long	.Lset425
	.byte	0                       #   On action: cleanup
.Lset426 = .Ltmp1249-.Leh_func_begin60  # >> Call Site 5 <<
	.long	.Lset426
.Lset427 = .Leh_func_end60-.Ltmp1249    #   Call between .Ltmp1249 and .Leh_func_end60
	.long	.Lset427
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.text
	.globl	_ZN7WBSlave4sendEv
	.align	16, 0x90
	.type	_ZN7WBSlave4sendEv,@function
_ZN7WBSlave4sendEv:                     # @_ZN7WBSlave4sendEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin61:
	.cfi_lsda 3, .Lexception61
# BB#0:
	pushq	%rbp
.Ltmp1291:
	.cfi_def_cfa_offset 16
.Ltmp1292:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1293:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	addq	$528, %rax              # imm = 0x210
	movq	%rdi, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	shrq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	cmpl	$15, -12(%rbp)
	ja	.LBB61_7
# BB#1:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave15gen_select_maskEv
	movl	%eax, -16(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	addq	$1440, %rdi             # imm = 0x5A0
	movl	-12(%rbp), %ecx
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movl	1928(%rdx,%rcx,4), %esi
	andl	%eax, %esi
	leaq	-40(%rbp), %rcx
	movq	%rdi, -104(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi32EEC1Ej
.Ltmp1283:
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
.Ltmp1284:
	jmp	.LBB61_2
.LBB61_2:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
	movq	-96(%rbp), %rdi         # 8-byte Reload
	addq	$4288, %rdi             # imm = 0x10C0
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	jbe	.LBB61_6
# BB#3:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	addq	$4288, %rcx             # imm = 0x10C0
	movq	%rcx, %rdi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	1928(%rcx,%rax,4), %esi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEi
	jmp	.LBB61_6
.LBB61_4:
.Ltmp1285:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp1286:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp1287:
	jmp	.LBB61_5
.LBB61_5:
	jmp	.LBB61_17
.LBB61_6:
	leaq	-53(%rbp), %rsi
	movq	-96(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	movb	$1, -53(%rbp)
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-96(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
	movq	-96(%rbp), %rsi         # 8-byte Reload
	addq	$4016, %rsi             # imm = 0xFB0
	movq	%rsi, %rdi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	leaq	-54(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	setne	%cl
	andb	$1, %cl
	movb	%cl, -54(%rbp)
	movq	-128(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB61_16
.LBB61_7:
	cmpl	$64, -12(%rbp)
	jb	.LBB61_15
# BB#8:
	cmpl	$320, -12(%rbp)         # imm = 0x140
	jae	.LBB61_15
# BB#9:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave15gen_select_maskEv
	movl	%eax, -16(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	addq	$1440, %rdi             # imm = 0x5A0
	movl	-12(%rbp), %ecx
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movl	1992(%rdx,%rcx,4), %esi
	andl	%eax, %esi
	leaq	-80(%rbp), %rcx
	movq	%rdi, -136(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi32EEC1Ej
.Ltmp1278:
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
.Ltmp1279:
	jmp	.LBB61_10
.LBB61_10:
	leaq	-80(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
	movq	-96(%rbp), %rdi         # 8-byte Reload
	addq	$4288, %rdi             # imm = 0x10C0
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	jbe	.LBB61_14
# BB#11:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	addq	$4288, %rcx             # imm = 0x10C0
	movq	%rcx, %rdi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	1928(%rcx,%rax,4), %esi
	movq	-152(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEi
	jmp	.LBB61_14
.LBB61_12:
.Ltmp1280:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp1281:
	leaq	-80(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp1282:
	jmp	.LBB61_13
.LBB61_13:
	jmp	.LBB61_17
.LBB61_14:
	leaq	-81(%rbp), %rsi
	movq	-96(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	movb	$1, -81(%rbp)
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-96(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
	movq	-96(%rbp), %rsi         # 8-byte Reload
	addq	$4016, %rsi             # imm = 0xFB0
	movq	%rsi, %rdi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	leaq	-82(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	setne	%cl
	andb	$1, %cl
	movb	%cl, -82(%rbp)
	movq	-160(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
.LBB61_15:
	jmp	.LBB61_16
.LBB61_16:
	addq	$176, %rsp
	popq	%rbp
	ret
.LBB61_17:
	movq	-48(%rbp), %rdi
	callq	_Unwind_Resume
.LBB61_18:
.Ltmp1288:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1294:
	.size	_ZN7WBSlave4sendEv, .Ltmp1294-_ZN7WBSlave4sendEv
	.cfi_endproc
.Leh_func_end61:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table61:
.Lexception61:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	125                     # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	117                     # Call site table length
.Lset428 = .Leh_func_begin61-.Leh_func_begin61 # >> Call Site 1 <<
	.long	.Lset428
.Lset429 = .Ltmp1283-.Leh_func_begin61  #   Call between .Leh_func_begin61 and .Ltmp1283
	.long	.Lset429
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset430 = .Ltmp1283-.Leh_func_begin61  # >> Call Site 2 <<
	.long	.Lset430
.Lset431 = .Ltmp1284-.Ltmp1283          #   Call between .Ltmp1283 and .Ltmp1284
	.long	.Lset431
.Lset432 = .Ltmp1285-.Leh_func_begin61  #     jumps to .Ltmp1285
	.long	.Lset432
	.byte	0                       #   On action: cleanup
.Lset433 = .Ltmp1284-.Leh_func_begin61  # >> Call Site 3 <<
	.long	.Lset433
.Lset434 = .Ltmp1286-.Ltmp1284          #   Call between .Ltmp1284 and .Ltmp1286
	.long	.Lset434
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset435 = .Ltmp1286-.Leh_func_begin61  # >> Call Site 4 <<
	.long	.Lset435
.Lset436 = .Ltmp1287-.Ltmp1286          #   Call between .Ltmp1286 and .Ltmp1287
	.long	.Lset436
.Lset437 = .Ltmp1288-.Leh_func_begin61  #     jumps to .Ltmp1288
	.long	.Lset437
	.byte	1                       #   On action: 1
.Lset438 = .Ltmp1287-.Leh_func_begin61  # >> Call Site 5 <<
	.long	.Lset438
.Lset439 = .Ltmp1278-.Ltmp1287          #   Call between .Ltmp1287 and .Ltmp1278
	.long	.Lset439
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset440 = .Ltmp1278-.Leh_func_begin61  # >> Call Site 6 <<
	.long	.Lset440
.Lset441 = .Ltmp1279-.Ltmp1278          #   Call between .Ltmp1278 and .Ltmp1279
	.long	.Lset441
.Lset442 = .Ltmp1280-.Leh_func_begin61  #     jumps to .Ltmp1280
	.long	.Lset442
	.byte	0                       #   On action: cleanup
.Lset443 = .Ltmp1279-.Leh_func_begin61  # >> Call Site 7 <<
	.long	.Lset443
.Lset444 = .Ltmp1281-.Ltmp1279          #   Call between .Ltmp1279 and .Ltmp1281
	.long	.Lset444
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset445 = .Ltmp1281-.Leh_func_begin61  # >> Call Site 8 <<
	.long	.Lset445
.Lset446 = .Ltmp1282-.Ltmp1281          #   Call between .Ltmp1281 and .Ltmp1282
	.long	.Lset446
.Lset447 = .Ltmp1288-.Leh_func_begin61  #     jumps to .Ltmp1288
	.long	.Lset447
	.byte	1                       #   On action: 1
.Lset448 = .Ltmp1282-.Leh_func_begin61  # >> Call Site 9 <<
	.long	.Lset448
.Lset449 = .Leh_func_end61-.Ltmp1282    #   Call between .Ltmp1282 and .Leh_func_end61
	.long	.Lset449
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1297:
	.cfi_def_cfa_offset 16
.Ltmp1298:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1299:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1300:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE, .Ltmp1300-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EiPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EiPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EiPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EiPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EiPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EiPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1303:
	.cfi_def_cfa_offset 16
.Ltmp1304:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1305:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	callq	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EiPNS_17sc_fxnum_observerE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1306:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EiPNS_17sc_fxnum_observerE, .Ltmp1306-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC1EiPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1309:
	.cfi_def_cfa_offset 16
.Ltmp1310:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1311:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movl	-12(%rbp), %esi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt6sc_fixaSEj
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1312:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj, .Ltmp1312-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSEj
	.cfi_endproc

	.section	.text._ZN5sc_dtdvERKNS_8sc_fxnumES2_,"axG",@progbits,_ZN5sc_dtdvERKNS_8sc_fxnumES2_,comdat
	.weak	_ZN5sc_dtdvERKNS_8sc_fxnumES2_
	.align	16, 0x90
	.type	_ZN5sc_dtdvERKNS_8sc_fxnumES2_,@function
_ZN5sc_dtdvERKNS_8sc_fxnumES2_:         # @_ZN5sc_dtdvERKNS_8sc_fxnumES2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1315:
	.cfi_def_cfa_offset 16
.Ltmp1316:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1317:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	movl	$64, %ecx
	movq	%rsi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movl	%ecx, %edx
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12div_scfx_repERKNS_8scfx_repES2_i
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1318:
	.size	_ZN5sc_dtdvERKNS_8sc_fxnumES2_, .Ltmp1318-_ZN5sc_dtdvERKNS_8sc_fxnumES2_
	.cfi_endproc

	.section	.text._ZN5sc_dtneERKNS_8sc_fxnumEd,"axG",@progbits,_ZN5sc_dtneERKNS_8sc_fxnumEd,comdat
	.weak	_ZN5sc_dtneERKNS_8sc_fxnumEd
	.align	16, 0x90
	.type	_ZN5sc_dtneERKNS_8sc_fxnumEd,@function
_ZN5sc_dtneERKNS_8sc_fxnumEd:           # @_ZN5sc_dtneERKNS_8sc_fxnumEd
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin66:
	.cfi_lsda 3, .Lexception66
# BB#0:
	pushq	%rbp
.Ltmp1329:
	.cfi_def_cfa_offset 16
.Ltmp1330:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1331:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	leaq	-32(%rbp), %rdi
	xorl	%esi, %esi
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
.Ltmp1319:
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
.Ltmp1320:
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB66_1
.LBB66_1:
.Ltmp1321:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	callq	_ZN5sc_dt12cmp_scfx_repERKNS_8scfx_repES2_
.Ltmp1322:
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB66_2
.LBB66_2:
	leaq	-32(%rbp), %rdi
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	setne	%cl
	movl	$1, -56(%rbp)
	movb	%cl, -85(%rbp)          # 1-byte Spill
	callq	_ZN5sc_dt8sc_fxvalD1Ev
	movb	-85(%rbp), %cl          # 1-byte Reload
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$112, %rsp
	popq	%rbp
	ret
.LBB66_3:
.Ltmp1323:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp1324:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp1325:
	jmp	.LBB66_4
.LBB66_4:
	jmp	.LBB66_5
.LBB66_5:
	movq	-48(%rbp), %rdi
	callq	_Unwind_Resume
.LBB66_6:
.Ltmp1326:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1332:
	.size	_ZN5sc_dtneERKNS_8sc_fxnumEd, .Ltmp1332-_ZN5sc_dtneERKNS_8sc_fxnumEd
	.cfi_endproc
.Leh_func_end66:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table66:
.Lexception66:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset450 = .Leh_func_begin66-.Leh_func_begin66 # >> Call Site 1 <<
	.long	.Lset450
.Lset451 = .Ltmp1319-.Leh_func_begin66  #   Call between .Leh_func_begin66 and .Ltmp1319
	.long	.Lset451
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset452 = .Ltmp1319-.Leh_func_begin66  # >> Call Site 2 <<
	.long	.Lset452
.Lset453 = .Ltmp1322-.Ltmp1319          #   Call between .Ltmp1319 and .Ltmp1322
	.long	.Lset453
.Lset454 = .Ltmp1323-.Leh_func_begin66  #     jumps to .Ltmp1323
	.long	.Lset454
	.byte	0                       #   On action: cleanup
.Lset455 = .Ltmp1322-.Leh_func_begin66  # >> Call Site 3 <<
	.long	.Lset455
.Lset456 = .Ltmp1324-.Ltmp1322          #   Call between .Ltmp1322 and .Ltmp1324
	.long	.Lset456
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset457 = .Ltmp1324-.Leh_func_begin66  # >> Call Site 4 <<
	.long	.Lset457
.Lset458 = .Ltmp1325-.Ltmp1324          #   Call between .Ltmp1324 and .Ltmp1325
	.long	.Lset458
.Lset459 = .Ltmp1326-.Leh_func_begin66  #     jumps to .Ltmp1326
	.long	.Lset459
	.byte	1                       #   On action: 1
.Lset460 = .Ltmp1325-.Leh_func_begin66  # >> Call Site 5 <<
	.long	.Lset460
.Lset461 = .Leh_func_end66-.Ltmp1325    #   Call between .Ltmp1325 and .Leh_func_end66
	.long	.Lset461
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1335:
	.cfi_def_cfa_offset 16
.Ltmp1336:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1337:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1338:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE, .Ltmp1338-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dtgtERKNS_8sc_fxnumEd,"axG",@progbits,_ZN5sc_dtgtERKNS_8sc_fxnumEd,comdat
	.weak	_ZN5sc_dtgtERKNS_8sc_fxnumEd
	.align	16, 0x90
	.type	_ZN5sc_dtgtERKNS_8sc_fxnumEd,@function
_ZN5sc_dtgtERKNS_8sc_fxnumEd:           # @_ZN5sc_dtgtERKNS_8sc_fxnumEd
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin68:
	.cfi_lsda 3, .Lexception68
# BB#0:
	pushq	%rbp
.Ltmp1349:
	.cfi_def_cfa_offset 16
.Ltmp1350:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1351:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	leaq	-32(%rbp), %rdi
	xorl	%esi, %esi
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
.Ltmp1339:
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
.Ltmp1340:
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB68_1
.LBB68_1:
.Ltmp1341:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	callq	_ZN5sc_dt12cmp_scfx_repERKNS_8scfx_repES2_
.Ltmp1342:
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB68_2
.LBB68_2:
	movb	$0, %al
	movl	-84(%rbp), %ecx         # 4-byte Reload
	movl	%ecx, -36(%rbp)
	cmpl	$0, -36(%rbp)
	movb	%al, -85(%rbp)          # 1-byte Spill
	jle	.LBB68_4
# BB#3:
	cmpl	$2, -36(%rbp)
	setne	%al
	movb	%al, -85(%rbp)          # 1-byte Spill
.LBB68_4:
	movb	-85(%rbp), %al          # 1-byte Reload
	leaq	-32(%rbp), %rdi
	movl	$1, -56(%rbp)
	movb	%al, -86(%rbp)          # 1-byte Spill
	callq	_ZN5sc_dt8sc_fxvalD1Ev
	movb	-86(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	addq	$112, %rsp
	popq	%rbp
	ret
.LBB68_5:
.Ltmp1343:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp1344:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp1345:
	jmp	.LBB68_6
.LBB68_6:
	jmp	.LBB68_7
.LBB68_7:
	movq	-48(%rbp), %rdi
	callq	_Unwind_Resume
.LBB68_8:
.Ltmp1346:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1352:
	.size	_ZN5sc_dtgtERKNS_8sc_fxnumEd, .Ltmp1352-_ZN5sc_dtgtERKNS_8sc_fxnumEd
	.cfi_endproc
.Leh_func_end68:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table68:
.Lexception68:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset462 = .Leh_func_begin68-.Leh_func_begin68 # >> Call Site 1 <<
	.long	.Lset462
.Lset463 = .Ltmp1339-.Leh_func_begin68  #   Call between .Leh_func_begin68 and .Ltmp1339
	.long	.Lset463
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset464 = .Ltmp1339-.Leh_func_begin68  # >> Call Site 2 <<
	.long	.Lset464
.Lset465 = .Ltmp1342-.Ltmp1339          #   Call between .Ltmp1339 and .Ltmp1342
	.long	.Lset465
.Lset466 = .Ltmp1343-.Leh_func_begin68  #     jumps to .Ltmp1343
	.long	.Lset466
	.byte	0                       #   On action: cleanup
.Lset467 = .Ltmp1342-.Leh_func_begin68  # >> Call Site 3 <<
	.long	.Lset467
.Lset468 = .Ltmp1344-.Ltmp1342          #   Call between .Ltmp1342 and .Ltmp1344
	.long	.Lset468
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset469 = .Ltmp1344-.Leh_func_begin68  # >> Call Site 4 <<
	.long	.Lset469
.Lset470 = .Ltmp1345-.Ltmp1344          #   Call between .Ltmp1344 and .Ltmp1345
	.long	.Lset470
.Lset471 = .Ltmp1346-.Leh_func_begin68  #     jumps to .Ltmp1346
	.long	.Lset471
	.byte	1                       #   On action: 1
.Lset472 = .Ltmp1345-.Leh_func_begin68  # >> Call Site 5 <<
	.long	.Lset472
.Lset473 = .Leh_func_end68-.Ltmp1345    #   Call between .Ltmp1345 and .Leh_func_end68
	.long	.Lset473
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1355:
	.cfi_def_cfa_offset 16
.Ltmp1356:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1357:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1358:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE, .Ltmp1358-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dtmiERKNS_8sc_fxnumERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dtmiERKNS_8sc_fxnumERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dtmiERKNS_8sc_fxnumERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dtmiERKNS_8sc_fxnumERKNS_8sc_fxvalE,@function
_ZN5sc_dtmiERKNS_8sc_fxnumERKNS_8sc_fxvalE: # @_ZN5sc_dtmiERKNS_8sc_fxnumERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1361:
	.cfi_def_cfa_offset 16
.Ltmp1362:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1363:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
	movl	$1024, %edx             # imm = 0x400
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt12sub_scfx_repERKNS_8scfx_repES2_i
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1364:
	.size	_ZN5sc_dtmiERKNS_8sc_fxnumERKNS_8sc_fxvalE, .Ltmp1364-_ZN5sc_dtmiERKNS_8sc_fxnumERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1367:
	.cfi_def_cfa_offset 16
.Ltmp1368:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1369:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1370:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE, .Ltmp1370-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEaSERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dtplERKNS_8sc_fxvalES2_,"axG",@progbits,_ZN5sc_dtplERKNS_8sc_fxvalES2_,comdat
	.weak	_ZN5sc_dtplERKNS_8sc_fxvalES2_
	.align	16, 0x90
	.type	_ZN5sc_dtplERKNS_8sc_fxvalES2_,@function
_ZN5sc_dtplERKNS_8sc_fxvalES2_:         # @_ZN5sc_dtplERKNS_8sc_fxvalES2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1373:
	.cfi_def_cfa_offset 16
.Ltmp1374:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1375:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	movl	$1024, %ecx             # imm = 0x400
	movq	%rsi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movl	%ecx, %edx
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12add_scfx_repERKNS_8scfx_repES2_i
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1376:
	.size	_ZN5sc_dtplERKNS_8sc_fxvalES2_, .Ltmp1376-_ZN5sc_dtplERKNS_8sc_fxvalES2_
	.cfi_endproc

	.section	.text._ZN5sc_dtplERKNS_8sc_fxnumERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dtplERKNS_8sc_fxnumERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dtplERKNS_8sc_fxnumERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dtplERKNS_8sc_fxnumERKNS_8sc_fxvalE,@function
_ZN5sc_dtplERKNS_8sc_fxnumERKNS_8sc_fxvalE: # @_ZN5sc_dtplERKNS_8sc_fxnumERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1379:
	.cfi_def_cfa_offset 16
.Ltmp1380:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1381:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
	movl	$1024, %edx             # imm = 0x400
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt12add_scfx_repERKNS_8scfx_repES2_i
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1382:
	.size	_ZN5sc_dtplERKNS_8sc_fxnumERKNS_8sc_fxvalE, .Ltmp1382-_ZN5sc_dtplERKNS_8sc_fxnumERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dtdvERKNS_8sc_fxvalES2_,"axG",@progbits,_ZN5sc_dtdvERKNS_8sc_fxvalES2_,comdat
	.weak	_ZN5sc_dtdvERKNS_8sc_fxvalES2_
	.align	16, 0x90
	.type	_ZN5sc_dtdvERKNS_8sc_fxvalES2_,@function
_ZN5sc_dtdvERKNS_8sc_fxvalES2_:         # @_ZN5sc_dtdvERKNS_8sc_fxvalES2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1385:
	.cfi_def_cfa_offset 16
.Ltmp1386:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1387:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	movl	$64, %ecx
	movq	%rsi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movl	%ecx, %edx
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12div_scfx_repERKNS_8scfx_repES2_i
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1388:
	.size	_ZN5sc_dtdvERKNS_8sc_fxvalES2_, .Ltmp1388-_ZN5sc_dtdvERKNS_8sc_fxvalES2_
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1391:
	.cfi_def_cfa_offset 16
.Ltmp1392:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1393:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1394:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv, .Ltmp1394-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC1ERKS1_,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC1ERKS1_,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC1ERKS1_
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC1ERKS1_,@function
_ZN5sc_dt7sc_uintILi32EEC1ERKS1_:       # @_ZN5sc_dt7sc_uintILi32EEC1ERKS1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1397:
	.cfi_def_cfa_offset 16
.Ltmp1398:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1399:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt7sc_uintILi32EEC2ERKS1_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1400:
	.size	_ZN5sc_dt7sc_uintILi32EEC1ERKS1_, .Ltmp1400-_ZN5sc_dt7sc_uintILi32EEC1ERKS1_
	.cfi_endproc

	.text
	.globl	_ZN7WBSlave15gen_select_maskEv
	.align	16, 0x90
	.type	_ZN7WBSlave15gen_select_maskEv,@function
_ZN7WBSlave15gen_select_maskEv:         # @_ZN7WBSlave15gen_select_maskEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1403:
	.cfi_def_cfa_offset 16
.Ltmp1404:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1405:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	$0, -12(%rbp)
	addq	$1296, %rdi             # imm = 0x510
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB77_1:                               # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB77_6
# BB#2:                                 #   in Loop: Header=BB77_1 Depth=1
	movl	-12(%rbp), %eax
	shll	$8, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB77_4
# BB#3:                                 #   in Loop: Header=BB77_1 Depth=1
	movl	-12(%rbp), %eax
	orl	$255, %eax
	movl	%eax, -12(%rbp)
.LBB77_4:                               #   in Loop: Header=BB77_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
# BB#5:                                 #   in Loop: Header=BB77_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB77_1
.LBB77_6:
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1406:
	.size	_ZN7WBSlave15gen_select_maskEv, .Ltmp1406-_ZN7WBSlave15gen_select_maskEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_module4waitEi,"axG",@progbits,_ZN7sc_core9sc_module4waitEi,comdat
	.weak	_ZN7sc_core9sc_module4waitEi
	.align	16, 0x90
	.type	_ZN7sc_core9sc_module4waitEi,@function
_ZN7sc_core9sc_module4waitEi:           # @_ZN7sc_core9sc_module4waitEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1409:
	.cfi_def_cfa_offset 16
.Ltmp1410:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1411:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	%esi, -16(%rbp)         # 4-byte Spill
	callq	_ZNK7sc_core9sc_object10simcontextEv
	movl	-16(%rbp), %edi         # 4-byte Reload
	movq	%rax, %rsi
	callq	_ZN7sc_core4waitEiPNS_13sc_simcontextE
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1412:
	.size	_ZN7sc_core9sc_module4waitEi, .Ltmp1412-_ZN7sc_core9sc_module4waitEi
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC1Ej,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC1Ej,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC1Ej
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC1Ej,@function
_ZN5sc_dt7sc_uintILi32EEC1Ej:           # @_ZN5sc_dt7sc_uintILi32EEC1Ej
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1415:
	.cfi_def_cfa_offset 16
.Ltmp1416:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1417:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	_ZN5sc_dt7sc_uintILi32EEC2Ej
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1418:
	.size	_ZN5sc_dt7sc_uintILi32EEC1Ej, .Ltmp1418-_ZN5sc_dt7sc_uintILi32EEC1Ej
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1421:
	.cfi_def_cfa_offset 16
.Ltmp1422:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1423:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1424:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv, .Ltmp1424-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observerD1Ev,"axG",@progbits,_ZN5sc_dt17sc_fxval_observerD1Ev,comdat
	.weak	_ZN5sc_dt17sc_fxval_observerD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observerD1Ev,@function
_ZN5sc_dt17sc_fxval_observerD1Ev:       # @_ZN5sc_dt17sc_fxval_observerD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1427:
	.cfi_def_cfa_offset 16
.Ltmp1428:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1429:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt17sc_fxval_observerD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1430:
	.size	_ZN5sc_dt17sc_fxval_observerD1Ev, .Ltmp1430-_ZN5sc_dt17sc_fxval_observerD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observerD0Ev,"axG",@progbits,_ZN5sc_dt17sc_fxval_observerD0Ev,comdat
	.weak	_ZN5sc_dt17sc_fxval_observerD0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observerD0Ev,@function
_ZN5sc_dt17sc_fxval_observerD0Ev:       # @_ZN5sc_dt17sc_fxval_observerD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin82:
	.cfi_lsda 3, .Lexception82
# BB#0:
	pushq	%rbp
.Ltmp1436:
	.cfi_def_cfa_offset 16
.Ltmp1437:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1438:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1431:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt17sc_fxval_observerD1Ev
.Ltmp1432:
	jmp	.LBB82_1
.LBB82_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB82_2:
.Ltmp1433:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1439:
	.size	_ZN5sc_dt17sc_fxval_observerD0Ev, .Ltmp1439-_ZN5sc_dt17sc_fxval_observerD0Ev
	.cfi_endproc
.Leh_func_end82:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table82:
.Lexception82:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset474 = .Ltmp1431-.Leh_func_begin82  # >> Call Site 1 <<
	.long	.Lset474
.Lset475 = .Ltmp1432-.Ltmp1431          #   Call between .Ltmp1431 and .Ltmp1432
	.long	.Lset475
.Lset476 = .Ltmp1433-.Leh_func_begin82  #     jumps to .Ltmp1433
	.long	.Lset476
	.byte	0                       #   On action: cleanup
.Lset477 = .Ltmp1432-.Leh_func_begin82  # >> Call Site 2 <<
	.long	.Lset477
.Lset478 = .Leh_func_end82-.Ltmp1432    #   Call between .Ltmp1432 and .Leh_func_end82
	.long	.Lset478
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE,@function
_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE: # @_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1440:
	.size	_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE, .Ltmp1440-_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE,@function
_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE: # @_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1441:
	.size	_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE, .Ltmp1441-_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE,@function
_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE: # @_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1442:
	.size	_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE, .Ltmp1442-_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observerD1Ev,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observerD1Ev,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observerD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observerD1Ev,@function
_ZN5sc_dt22sc_fxval_fast_observerD1Ev:  # @_ZN5sc_dt22sc_fxval_fast_observerD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1445:
	.cfi_def_cfa_offset 16
.Ltmp1446:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1447:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt22sc_fxval_fast_observerD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1448:
	.size	_ZN5sc_dt22sc_fxval_fast_observerD1Ev, .Ltmp1448-_ZN5sc_dt22sc_fxval_fast_observerD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observerD0Ev,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observerD0Ev,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observerD0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observerD0Ev,@function
_ZN5sc_dt22sc_fxval_fast_observerD0Ev:  # @_ZN5sc_dt22sc_fxval_fast_observerD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin87:
	.cfi_lsda 3, .Lexception87
# BB#0:
	pushq	%rbp
.Ltmp1454:
	.cfi_def_cfa_offset 16
.Ltmp1455:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1456:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1449:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt22sc_fxval_fast_observerD1Ev
.Ltmp1450:
	jmp	.LBB87_1
.LBB87_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB87_2:
.Ltmp1451:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1457:
	.size	_ZN5sc_dt22sc_fxval_fast_observerD0Ev, .Ltmp1457-_ZN5sc_dt22sc_fxval_fast_observerD0Ev
	.cfi_endproc
.Leh_func_end87:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table87:
.Lexception87:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset479 = .Ltmp1449-.Leh_func_begin87  # >> Call Site 1 <<
	.long	.Lset479
.Lset480 = .Ltmp1450-.Ltmp1449          #   Call between .Ltmp1449 and .Ltmp1450
	.long	.Lset480
.Lset481 = .Ltmp1451-.Leh_func_begin87  #     jumps to .Ltmp1451
	.long	.Lset481
	.byte	0                       #   On action: cleanup
.Lset482 = .Ltmp1450-.Leh_func_begin87  # >> Call Site 2 <<
	.long	.Lset482
.Lset483 = .Leh_func_end87-.Ltmp1450    #   Call between .Ltmp1450 and .Leh_func_end87
	.long	.Lset483
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE,@function
_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE: # @_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1458:
	.size	_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE, .Ltmp1458-_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE,@function
_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE: # @_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1459:
	.size	_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE, .Ltmp1459-_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE,@function
_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE: # @_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1460:
	.size	_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE, .Ltmp1460-_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observerD1Ev,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observerD1Ev,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observerD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observerD1Ev,@function
_ZN5sc_dt17sc_fxnum_observerD1Ev:       # @_ZN5sc_dt17sc_fxnum_observerD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1463:
	.cfi_def_cfa_offset 16
.Ltmp1464:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1465:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt17sc_fxnum_observerD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1466:
	.size	_ZN5sc_dt17sc_fxnum_observerD1Ev, .Ltmp1466-_ZN5sc_dt17sc_fxnum_observerD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observerD0Ev,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observerD0Ev,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observerD0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observerD0Ev,@function
_ZN5sc_dt17sc_fxnum_observerD0Ev:       # @_ZN5sc_dt17sc_fxnum_observerD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin92:
	.cfi_lsda 3, .Lexception92
# BB#0:
	pushq	%rbp
.Ltmp1472:
	.cfi_def_cfa_offset 16
.Ltmp1473:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1474:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1467:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt17sc_fxnum_observerD1Ev
.Ltmp1468:
	jmp	.LBB92_1
.LBB92_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB92_2:
.Ltmp1469:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1475:
	.size	_ZN5sc_dt17sc_fxnum_observerD0Ev, .Ltmp1475-_ZN5sc_dt17sc_fxnum_observerD0Ev
	.cfi_endproc
.Leh_func_end92:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table92:
.Lexception92:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset484 = .Ltmp1467-.Leh_func_begin92  # >> Call Site 1 <<
	.long	.Lset484
.Lset485 = .Ltmp1468-.Ltmp1467          #   Call between .Ltmp1467 and .Ltmp1468
	.long	.Lset485
.Lset486 = .Ltmp1469-.Leh_func_begin92  #     jumps to .Ltmp1469
	.long	.Lset486
	.byte	0                       #   On action: cleanup
.Lset487 = .Ltmp1468-.Leh_func_begin92  # >> Call Site 2 <<
	.long	.Lset487
.Lset488 = .Leh_func_end92-.Ltmp1468    #   Call between .Ltmp1468 and .Leh_func_end92
	.long	.Lset488
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE,@function
_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE: # @_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1476:
	.size	_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE, .Ltmp1476-_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE,@function
_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE: # @_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1477:
	.size	_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE, .Ltmp1477-_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE,@function
_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE: # @_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1478:
	.size	_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE, .Ltmp1478-_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observerD1Ev,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observerD1Ev,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev,@function
_ZN5sc_dt22sc_fxnum_fast_observerD1Ev:  # @_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1481:
	.cfi_def_cfa_offset 16
.Ltmp1482:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1483:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt22sc_fxnum_fast_observerD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1484:
	.size	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev, .Ltmp1484-_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observerD0Ev,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observerD0Ev,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observerD0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observerD0Ev,@function
_ZN5sc_dt22sc_fxnum_fast_observerD0Ev:  # @_ZN5sc_dt22sc_fxnum_fast_observerD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin97:
	.cfi_lsda 3, .Lexception97
# BB#0:
	pushq	%rbp
.Ltmp1490:
	.cfi_def_cfa_offset 16
.Ltmp1491:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1492:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1485:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
.Ltmp1486:
	jmp	.LBB97_1
.LBB97_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB97_2:
.Ltmp1487:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1493:
	.size	_ZN5sc_dt22sc_fxnum_fast_observerD0Ev, .Ltmp1493-_ZN5sc_dt22sc_fxnum_fast_observerD0Ev
	.cfi_endproc
.Leh_func_end97:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table97:
.Lexception97:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset489 = .Ltmp1485-.Leh_func_begin97  # >> Call Site 1 <<
	.long	.Lset489
.Lset490 = .Ltmp1486-.Ltmp1485          #   Call between .Ltmp1485 and .Ltmp1486
	.long	.Lset490
.Lset491 = .Ltmp1487-.Leh_func_begin97  #     jumps to .Ltmp1487
	.long	.Lset491
	.byte	0                       #   On action: cleanup
.Lset492 = .Ltmp1486-.Leh_func_begin97  # >> Call Site 2 <<
	.long	.Lset492
.Lset493 = .Leh_func_end97-.Ltmp1486    #   Call between .Ltmp1486 and .Leh_func_end97
	.long	.Lset493
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE,@function
_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE: # @_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1494:
	.size	_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE, .Ltmp1494-_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE,@function
_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE: # @_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1495:
	.size	_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE, .Ltmp1495-_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE,@function
_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE: # @_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1496:
	.size	_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE, .Ltmp1496-_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD1Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD1Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD1Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD1Ev,@function
_ZN7sc_core18sc_process_monitorD1Ev:    # @_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1499:
	.cfi_def_cfa_offset 16
.Ltmp1500:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1501:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core18sc_process_monitorD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1502:
	.size	_ZN7sc_core18sc_process_monitorD1Ev, .Ltmp1502-_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD0Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD0Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD0Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD0Ev,@function
_ZN7sc_core18sc_process_monitorD0Ev:    # @_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin102:
	.cfi_lsda 3, .Lexception102
# BB#0:
	pushq	%rbp
.Ltmp1508:
	.cfi_def_cfa_offset 16
.Ltmp1509:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1510:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1503:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core18sc_process_monitorD1Ev
.Ltmp1504:
	jmp	.LBB102_1
.LBB102_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB102_2:
.Ltmp1505:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1511:
	.size	_ZN7sc_core18sc_process_monitorD0Ev, .Ltmp1511-_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_endproc
.Leh_func_end102:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table102:
.Lexception102:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset494 = .Ltmp1503-.Leh_func_begin102 # >> Call Site 1 <<
	.long	.Lset494
.Lset495 = .Ltmp1504-.Ltmp1503          #   Call between .Ltmp1503 and .Ltmp1504
	.long	.Lset495
.Lset496 = .Ltmp1505-.Leh_func_begin102 #     jumps to .Ltmp1505
	.long	.Lset496
	.byte	0                       #   On action: cleanup
.Lset497 = .Ltmp1504-.Leh_func_begin102 # >> Call Site 2 <<
	.long	.Lset497
.Lset498 = .Leh_func_end102-.Ltmp1504   #   Call between .Ltmp1504 and .Leh_func_end102
	.long	.Lset498
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNK7sc_core9sc_module4kindEv,"axG",@progbits,_ZNK7sc_core9sc_module4kindEv,comdat
	.weak	_ZNK7sc_core9sc_module4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_module4kindEv,@function
_ZNK7sc_core9sc_module4kindEv:          # @_ZNK7sc_core9sc_module4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str17, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1512:
	.size	_ZNK7sc_core9sc_module4kindEv, .Ltmp1512-_ZNK7sc_core9sc_module4kindEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_object16get_child_eventsEv,"axG",@progbits,_ZNK7sc_core9sc_object16get_child_eventsEv,comdat
	.weak	_ZNK7sc_core9sc_object16get_child_eventsEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_object16get_child_eventsEv,@function
_ZNK7sc_core9sc_object16get_child_eventsEv: # @_ZNK7sc_core9sc_object16get_child_eventsEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	addq	$16, %rdi
	movq	%rdi, %rax
	ret
.Ltmp1513:
	.size	_ZNK7sc_core9sc_object16get_child_eventsEv, .Ltmp1513-_ZNK7sc_core9sc_object16get_child_eventsEv
	.cfi_endproc

	.section	.text._ZN7WBSlaveD1Ev,"axG",@progbits,_ZN7WBSlaveD1Ev,comdat
	.weak	_ZN7WBSlaveD1Ev
	.align	16, 0x90
	.type	_ZN7WBSlaveD1Ev,@function
_ZN7WBSlaveD1Ev:                        # @_ZN7WBSlaveD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1516:
	.cfi_def_cfa_offset 16
.Ltmp1517:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1518:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7WBSlaveD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1519:
	.size	_ZN7WBSlaveD1Ev, .Ltmp1519-_ZN7WBSlaveD1Ev
	.cfi_endproc

	.section	.text._ZN7WBSlaveD0Ev,"axG",@progbits,_ZN7WBSlaveD0Ev,comdat
	.weak	_ZN7WBSlaveD0Ev
	.align	16, 0x90
	.type	_ZN7WBSlaveD0Ev,@function
_ZN7WBSlaveD0Ev:                        # @_ZN7WBSlaveD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin106:
	.cfi_lsda 3, .Lexception106
# BB#0:
	pushq	%rbp
.Ltmp1525:
	.cfi_def_cfa_offset 16
.Ltmp1526:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1527:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1520:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7WBSlaveD1Ev
.Ltmp1521:
	jmp	.LBB106_1
.LBB106_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB106_2:
.Ltmp1522:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1528:
	.size	_ZN7WBSlaveD0Ev, .Ltmp1528-_ZN7WBSlaveD0Ev
	.cfi_endproc
.Leh_func_end106:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table106:
.Lexception106:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset499 = .Ltmp1520-.Leh_func_begin106 # >> Call Site 1 <<
	.long	.Lset499
.Lset500 = .Ltmp1521-.Ltmp1520          #   Call between .Ltmp1520 and .Ltmp1521
	.long	.Lset500
.Lset501 = .Ltmp1522-.Leh_func_begin106 #     jumps to .Ltmp1522
	.long	.Lset501
	.byte	0                       #   On action: cleanup
.Lset502 = .Ltmp1521-.Leh_func_begin106 # >> Call Site 2 <<
	.long	.Lset502
.Lset503 = .Leh_func_end106-.Ltmp1521   #   Call between .Ltmp1521 and .Leh_func_end106
	.long	.Lset503
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZThn88_N7WBSlaveD1Ev,"axG",@progbits,_ZThn88_N7WBSlaveD1Ev,comdat
	.weak	_ZThn88_N7WBSlaveD1Ev
	.align	16, 0x90
	.type	_ZThn88_N7WBSlaveD1Ev,@function
_ZThn88_N7WBSlaveD1Ev:                  # @_ZThn88_N7WBSlaveD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1531:
	.cfi_def_cfa_offset 16
.Ltmp1532:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1533:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$-88, %rdi
	callq	_ZN7WBSlaveD1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1534:
	.size	_ZThn88_N7WBSlaveD1Ev, .Ltmp1534-_ZThn88_N7WBSlaveD1Ev
	.cfi_endproc

	.section	.text._ZThn88_N7WBSlaveD0Ev,"axG",@progbits,_ZThn88_N7WBSlaveD0Ev,comdat
	.weak	_ZThn88_N7WBSlaveD0Ev
	.align	16, 0x90
	.type	_ZThn88_N7WBSlaveD0Ev,@function
_ZThn88_N7WBSlaveD0Ev:                  # @_ZThn88_N7WBSlaveD0Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1537:
	.cfi_def_cfa_offset 16
.Ltmp1538:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1539:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$-88, %rdi
	callq	_ZN7WBSlaveD0Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1540:
	.size	_ZThn88_N7WBSlaveD0Ev, .Ltmp1540-_ZThn88_N7WBSlaveD0Ev
	.cfi_endproc

	.section	.text._ZN7WBSlaveD2Ev,"axG",@progbits,_ZN7WBSlaveD2Ev,comdat
	.weak	_ZN7WBSlaveD2Ev
	.align	16, 0x90
	.type	_ZN7WBSlaveD2Ev,@function
_ZN7WBSlaveD2Ev:                        # @_ZN7WBSlaveD2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin109:
	.cfi_lsda 3, .Lexception109
# BB#0:
	pushq	%rbp
.Ltmp1664:
	.cfi_def_cfa_offset 16
.Ltmp1665:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1666:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTV7WBSlave+16, (%rdi)
	movq	$_ZTV7WBSlave+176, 88(%rdi)
	movq	%rdi, %rax
	addq	$4312, %rax             # imm = 0x10D8
.Ltmp1541:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1542:
	jmp	.LBB109_1
.LBB109_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4288, %rax             # imm = 0x10C0
.Ltmp1546:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1547:
	jmp	.LBB109_2
.LBB109_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4264, %rax             # imm = 0x10A8
.Ltmp1551:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1552:
	jmp	.LBB109_3
.LBB109_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4240, %rax             # imm = 0x1090
.Ltmp1556:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1557:
	jmp	.LBB109_4
.LBB109_4:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4216, %rax             # imm = 0x1078
.Ltmp1561:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1562:
	jmp	.LBB109_5
.LBB109_5:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4192, %rax             # imm = 0x1060
.Ltmp1566:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1567:
	jmp	.LBB109_6
.LBB109_6:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4168, %rax             # imm = 0x1048
.Ltmp1571:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1572:
	jmp	.LBB109_7
.LBB109_7:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp1576:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp1577:
	jmp	.LBB109_8
.LBB109_8:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp1581:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp1582:
	jmp	.LBB109_9
.LBB109_9:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
.Ltmp1586:
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1587:
	jmp	.LBB109_10
.LBB109_10:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
.Ltmp1591:
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1592:
	jmp	.LBB109_11
.LBB109_11:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4016, %rax             # imm = 0xFB0
.Ltmp1596:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1597:
	jmp	.LBB109_12
.LBB109_12:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
.Ltmp1601:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1602:
	jmp	.LBB109_13
.LBB109_13:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
.Ltmp1606:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp1607:
	jmp	.LBB109_14
.LBB109_14:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
.Ltmp1611:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp1612:
	jmp	.LBB109_15
.LBB109_15:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1440, %rax             # imm = 0x5A0
.Ltmp1616:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp1617:
	jmp	.LBB109_16
.LBB109_16:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1296, %rax             # imm = 0x510
.Ltmp1621:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
.Ltmp1622:
	jmp	.LBB109_17
.LBB109_17:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1136, %rax             # imm = 0x470
.Ltmp1626:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1627:
	jmp	.LBB109_18
.LBB109_18:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$976, %rax              # imm = 0x3D0
.Ltmp1631:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1632:
	jmp	.LBB109_19
.LBB109_19:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$816, %rax              # imm = 0x330
.Ltmp1636:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1637:
	jmp	.LBB109_20
.LBB109_20:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$672, %rax              # imm = 0x2A0
.Ltmp1641:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp1642:
	jmp	.LBB109_21
.LBB109_21:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$528, %rax              # imm = 0x210
.Ltmp1646:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp1647:
	jmp	.LBB109_22
.LBB109_22:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp1651:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1652:
	jmp	.LBB109_23
.LBB109_23:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$208, %rax
.Ltmp1656:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1657:
	jmp	.LBB109_24
.LBB109_24:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_moduleD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB109_25:
.Ltmp1543:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4288, %rax             # imm = 0x10C0
.Ltmp1544:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1545:
	jmp	.LBB109_27
.LBB109_26:
.Ltmp1548:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_29
.LBB109_27:
	jmp	.LBB109_29
.LBB109_28:
.Ltmp1553:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_32
.LBB109_29:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4264, %rax             # imm = 0x10A8
.Ltmp1549:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1550:
	jmp	.LBB109_30
.LBB109_30:
	jmp	.LBB109_32
.LBB109_31:
.Ltmp1558:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_35
.LBB109_32:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4240, %rax             # imm = 0x1090
.Ltmp1554:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1555:
	jmp	.LBB109_33
.LBB109_33:
	jmp	.LBB109_35
.LBB109_34:
.Ltmp1563:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_38
.LBB109_35:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4216, %rax             # imm = 0x1078
.Ltmp1559:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1560:
	jmp	.LBB109_36
.LBB109_36:
	jmp	.LBB109_38
.LBB109_37:
.Ltmp1568:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_41
.LBB109_38:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4192, %rax             # imm = 0x1060
.Ltmp1564:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1565:
	jmp	.LBB109_39
.LBB109_39:
	jmp	.LBB109_41
.LBB109_40:
.Ltmp1573:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_44
.LBB109_41:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4168, %rax             # imm = 0x1048
.Ltmp1569:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1570:
	jmp	.LBB109_42
.LBB109_42:
	jmp	.LBB109_44
.LBB109_43:
.Ltmp1578:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_47
.LBB109_44:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp1574:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp1575:
	jmp	.LBB109_45
.LBB109_45:
	jmp	.LBB109_47
.LBB109_46:
.Ltmp1583:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_50
.LBB109_47:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp1579:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp1580:
	jmp	.LBB109_48
.LBB109_48:
	jmp	.LBB109_50
.LBB109_49:
.Ltmp1588:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_53
.LBB109_50:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4080, %rax             # imm = 0xFF0
.Ltmp1584:
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1585:
	jmp	.LBB109_51
.LBB109_51:
	jmp	.LBB109_53
.LBB109_52:
.Ltmp1593:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_56
.LBB109_53:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4040, %rax             # imm = 0xFC8
.Ltmp1589:
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED1Ev
.Ltmp1590:
	jmp	.LBB109_54
.LBB109_54:
	jmp	.LBB109_56
.LBB109_55:
.Ltmp1598:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_59
.LBB109_56:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4016, %rax             # imm = 0xFB0
.Ltmp1594:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1595:
	jmp	.LBB109_57
.LBB109_57:
	jmp	.LBB109_59
.LBB109_58:
.Ltmp1603:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_62
.LBB109_59:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
.Ltmp1599:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp1600:
	jmp	.LBB109_60
.LBB109_60:
	jmp	.LBB109_62
.LBB109_61:
.Ltmp1608:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_65
.LBB109_62:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
.Ltmp1604:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp1605:
	jmp	.LBB109_63
.LBB109_63:
	jmp	.LBB109_65
.LBB109_64:
.Ltmp1613:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_68
.LBB109_65:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
.Ltmp1609:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp1610:
	jmp	.LBB109_66
.LBB109_66:
	jmp	.LBB109_68
.LBB109_67:
.Ltmp1618:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_71
.LBB109_68:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1440, %rax             # imm = 0x5A0
.Ltmp1614:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp1615:
	jmp	.LBB109_69
.LBB109_69:
	jmp	.LBB109_71
.LBB109_70:
.Ltmp1623:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_74
.LBB109_71:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1296, %rax             # imm = 0x510
.Ltmp1619:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
.Ltmp1620:
	jmp	.LBB109_72
.LBB109_72:
	jmp	.LBB109_74
.LBB109_73:
.Ltmp1628:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_77
.LBB109_74:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1136, %rax             # imm = 0x470
.Ltmp1624:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1625:
	jmp	.LBB109_75
.LBB109_75:
	jmp	.LBB109_77
.LBB109_76:
.Ltmp1633:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_80
.LBB109_77:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$976, %rax              # imm = 0x3D0
.Ltmp1629:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1630:
	jmp	.LBB109_78
.LBB109_78:
	jmp	.LBB109_80
.LBB109_79:
.Ltmp1638:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_83
.LBB109_80:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$816, %rax              # imm = 0x330
.Ltmp1634:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1635:
	jmp	.LBB109_81
.LBB109_81:
	jmp	.LBB109_83
.LBB109_82:
.Ltmp1643:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_86
.LBB109_83:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$672, %rax              # imm = 0x2A0
.Ltmp1639:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp1640:
	jmp	.LBB109_84
.LBB109_84:
	jmp	.LBB109_86
.LBB109_85:
.Ltmp1648:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_89
.LBB109_86:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$528, %rax              # imm = 0x210
.Ltmp1644:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp1645:
	jmp	.LBB109_87
.LBB109_87:
	jmp	.LBB109_89
.LBB109_88:
.Ltmp1653:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_92
.LBB109_89:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp1649:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1650:
	jmp	.LBB109_90
.LBB109_90:
	jmp	.LBB109_92
.LBB109_91:
.Ltmp1658:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB109_94
.LBB109_92:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$208, %rax
.Ltmp1654:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp1655:
	jmp	.LBB109_93
.LBB109_93:
	jmp	.LBB109_94
.LBB109_94:
.Ltmp1659:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core9sc_moduleD2Ev
.Ltmp1660:
	jmp	.LBB109_95
.LBB109_95:
	jmp	.LBB109_96
.LBB109_96:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB109_97:
.Ltmp1661:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1667:
	.size	_ZN7WBSlaveD2Ev, .Ltmp1667-_ZN7WBSlaveD2Ev
	.cfi_endproc
.Leh_func_end109:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table109:
.Lexception109:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.ascii	 "\350\002"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.ascii	 "\337\002"             # Call site table length
.Lset504 = .Ltmp1541-.Leh_func_begin109 # >> Call Site 1 <<
	.long	.Lset504
.Lset505 = .Ltmp1542-.Ltmp1541          #   Call between .Ltmp1541 and .Ltmp1542
	.long	.Lset505
.Lset506 = .Ltmp1543-.Leh_func_begin109 #     jumps to .Ltmp1543
	.long	.Lset506
	.byte	0                       #   On action: cleanup
.Lset507 = .Ltmp1546-.Leh_func_begin109 # >> Call Site 2 <<
	.long	.Lset507
.Lset508 = .Ltmp1547-.Ltmp1546          #   Call between .Ltmp1546 and .Ltmp1547
	.long	.Lset508
.Lset509 = .Ltmp1548-.Leh_func_begin109 #     jumps to .Ltmp1548
	.long	.Lset509
	.byte	0                       #   On action: cleanup
.Lset510 = .Ltmp1551-.Leh_func_begin109 # >> Call Site 3 <<
	.long	.Lset510
.Lset511 = .Ltmp1552-.Ltmp1551          #   Call between .Ltmp1551 and .Ltmp1552
	.long	.Lset511
.Lset512 = .Ltmp1553-.Leh_func_begin109 #     jumps to .Ltmp1553
	.long	.Lset512
	.byte	0                       #   On action: cleanup
.Lset513 = .Ltmp1556-.Leh_func_begin109 # >> Call Site 4 <<
	.long	.Lset513
.Lset514 = .Ltmp1557-.Ltmp1556          #   Call between .Ltmp1556 and .Ltmp1557
	.long	.Lset514
.Lset515 = .Ltmp1558-.Leh_func_begin109 #     jumps to .Ltmp1558
	.long	.Lset515
	.byte	0                       #   On action: cleanup
.Lset516 = .Ltmp1561-.Leh_func_begin109 # >> Call Site 5 <<
	.long	.Lset516
.Lset517 = .Ltmp1562-.Ltmp1561          #   Call between .Ltmp1561 and .Ltmp1562
	.long	.Lset517
.Lset518 = .Ltmp1563-.Leh_func_begin109 #     jumps to .Ltmp1563
	.long	.Lset518
	.byte	0                       #   On action: cleanup
.Lset519 = .Ltmp1566-.Leh_func_begin109 # >> Call Site 6 <<
	.long	.Lset519
.Lset520 = .Ltmp1567-.Ltmp1566          #   Call between .Ltmp1566 and .Ltmp1567
	.long	.Lset520
.Lset521 = .Ltmp1568-.Leh_func_begin109 #     jumps to .Ltmp1568
	.long	.Lset521
	.byte	0                       #   On action: cleanup
.Lset522 = .Ltmp1571-.Leh_func_begin109 # >> Call Site 7 <<
	.long	.Lset522
.Lset523 = .Ltmp1572-.Ltmp1571          #   Call between .Ltmp1571 and .Ltmp1572
	.long	.Lset523
.Lset524 = .Ltmp1573-.Leh_func_begin109 #     jumps to .Ltmp1573
	.long	.Lset524
	.byte	0                       #   On action: cleanup
.Lset525 = .Ltmp1576-.Leh_func_begin109 # >> Call Site 8 <<
	.long	.Lset525
.Lset526 = .Ltmp1577-.Ltmp1576          #   Call between .Ltmp1576 and .Ltmp1577
	.long	.Lset526
.Lset527 = .Ltmp1578-.Leh_func_begin109 #     jumps to .Ltmp1578
	.long	.Lset527
	.byte	0                       #   On action: cleanup
.Lset528 = .Ltmp1581-.Leh_func_begin109 # >> Call Site 9 <<
	.long	.Lset528
.Lset529 = .Ltmp1582-.Ltmp1581          #   Call between .Ltmp1581 and .Ltmp1582
	.long	.Lset529
.Lset530 = .Ltmp1583-.Leh_func_begin109 #     jumps to .Ltmp1583
	.long	.Lset530
	.byte	0                       #   On action: cleanup
.Lset531 = .Ltmp1586-.Leh_func_begin109 # >> Call Site 10 <<
	.long	.Lset531
.Lset532 = .Ltmp1587-.Ltmp1586          #   Call between .Ltmp1586 and .Ltmp1587
	.long	.Lset532
.Lset533 = .Ltmp1588-.Leh_func_begin109 #     jumps to .Ltmp1588
	.long	.Lset533
	.byte	0                       #   On action: cleanup
.Lset534 = .Ltmp1591-.Leh_func_begin109 # >> Call Site 11 <<
	.long	.Lset534
.Lset535 = .Ltmp1592-.Ltmp1591          #   Call between .Ltmp1591 and .Ltmp1592
	.long	.Lset535
.Lset536 = .Ltmp1593-.Leh_func_begin109 #     jumps to .Ltmp1593
	.long	.Lset536
	.byte	0                       #   On action: cleanup
.Lset537 = .Ltmp1596-.Leh_func_begin109 # >> Call Site 12 <<
	.long	.Lset537
.Lset538 = .Ltmp1597-.Ltmp1596          #   Call between .Ltmp1596 and .Ltmp1597
	.long	.Lset538
.Lset539 = .Ltmp1598-.Leh_func_begin109 #     jumps to .Ltmp1598
	.long	.Lset539
	.byte	0                       #   On action: cleanup
.Lset540 = .Ltmp1601-.Leh_func_begin109 # >> Call Site 13 <<
	.long	.Lset540
.Lset541 = .Ltmp1602-.Ltmp1601          #   Call between .Ltmp1601 and .Ltmp1602
	.long	.Lset541
.Lset542 = .Ltmp1603-.Leh_func_begin109 #     jumps to .Ltmp1603
	.long	.Lset542
	.byte	0                       #   On action: cleanup
.Lset543 = .Ltmp1606-.Leh_func_begin109 # >> Call Site 14 <<
	.long	.Lset543
.Lset544 = .Ltmp1607-.Ltmp1606          #   Call between .Ltmp1606 and .Ltmp1607
	.long	.Lset544
.Lset545 = .Ltmp1608-.Leh_func_begin109 #     jumps to .Ltmp1608
	.long	.Lset545
	.byte	0                       #   On action: cleanup
.Lset546 = .Ltmp1611-.Leh_func_begin109 # >> Call Site 15 <<
	.long	.Lset546
.Lset547 = .Ltmp1612-.Ltmp1611          #   Call between .Ltmp1611 and .Ltmp1612
	.long	.Lset547
.Lset548 = .Ltmp1613-.Leh_func_begin109 #     jumps to .Ltmp1613
	.long	.Lset548
	.byte	0                       #   On action: cleanup
.Lset549 = .Ltmp1616-.Leh_func_begin109 # >> Call Site 16 <<
	.long	.Lset549
.Lset550 = .Ltmp1617-.Ltmp1616          #   Call between .Ltmp1616 and .Ltmp1617
	.long	.Lset550
.Lset551 = .Ltmp1618-.Leh_func_begin109 #     jumps to .Ltmp1618
	.long	.Lset551
	.byte	0                       #   On action: cleanup
.Lset552 = .Ltmp1621-.Leh_func_begin109 # >> Call Site 17 <<
	.long	.Lset552
.Lset553 = .Ltmp1622-.Ltmp1621          #   Call between .Ltmp1621 and .Ltmp1622
	.long	.Lset553
.Lset554 = .Ltmp1623-.Leh_func_begin109 #     jumps to .Ltmp1623
	.long	.Lset554
	.byte	0                       #   On action: cleanup
.Lset555 = .Ltmp1626-.Leh_func_begin109 # >> Call Site 18 <<
	.long	.Lset555
.Lset556 = .Ltmp1627-.Ltmp1626          #   Call between .Ltmp1626 and .Ltmp1627
	.long	.Lset556
.Lset557 = .Ltmp1628-.Leh_func_begin109 #     jumps to .Ltmp1628
	.long	.Lset557
	.byte	0                       #   On action: cleanup
.Lset558 = .Ltmp1631-.Leh_func_begin109 # >> Call Site 19 <<
	.long	.Lset558
.Lset559 = .Ltmp1632-.Ltmp1631          #   Call between .Ltmp1631 and .Ltmp1632
	.long	.Lset559
.Lset560 = .Ltmp1633-.Leh_func_begin109 #     jumps to .Ltmp1633
	.long	.Lset560
	.byte	0                       #   On action: cleanup
.Lset561 = .Ltmp1636-.Leh_func_begin109 # >> Call Site 20 <<
	.long	.Lset561
.Lset562 = .Ltmp1637-.Ltmp1636          #   Call between .Ltmp1636 and .Ltmp1637
	.long	.Lset562
.Lset563 = .Ltmp1638-.Leh_func_begin109 #     jumps to .Ltmp1638
	.long	.Lset563
	.byte	0                       #   On action: cleanup
.Lset564 = .Ltmp1641-.Leh_func_begin109 # >> Call Site 21 <<
	.long	.Lset564
.Lset565 = .Ltmp1642-.Ltmp1641          #   Call between .Ltmp1641 and .Ltmp1642
	.long	.Lset565
.Lset566 = .Ltmp1643-.Leh_func_begin109 #     jumps to .Ltmp1643
	.long	.Lset566
	.byte	0                       #   On action: cleanup
.Lset567 = .Ltmp1646-.Leh_func_begin109 # >> Call Site 22 <<
	.long	.Lset567
.Lset568 = .Ltmp1647-.Ltmp1646          #   Call between .Ltmp1646 and .Ltmp1647
	.long	.Lset568
.Lset569 = .Ltmp1648-.Leh_func_begin109 #     jumps to .Ltmp1648
	.long	.Lset569
	.byte	0                       #   On action: cleanup
.Lset570 = .Ltmp1651-.Leh_func_begin109 # >> Call Site 23 <<
	.long	.Lset570
.Lset571 = .Ltmp1652-.Ltmp1651          #   Call between .Ltmp1651 and .Ltmp1652
	.long	.Lset571
.Lset572 = .Ltmp1653-.Leh_func_begin109 #     jumps to .Ltmp1653
	.long	.Lset572
	.byte	0                       #   On action: cleanup
.Lset573 = .Ltmp1656-.Leh_func_begin109 # >> Call Site 24 <<
	.long	.Lset573
.Lset574 = .Ltmp1657-.Ltmp1656          #   Call between .Ltmp1656 and .Ltmp1657
	.long	.Lset574
.Lset575 = .Ltmp1658-.Leh_func_begin109 #     jumps to .Ltmp1658
	.long	.Lset575
	.byte	0                       #   On action: cleanup
.Lset576 = .Ltmp1657-.Leh_func_begin109 # >> Call Site 25 <<
	.long	.Lset576
.Lset577 = .Ltmp1544-.Ltmp1657          #   Call between .Ltmp1657 and .Ltmp1544
	.long	.Lset577
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset578 = .Ltmp1544-.Leh_func_begin109 # >> Call Site 26 <<
	.long	.Lset578
.Lset579 = .Ltmp1660-.Ltmp1544          #   Call between .Ltmp1544 and .Ltmp1660
	.long	.Lset579
.Lset580 = .Ltmp1661-.Leh_func_begin109 #     jumps to .Ltmp1661
	.long	.Lset580
	.byte	1                       #   On action: 1
.Lset581 = .Ltmp1660-.Leh_func_begin109 # >> Call Site 27 <<
	.long	.Lset581
.Lset582 = .Leh_func_end109-.Ltmp1660   #   Call between .Ltmp1660 and .Leh_func_end109
	.long	.Lset582
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1670:
	.cfi_def_cfa_offset 16
.Ltmp1671:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1672:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB110_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str18, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB110_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1673:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv, .Ltmp1673-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC2Ej,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC2Ej,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC2Ej
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC2Ej,@function
_ZN5sc_dt7sc_uintILi32EEC2Ej:           # @_ZN5sc_dt7sc_uintILi32EEC2Ej
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin111:
	.cfi_lsda 3, .Lexception111
# BB#0:
	pushq	%rbp
.Ltmp1682:
	.cfi_def_cfa_offset 16
.Ltmp1683:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1684:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	$32, %esi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_baseC2Ei
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt7sc_uintILi32EEE+16, (%rdi)
	movl	-12(%rbp), %esi
.Ltmp1674:
	callq	_ZN5sc_dt12sc_uint_baseaSEj
.Ltmp1675:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB111_1
.LBB111_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB111_2:
.Ltmp1676:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp1677:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
.Ltmp1678:
	jmp	.LBB111_3
.LBB111_3:
	jmp	.LBB111_4
.LBB111_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB111_5:
.Ltmp1679:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1685:
	.size	_ZN5sc_dt7sc_uintILi32EEC2Ej, .Ltmp1685-_ZN5sc_dt7sc_uintILi32EEC2Ej
	.cfi_endproc
.Leh_func_end111:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table111:
.Lexception111:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset583 = .Leh_func_begin111-.Leh_func_begin111 # >> Call Site 1 <<
	.long	.Lset583
.Lset584 = .Ltmp1674-.Leh_func_begin111 #   Call between .Leh_func_begin111 and .Ltmp1674
	.long	.Lset584
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset585 = .Ltmp1674-.Leh_func_begin111 # >> Call Site 2 <<
	.long	.Lset585
.Lset586 = .Ltmp1675-.Ltmp1674          #   Call between .Ltmp1674 and .Ltmp1675
	.long	.Lset586
.Lset587 = .Ltmp1676-.Leh_func_begin111 #     jumps to .Ltmp1676
	.long	.Lset587
	.byte	0                       #   On action: cleanup
.Lset588 = .Ltmp1677-.Leh_func_begin111 # >> Call Site 3 <<
	.long	.Lset588
.Lset589 = .Ltmp1678-.Ltmp1677          #   Call between .Ltmp1677 and .Ltmp1678
	.long	.Lset589
.Lset590 = .Ltmp1679-.Leh_func_begin111 #     jumps to .Ltmp1679
	.long	.Lset590
	.byte	1                       #   On action: 1
.Lset591 = .Ltmp1678-.Leh_func_begin111 # >> Call Site 4 <<
	.long	.Lset591
.Lset592 = .Leh_func_end111-.Ltmp1678   #   Call between .Ltmp1678 and .Leh_func_end111
	.long	.Lset592
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt12sc_uint_baseC2Ei,"axG",@progbits,_ZN5sc_dt12sc_uint_baseC2Ei,comdat
	.weak	_ZN5sc_dt12sc_uint_baseC2Ei
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseC2Ei,@function
_ZN5sc_dt12sc_uint_baseC2Ei:            # @_ZN5sc_dt12sc_uint_baseC2Ei
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin112:
	.cfi_lsda 3, .Lexception112
# BB#0:
	pushq	%rbp
.Ltmp1694:
	.cfi_def_cfa_offset 16
.Ltmp1695:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1696:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt13sc_value_baseC2Ev
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt12sc_uint_baseE+16, (%rdi)
	movq	$0, 8(%rdi)
	movl	-12(%rbp), %esi
	movl	%esi, 16(%rdi)
	movl	$64, %eax
	subl	%esi, %eax
	movl	%eax, 20(%rdi)
.Ltmp1686:
	callq	_ZNK5sc_dt12sc_uint_base12check_lengthEv
.Ltmp1687:
	jmp	.LBB112_1
.LBB112_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB112_2:
.Ltmp1688:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp1689:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt13sc_value_baseD2Ev
.Ltmp1690:
	jmp	.LBB112_3
.LBB112_3:
	jmp	.LBB112_4
.LBB112_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB112_5:
.Ltmp1691:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1697:
	.size	_ZN5sc_dt12sc_uint_baseC2Ei, .Ltmp1697-_ZN5sc_dt12sc_uint_baseC2Ei
	.cfi_endproc
.Leh_func_end112:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table112:
.Lexception112:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\257\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset593 = .Ltmp1686-.Leh_func_begin112 # >> Call Site 1 <<
	.long	.Lset593
.Lset594 = .Ltmp1687-.Ltmp1686          #   Call between .Ltmp1686 and .Ltmp1687
	.long	.Lset594
.Lset595 = .Ltmp1688-.Leh_func_begin112 #     jumps to .Ltmp1688
	.long	.Lset595
	.byte	0                       #   On action: cleanup
.Lset596 = .Ltmp1689-.Leh_func_begin112 # >> Call Site 2 <<
	.long	.Lset596
.Lset597 = .Ltmp1690-.Ltmp1689          #   Call between .Ltmp1689 and .Ltmp1690
	.long	.Lset597
.Lset598 = .Ltmp1691-.Leh_func_begin112 #     jumps to .Ltmp1691
	.long	.Lset598
	.byte	1                       #   On action: 1
.Lset599 = .Ltmp1690-.Leh_func_begin112 # >> Call Site 3 <<
	.long	.Lset599
.Lset600 = .Leh_func_end112-.Ltmp1690   #   Call between .Ltmp1690 and .Leh_func_end112
	.long	.Lset600
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt12sc_uint_baseaSEj,"axG",@progbits,_ZN5sc_dt12sc_uint_baseaSEj,comdat
	.weak	_ZN5sc_dt12sc_uint_baseaSEj
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseaSEj,@function
_ZN5sc_dt12sc_uint_baseaSEj:            # @_ZN5sc_dt12sc_uint_baseaSEj
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1700:
	.cfi_def_cfa_offset 16
.Ltmp1701:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1702:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %eax
	movq	%rax, 8(%rdi)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_base11extend_signEv
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1703:
	.size	_ZN5sc_dt12sc_uint_baseaSEj, .Ltmp1703-_ZN5sc_dt12sc_uint_baseaSEj
	.cfi_endproc

	.section	.text._ZN5sc_dt12sc_uint_baseD2Ev,"axG",@progbits,_ZN5sc_dt12sc_uint_baseD2Ev,comdat
	.weak	_ZN5sc_dt12sc_uint_baseD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseD2Ev,@function
_ZN5sc_dt12sc_uint_baseD2Ev:            # @_ZN5sc_dt12sc_uint_baseD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1706:
	.cfi_def_cfa_offset 16
.Ltmp1707:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1708:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt13sc_value_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1709:
	.size	_ZN5sc_dt12sc_uint_baseD2Ev, .Ltmp1709-_ZN5sc_dt12sc_uint_baseD2Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev,"axG",@progbits,_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev,comdat
	.weak	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev,@function
_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev: # @_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp1710:
	.size	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev, .Ltmp1710-_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_base13concat_lengthEPb,"axG",@progbits,_ZNK5sc_dt12sc_uint_base13concat_lengthEPb,comdat
	.weak	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb,@function
_ZNK5sc_dt12sc_uint_base13concat_lengthEPb: # @_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1713:
	.cfi_def_cfa_offset 16
.Ltmp1714:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1715:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, -16(%rbp)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	je	.LBB116_2
# BB#1:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
.LBB116_2:
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt12sc_uint_base6lengthEv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1716:
	.size	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb, .Ltmp1716-_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EED0Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EED0Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EED0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EED0Ev,@function
_ZN5sc_dt7sc_uintILi32EED0Ev:           # @_ZN5sc_dt7sc_uintILi32EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin117:
	.cfi_lsda 3, .Lexception117
# BB#0:
	pushq	%rbp
.Ltmp1722:
	.cfi_def_cfa_offset 16
.Ltmp1723:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1724:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1717:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp1718:
	jmp	.LBB117_1
.LBB117_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB117_2:
.Ltmp1719:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1725:
	.size	_ZN5sc_dt7sc_uintILi32EED0Ev, .Ltmp1725-_ZN5sc_dt7sc_uintILi32EED0Ev
	.cfi_endproc
.Leh_func_end117:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table117:
.Lexception117:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset601 = .Ltmp1717-.Leh_func_begin117 # >> Call Site 1 <<
	.long	.Lset601
.Lset602 = .Ltmp1718-.Ltmp1717          #   Call between .Ltmp1717 and .Ltmp1718
	.long	.Lset602
.Lset603 = .Ltmp1719-.Leh_func_begin117 #     jumps to .Ltmp1719
	.long	.Lset603
	.byte	0                       #   On action: cleanup
.Lset604 = .Ltmp1718-.Leh_func_begin117 # >> Call Site 2 <<
	.long	.Lset604
.Lset605 = .Leh_func_end117-.Ltmp1718   #   Call between .Ltmp1718 and .Leh_func_end117
	.long	.Lset605
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNK5sc_dt12sc_uint_base6lengthEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_base6lengthEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_base6lengthEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base6lengthEv,@function
_ZNK5sc_dt12sc_uint_base6lengthEv:      # @_ZNK5sc_dt12sc_uint_base6lengthEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movl	16(%rdi), %eax
	ret
.Ltmp1726:
	.size	_ZNK5sc_dt12sc_uint_base6lengthEv, .Ltmp1726-_ZNK5sc_dt12sc_uint_base6lengthEv
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseD2Ev,"axG",@progbits,_ZN5sc_dt13sc_value_baseD2Ev,comdat
	.weak	_ZN5sc_dt13sc_value_baseD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseD2Ev,@function
_ZN5sc_dt13sc_value_baseD2Ev:           # @_ZN5sc_dt13sc_value_baseD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1727:
	.size	_ZN5sc_dt13sc_value_baseD2Ev, .Ltmp1727-_ZN5sc_dt13sc_value_baseD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt12sc_uint_base11extend_signEv,"axG",@progbits,_ZN5sc_dt12sc_uint_base11extend_signEv,comdat
	.weak	_ZN5sc_dt12sc_uint_base11extend_signEv
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_base11extend_signEv,@function
_ZN5sc_dt12sc_uint_base11extend_signEv: # @_ZN5sc_dt12sc_uint_base11extend_signEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	_ZN5sc_dt9UINT_ZEROE, %rax
	xorq	$-1, %rax
	movl	20(%rdi), %ecx
                                        # kill: CL<def> RCX<kill>
	shrq	%cl, %rax
	movq	8(%rdi), %rdx
	andq	%rax, %rdx
	movq	%rdx, 8(%rdi)
	ret
.Ltmp1728:
	.size	_ZN5sc_dt12sc_uint_base11extend_signEv, .Ltmp1728-_ZN5sc_dt12sc_uint_base11extend_signEv
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseC2Ev,"axG",@progbits,_ZN5sc_dt13sc_value_baseC2Ev,comdat
	.weak	_ZN5sc_dt13sc_value_baseC2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseC2Ev,@function
_ZN5sc_dt13sc_value_baseC2Ev:           # @_ZN5sc_dt13sc_value_baseC2Ev
	.cfi_startproc
# BB#0:
	leaq	_ZTVN5sc_dt13sc_value_baseE, %rax
	addq	$16, %rax
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rax, (%rdi)
	ret
.Ltmp1729:
	.size	_ZN5sc_dt13sc_value_baseC2Ev, .Ltmp1729-_ZN5sc_dt13sc_value_baseC2Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_base12check_lengthEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_base12check_lengthEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_base12check_lengthEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base12check_lengthEv,@function
_ZNK5sc_dt12sc_uint_base12check_lengthEv: # @_ZNK5sc_dt12sc_uint_base12check_lengthEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1732:
	.cfi_def_cfa_offset 16
.Ltmp1733:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1734:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$0, 16(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jle	.LBB122_2
# BB#1:
	movq	-16(%rbp), %rax         # 8-byte Reload
	cmpl	$64, 16(%rax)
	jle	.LBB122_3
.LBB122_2:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt12sc_uint_base14invalid_lengthEv
.LBB122_3:
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1735:
	.size	_ZNK5sc_dt12sc_uint_base12check_lengthEv, .Ltmp1735-_ZNK5sc_dt12sc_uint_base12check_lengthEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC2ERKS1_,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC2ERKS1_,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC2ERKS1_
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC2ERKS1_,@function
_ZN5sc_dt7sc_uintILi32EEC2ERKS1_:       # @_ZN5sc_dt7sc_uintILi32EEC2ERKS1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1738:
	.cfi_def_cfa_offset 16
.Ltmp1739:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1740:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt12sc_uint_baseC2ERKS0_
	leaq	_ZTVN5sc_dt7sc_uintILi32EEE, %rax
	addq	$16, %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, (%rsi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1741:
	.size	_ZN5sc_dt7sc_uintILi32EEC2ERKS1_, .Ltmp1741-_ZN5sc_dt7sc_uintILi32EEC2ERKS1_
	.cfi_endproc

	.section	.text._ZN5sc_dt12sc_uint_baseC2ERKS0_,"axG",@progbits,_ZN5sc_dt12sc_uint_baseC2ERKS0_,comdat
	.weak	_ZN5sc_dt12sc_uint_baseC2ERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseC2ERKS0_,@function
_ZN5sc_dt12sc_uint_baseC2ERKS0_:        # @_ZN5sc_dt12sc_uint_baseC2ERKS0_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1744:
	.cfi_def_cfa_offset 16
.Ltmp1745:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1746:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt13sc_value_baseC2ERKS0_
	leaq	_ZTVN5sc_dt12sc_uint_baseE, %rax
	addq	$16, %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, (%rsi)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, 8(%rsi)
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	movl	%ecx, 16(%rsi)
	movq	-16(%rbp), %rax
	movl	20(%rax), %ecx
	movl	%ecx, 20(%rsi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1747:
	.size	_ZN5sc_dt12sc_uint_baseC2ERKS0_, .Ltmp1747-_ZN5sc_dt12sc_uint_baseC2ERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseC2ERKS0_,"axG",@progbits,_ZN5sc_dt13sc_value_baseC2ERKS0_,comdat
	.weak	_ZN5sc_dt13sc_value_baseC2ERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseC2ERKS0_,@function
_ZN5sc_dt13sc_value_baseC2ERKS0_:       # @_ZN5sc_dt13sc_value_baseC2ERKS0_
	.cfi_startproc
# BB#0:
	leaq	_ZTVN5sc_dt13sc_value_baseE, %rax
	addq	$16, %rax
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	%rax, (%rsi)
	ret
.Ltmp1748:
	.size	_ZN5sc_dt13sc_value_baseC2ERKS0_, .Ltmp1748-_ZN5sc_dt13sc_value_baseC2ERKS0_
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1751:
	.cfi_def_cfa_offset 16
.Ltmp1752:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1753:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB126_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str18, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB126_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1754:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv, .Ltmp1754-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE,@function
_ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE:     # @_ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1757:
	.cfi_def_cfa_offset 16
.Ltmp1758:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1759:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxnumaSERKS0_
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1760:
	.size	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE, .Ltmp1760-_ZN5sc_dt6sc_fixaSERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumaSERKS0_,"axG",@progbits,_ZN5sc_dt8sc_fxnumaSERKS0_,comdat
	.weak	_ZN5sc_dt8sc_fxnumaSERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumaSERKS0_,@function
_ZN5sc_dt8sc_fxnumaSERKS0_:             # @_ZN5sc_dt8sc_fxnumaSERKS0_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1763:
	.cfi_def_cfa_offset 16
.Ltmp1764:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1765:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	%rsi, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB128_2
# BB#1:
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rsi
	callq	_ZN5sc_dt8scfx_repaSERKS0_
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8sc_fxnum4castEv
.LBB128_2:
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1766:
	.size	_ZN5sc_dt8sc_fxnumaSERKS0_, .Ltmp1766-_ZN5sc_dt8sc_fxnumaSERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt8scfx_repaSERKS0_,"axG",@progbits,_ZN5sc_dt8scfx_repaSERKS0_,comdat
	.weak	_ZN5sc_dt8scfx_repaSERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt8scfx_repaSERKS0_,@function
_ZN5sc_dt8scfx_repaSERKS0_:             # @_ZN5sc_dt8scfx_repaSERKS0_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1769:
	.cfi_def_cfa_offset 16
.Ltmp1770:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1771:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	%rsi, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB129_2
# BB#1:
	movl	$1024, %esi             # imm = 0x400
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movl	%esi, -28(%rbp)         # 4-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt9scfx_mantaSERKS0_
	movq	-16(%rbp), %rsi
	movl	16(%rsi), %ecx
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movl	%ecx, 16(%rsi)
	movq	-16(%rbp), %rdi
	movl	20(%rdi), %ecx
	movl	%ecx, 20(%rsi)
	movq	-16(%rbp), %rdi
	movb	24(%rdi), %dl
	movb	%dl, 24(%rsi)
	movq	-16(%rbp), %rdi
	movl	28(%rdi), %ecx
	movl	%ecx, 28(%rsi)
	movq	-16(%rbp), %rdi
	movl	32(%rdi), %ecx
	movl	%ecx, 32(%rsi)
	movq	%rsi, %rdi
	movl	-28(%rbp), %esi         # 4-byte Reload
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_rep5roundEi
.LBB129_2:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1772:
	.size	_ZN5sc_dt8scfx_repaSERKS0_, .Ltmp1772-_ZN5sc_dt8scfx_repaSERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnum4castEv,"axG",@progbits,_ZN5sc_dt8sc_fxnum4castEv,comdat
	.weak	_ZN5sc_dt8sc_fxnum4castEv
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnum4castEv,@function
_ZN5sc_dt8sc_fxnum4castEv:              # @_ZN5sc_dt8sc_fxnum4castEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1775:
	.cfi_def_cfa_offset 16
.Ltmp1776:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1777:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rax
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNK5sc_dt8scfx_rep9is_normalEv
	testb	$1, %al
	jne	.LBB130_2
# BB#1:
	movl	$2, %edi
	xorl	%edx, %edx
	movl	$2571, %r8d             # imm = 0xA0B
	movl	$_ZN7sc_core23SC_ID_INVALID_FX_VALUE_E, %esi
	movl	$.L.str19, %ecx
	callq	_ZN7sc_core17sc_report_handler6reportENS_11sc_severityEPKcS3_S3_i
.LBB130_2:
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$8, %rax
	movq	%rax, %rdi
	callq	_ZNK5sc_dt11scfx_params11cast_switchEv
	leaq	-16(%rbp), %rdi
	movl	$1, %esi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt16sc_fxcast_switchC1ENS_9sc_switchE
	leaq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dteqERKNS_16sc_fxcast_switchES2_
	testb	$1, %al
	jne	.LBB130_3
	jmp	.LBB130_4
.LBB130_3:
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	addq	$8, %rax
	movq	-24(%rbp), %rcx         # 8-byte Reload
	addq	$28, %rcx
	movq	-24(%rbp), %rdx         # 8-byte Reload
	addq	$29, %rdx
	movq	%rax, %rsi
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-40(%rbp), %rcx         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_rep4castERKNS_11scfx_paramsERbS4_
.LBB130_4:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1778:
	.size	_ZN5sc_dt8sc_fxnum4castEv, .Ltmp1778-_ZN5sc_dt8sc_fxnum4castEv
	.cfi_endproc

	.section	.text._ZNK5sc_dt8scfx_rep9is_normalEv,"axG",@progbits,_ZNK5sc_dt8scfx_rep9is_normalEv,comdat
	.weak	_ZNK5sc_dt8scfx_rep9is_normalEv
	.align	16, 0x90
	.type	_ZNK5sc_dt8scfx_rep9is_normalEv,@function
_ZNK5sc_dt8scfx_rep9is_normalEv:        # @_ZNK5sc_dt8scfx_rep9is_normalEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movzbl	24(%rdi), %eax
	cmpl	$0, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	ret
.Ltmp1779:
	.size	_ZNK5sc_dt8scfx_rep9is_normalEv, .Ltmp1779-_ZNK5sc_dt8scfx_rep9is_normalEv
	.cfi_endproc

	.section	.text._ZN5sc_dteqERKNS_16sc_fxcast_switchES2_,"axG",@progbits,_ZN5sc_dteqERKNS_16sc_fxcast_switchES2_,comdat
	.weak	_ZN5sc_dteqERKNS_16sc_fxcast_switchES2_
	.align	16, 0x90
	.type	_ZN5sc_dteqERKNS_16sc_fxcast_switchES2_,@function
_ZN5sc_dteqERKNS_16sc_fxcast_switchES2_: # @_ZN5sc_dteqERKNS_16sc_fxcast_switchES2_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movb	(%rsi), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movq	-16(%rsp), %rsi
	movb	(%rsi), %al
	andb	$1, %al
	movzbl	%al, %edx
	cmpl	%edx, %ecx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	ret
.Ltmp1780:
	.size	_ZN5sc_dteqERKNS_16sc_fxcast_switchES2_, .Ltmp1780-_ZN5sc_dteqERKNS_16sc_fxcast_switchES2_
	.cfi_endproc

	.section	.text._ZNK5sc_dt11scfx_params11cast_switchEv,"axG",@progbits,_ZNK5sc_dt11scfx_params11cast_switchEv,comdat
	.weak	_ZNK5sc_dt11scfx_params11cast_switchEv
	.align	16, 0x90
	.type	_ZNK5sc_dt11scfx_params11cast_switchEv,@function
_ZNK5sc_dt11scfx_params11cast_switchEv: # @_ZNK5sc_dt11scfx_params11cast_switchEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	addq	$17, %rdi
	movq	%rdi, %rax
	ret
.Ltmp1781:
	.size	_ZNK5sc_dt11scfx_params11cast_switchEv, .Ltmp1781-_ZNK5sc_dt11scfx_params11cast_switchEv
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxcast_switchC1ENS_9sc_switchE,"axG",@progbits,_ZN5sc_dt16sc_fxcast_switchC1ENS_9sc_switchE,comdat
	.weak	_ZN5sc_dt16sc_fxcast_switchC1ENS_9sc_switchE
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxcast_switchC1ENS_9sc_switchE,@function
_ZN5sc_dt16sc_fxcast_switchC1ENS_9sc_switchE: # @_ZN5sc_dt16sc_fxcast_switchC1ENS_9sc_switchE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1784:
	.cfi_def_cfa_offset 16
.Ltmp1785:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1786:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdi
	movb	-9(%rbp), %al
	movzbl	%al, %esi
	andl	$1, %esi
	callq	_ZN5sc_dt16sc_fxcast_switchC2ENS_9sc_switchE
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1787:
	.size	_ZN5sc_dt16sc_fxcast_switchC1ENS_9sc_switchE, .Ltmp1787-_ZN5sc_dt16sc_fxcast_switchC1ENS_9sc_switchE
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxcast_switchC2ENS_9sc_switchE,"axG",@progbits,_ZN5sc_dt16sc_fxcast_switchC2ENS_9sc_switchE,comdat
	.weak	_ZN5sc_dt16sc_fxcast_switchC2ENS_9sc_switchE
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxcast_switchC2ENS_9sc_switchE,@function
_ZN5sc_dt16sc_fxcast_switchC2ENS_9sc_switchE: # @_ZN5sc_dt16sc_fxcast_switchC2ENS_9sc_switchE
	.cfi_startproc
# BB#0:
	movb	%sil, %al
	movq	%rdi, -8(%rsp)
	andb	$1, %al
	movb	%al, -9(%rsp)
	movq	-8(%rsp), %rdi
	movb	-9(%rsp), %al
	andb	$1, %al
	movb	%al, (%rdi)
	ret
.Ltmp1788:
	.size	_ZN5sc_dt16sc_fxcast_switchC2ENS_9sc_switchE, .Ltmp1788-_ZN5sc_dt16sc_fxcast_switchC2ENS_9sc_switchE
	.cfi_endproc

	.section	.text._ZN5sc_dt9scfx_mantaSERKS0_,"axG",@progbits,_ZN5sc_dt9scfx_mantaSERKS0_,comdat
	.weak	_ZN5sc_dt9scfx_mantaSERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt9scfx_mantaSERKS0_,@function
_ZN5sc_dt9scfx_mantaSERKS0_:            # @_ZN5sc_dt9scfx_mantaSERKS0_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1791:
	.cfi_def_cfa_offset 16
.Ltmp1792:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1793:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	%rsi, -16(%rbp)
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB136_8
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movl	8(%rax), %ecx
	movq	-16(%rbp), %rdx
	cmpl	8(%rdx), %ecx
	je	.LBB136_3
# BB#2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movslq	8(%rax), %rsi
	callq	_ZN5sc_dt9scfx_mant4freeEPjm
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-32(%rbp), %rax         # 8-byte Reload
	movl	%ecx, 8(%rax)
	movslq	%ecx, %rdi
	callq	_ZN5sc_dt9scfx_mant5allocEm
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	%rax, (%rsi)
.LBB136_3:
	movl	$0, -20(%rbp)
.LBB136_4:                              # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpl	8(%rcx), %eax
	jge	.LBB136_7
# BB#5:                                 #   in Loop: Header=BB136_4 Depth=1
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_ZNK5sc_dt9scfx_mantixEi
	movl	-20(%rbp), %esi
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movl	%eax, -36(%rbp)         # 4-byte Spill
	callq	_ZN5sc_dt9scfx_mantixEi
	movl	-36(%rbp), %esi         # 4-byte Reload
	movl	%esi, (%rax)
# BB#6:                                 #   in Loop: Header=BB136_4 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB136_4
.LBB136_7:
	jmp	.LBB136_8
.LBB136_8:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1794:
	.size	_ZN5sc_dt9scfx_mantaSERKS0_, .Ltmp1794-_ZN5sc_dt9scfx_mantaSERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt9scfx_mant4freeEPjm,"axG",@progbits,_ZN5sc_dt9scfx_mant4freeEPjm,comdat
	.weak	_ZN5sc_dt9scfx_mant4freeEPjm
	.align	16, 0x90
	.type	_ZN5sc_dt9scfx_mant4freeEPjm,@function
_ZN5sc_dt9scfx_mant4freeEPjm:           # @_ZN5sc_dt9scfx_mant4freeEPjm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1797:
	.cfi_def_cfa_offset 16
.Ltmp1798:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1799:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt9scfx_mant9free_wordEPjm
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1800:
	.size	_ZN5sc_dt9scfx_mant4freeEPjm, .Ltmp1800-_ZN5sc_dt9scfx_mant4freeEPjm
	.cfi_endproc

	.section	.text._ZN5sc_dt9scfx_mant5allocEm,"axG",@progbits,_ZN5sc_dt9scfx_mant5allocEm,comdat
	.weak	_ZN5sc_dt9scfx_mant5allocEm
	.align	16, 0x90
	.type	_ZN5sc_dt9scfx_mant5allocEm,@function
_ZN5sc_dt9scfx_mant5allocEm:            # @_ZN5sc_dt9scfx_mant5allocEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1803:
	.cfi_def_cfa_offset 16
.Ltmp1804:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1805:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt9scfx_mant10alloc_wordEm
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1806:
	.size	_ZN5sc_dt9scfx_mant5allocEm, .Ltmp1806-_ZN5sc_dt9scfx_mant5allocEm
	.cfi_endproc

	.section	.text._ZNK5sc_dt9scfx_mantixEi,"axG",@progbits,_ZNK5sc_dt9scfx_mantixEi,comdat
	.weak	_ZNK5sc_dt9scfx_mantixEi
	.align	16, 0x90
	.type	_ZNK5sc_dt9scfx_mantixEi,@function
_ZNK5sc_dt9scfx_mantixEi:               # @_ZNK5sc_dt9scfx_mantixEi
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movl	%esi, -12(%rsp)
	movq	-8(%rsp), %rdi
	movslq	-12(%rsp), %rax
	movq	(%rdi), %rdi
	movl	(%rdi,%rax,4), %eax
	ret
.Ltmp1807:
	.size	_ZNK5sc_dt9scfx_mantixEi, .Ltmp1807-_ZNK5sc_dt9scfx_mantixEi
	.cfi_endproc

	.section	.text._ZN5sc_dt9scfx_mantixEi,"axG",@progbits,_ZN5sc_dt9scfx_mantixEi,comdat
	.weak	_ZN5sc_dt9scfx_mantixEi
	.align	16, 0x90
	.type	_ZN5sc_dt9scfx_mantixEi,@function
_ZN5sc_dt9scfx_mantixEi:                # @_ZN5sc_dt9scfx_mantixEi
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movl	%esi, -12(%rsp)
	movq	-8(%rsp), %rdi
	movslq	-12(%rsp), %rax
	movq	(%rdi), %rdi
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	%rdi, %rax
	ret
.Ltmp1808:
	.size	_ZN5sc_dt9scfx_mantixEi, .Ltmp1808-_ZN5sc_dt9scfx_mantixEi
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE,@function
_ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE:     # @_ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1811:
	.cfi_def_cfa_offset 16
.Ltmp1812:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1813:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxnumaSERKNS_8sc_fxvalE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1814:
	.size	_ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE, .Ltmp1814-_ZN5sc_dt6sc_fixaSERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumaSERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt8sc_fxnumaSERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt8sc_fxnumaSERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumaSERKNS_8sc_fxvalE,@function
_ZN5sc_dt8sc_fxnumaSERKNS_8sc_fxvalE:   # @_ZN5sc_dt8sc_fxnumaSERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1817:
	.cfi_def_cfa_offset 16
.Ltmp1818:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1819:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt8scfx_repaSERKS0_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8sc_fxnum4castEv
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1820:
	.size	_ZN5sc_dt8sc_fxnumaSERKNS_8sc_fxvalE, .Ltmp1820-_ZN5sc_dt8sc_fxnumaSERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZNK5sc_dt8sc_fxval7get_repEv,"axG",@progbits,_ZNK5sc_dt8sc_fxval7get_repEv,comdat
	.weak	_ZNK5sc_dt8sc_fxval7get_repEv
	.align	16, 0x90
	.type	_ZNK5sc_dt8sc_fxval7get_repEv,@function
_ZNK5sc_dt8sc_fxval7get_repEv:          # @_ZNK5sc_dt8sc_fxval7get_repEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp1821:
	.size	_ZNK5sc_dt8sc_fxval7get_repEv, .Ltmp1821-_ZNK5sc_dt8sc_fxval7get_repEv
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_fixaSEj,"axG",@progbits,_ZN5sc_dt6sc_fixaSEj,comdat
	.weak	_ZN5sc_dt6sc_fixaSEj
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixaSEj,@function
_ZN5sc_dt6sc_fixaSEj:                   # @_ZN5sc_dt6sc_fixaSEj
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1824:
	.cfi_def_cfa_offset 16
.Ltmp1825:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1826:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movl	-12(%rbp), %esi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fxnumaSEj
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1827:
	.size	_ZN5sc_dt6sc_fixaSEj, .Ltmp1827-_ZN5sc_dt6sc_fixaSEj
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumaSEj,"axG",@progbits,_ZN5sc_dt8sc_fxnumaSEj,comdat
	.weak	_ZN5sc_dt8sc_fxnumaSEj
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumaSEj,@function
_ZN5sc_dt8sc_fxnumaSEj:                 # @_ZN5sc_dt8sc_fxnumaSEj
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin145:
	.cfi_lsda 3, .Lexception145
# BB#0:
	pushq	%rbp
.Ltmp1840:
	.cfi_def_cfa_offset 16
.Ltmp1841:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1842:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	leaq	-32(%rbp), %rax
	xorl	%edx, %edx
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp1828:
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
.Ltmp1829:
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB145_1
.LBB145_1:
.Ltmp1830:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repaSERKS0_
.Ltmp1831:
	jmp	.LBB145_2
.LBB145_2:
.Ltmp1832:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8sc_fxnum4castEv
.Ltmp1833:
	jmp	.LBB145_3
.LBB145_3:
	leaq	-32(%rbp), %rdi
	movl	$1, -48(%rbp)
	callq	_ZN5sc_dt8sc_fxvalD1Ev
	movq	-56(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.LBB145_4:
.Ltmp1834:
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
.Ltmp1835:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp1836:
	jmp	.LBB145_5
.LBB145_5:
	jmp	.LBB145_6
.LBB145_6:
	movq	-40(%rbp), %rdi
	callq	_Unwind_Resume
.LBB145_7:
.Ltmp1837:
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1843:
	.size	_ZN5sc_dt8sc_fxnumaSEj, .Ltmp1843-_ZN5sc_dt8sc_fxnumaSEj
	.cfi_endproc
.Leh_func_end145:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table145:
.Lexception145:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset606 = .Leh_func_begin145-.Leh_func_begin145 # >> Call Site 1 <<
	.long	.Lset606
.Lset607 = .Ltmp1828-.Leh_func_begin145 #   Call between .Leh_func_begin145 and .Ltmp1828
	.long	.Lset607
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset608 = .Ltmp1828-.Leh_func_begin145 # >> Call Site 2 <<
	.long	.Lset608
.Lset609 = .Ltmp1833-.Ltmp1828          #   Call between .Ltmp1828 and .Ltmp1833
	.long	.Lset609
.Lset610 = .Ltmp1834-.Leh_func_begin145 #     jumps to .Ltmp1834
	.long	.Lset610
	.byte	0                       #   On action: cleanup
.Lset611 = .Ltmp1833-.Leh_func_begin145 # >> Call Site 3 <<
	.long	.Lset611
.Lset612 = .Ltmp1835-.Ltmp1833          #   Call between .Ltmp1833 and .Ltmp1835
	.long	.Lset612
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset613 = .Ltmp1835-.Leh_func_begin145 # >> Call Site 4 <<
	.long	.Lset613
.Lset614 = .Ltmp1836-.Ltmp1835          #   Call between .Ltmp1835 and .Ltmp1836
	.long	.Lset614
.Lset615 = .Ltmp1837-.Leh_func_begin145 #     jumps to .Ltmp1837
	.long	.Lset615
	.byte	1                       #   On action: 1
.Lset616 = .Ltmp1836-.Leh_func_begin145 # >> Call Site 5 <<
	.long	.Lset616
.Lset617 = .Leh_func_end145-.Ltmp1836   #   Call between .Ltmp1836 and .Leh_func_end145
	.long	.Lset617
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE,"axG",@progbits,_ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE,comdat
	.weak	_ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE,@function
_ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE: # @_ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1846:
	.cfi_def_cfa_offset 16
.Ltmp1847:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1848:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	callq	_ZN5sc_dt8sc_fxvalC2EjPNS_17sc_fxval_observerE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1849:
	.size	_ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE, .Ltmp1849-_ZN5sc_dt8sc_fxvalC1EjPNS_17sc_fxval_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxvalC2EjPNS_17sc_fxval_observerE,"axG",@progbits,_ZN5sc_dt8sc_fxvalC2EjPNS_17sc_fxval_observerE,comdat
	.weak	_ZN5sc_dt8sc_fxvalC2EjPNS_17sc_fxval_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxvalC2EjPNS_17sc_fxval_observerE,@function
_ZN5sc_dt8sc_fxvalC2EjPNS_17sc_fxval_observerE: # @_ZN5sc_dt8sc_fxvalC2EjPNS_17sc_fxval_observerE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin147:
	.cfi_lsda 3, .Lexception147
# BB#0:
	pushq	%rbp
.Ltmp1858:
	.cfi_def_cfa_offset 16
.Ltmp1859:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1860:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movl	$40, %edi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repnwEm
	movl	-12(%rbp), %esi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, %rcx
.Ltmp1850:
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repC1Ej
.Ltmp1851:
	jmp	.LBB147_1
.LBB147_1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, (%rax)
	movq	-24(%rbp), %rdx
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	%rdx, 8(%rsi)
	addq	$96, %rsp
	popq	%rbp
	ret
.LBB147_2:
.Ltmp1852:
	movl	%edx, %ecx
	movq	%rax, -32(%rbp)
	movl	%ecx, -36(%rbp)
.Ltmp1853:
	movl	$40, %esi
	movq	-64(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp1854:
	jmp	.LBB147_3
.LBB147_3:
	jmp	.LBB147_4
.LBB147_4:
	movq	-32(%rbp), %rdi
	callq	_Unwind_Resume
.LBB147_5:
.Ltmp1855:
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1861:
	.size	_ZN5sc_dt8sc_fxvalC2EjPNS_17sc_fxval_observerE, .Ltmp1861-_ZN5sc_dt8sc_fxvalC2EjPNS_17sc_fxval_observerE
	.cfi_endproc
.Leh_func_end147:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table147:
.Lexception147:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset618 = .Leh_func_begin147-.Leh_func_begin147 # >> Call Site 1 <<
	.long	.Lset618
.Lset619 = .Ltmp1850-.Leh_func_begin147 #   Call between .Leh_func_begin147 and .Ltmp1850
	.long	.Lset619
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset620 = .Ltmp1850-.Leh_func_begin147 # >> Call Site 2 <<
	.long	.Lset620
.Lset621 = .Ltmp1851-.Ltmp1850          #   Call between .Ltmp1850 and .Ltmp1851
	.long	.Lset621
.Lset622 = .Ltmp1852-.Leh_func_begin147 #     jumps to .Ltmp1852
	.long	.Lset622
	.byte	0                       #   On action: cleanup
.Lset623 = .Ltmp1853-.Leh_func_begin147 # >> Call Site 3 <<
	.long	.Lset623
.Lset624 = .Ltmp1854-.Ltmp1853          #   Call between .Ltmp1853 and .Ltmp1854
	.long	.Lset624
.Lset625 = .Ltmp1855-.Leh_func_begin147 #     jumps to .Ltmp1855
	.long	.Lset625
	.byte	1                       #   On action: 1
.Lset626 = .Ltmp1854-.Leh_func_begin147 # >> Call Site 4 <<
	.long	.Lset626
.Lset627 = .Leh_func_end147-.Ltmp1854   #   Call between .Ltmp1854 and .Leh_func_end147
	.long	.Lset627
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EiPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EiPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EiPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EiPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EiPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EiPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1864:
	.cfi_def_cfa_offset 16
.Ltmp1865:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1866:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$32, %eax
	movl	$16, %ecx
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdi
	movq	%rsp, %r8
	movq	%rdi, 8(%r8)
	movl	$0, (%r8)
	movl	$32, %r9d
	movl	$16, %r10d
	movl	$4, %r8d
	movl	$2, %r11d
	movq	%rdx, %rdi
	movl	%r9d, %edx
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movl	%r10d, %ecx
	movl	%r11d, %r9d
	movl	%eax, -32(%rbp)         # 4-byte Spill
	callq	_ZN5sc_dt6sc_fixC2EiiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1867:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EiPNS_17sc_fxnum_observerE, .Ltmp1867-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EiPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_fixC2EiiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt6sc_fixC2EiiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt6sc_fixC2EiiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixC2EiiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt6sc_fixC2EiiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE: # @_ZN5sc_dt6sc_fixC2EiiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1871:
	.cfi_def_cfa_offset 16
.Ltmp1872:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1873:
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$96, %rsp
.Ltmp1874:
	.cfi_offset %rbx, -32
.Ltmp1875:
	.cfi_offset %r14, -24
	movb	%r9b, %al
	movb	%r8b, %r10b
	movq	24(%rbp), %r11
	movl	16(%rbp), %r8d
	leaq	-72(%rbp), %rbx
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	andb	$7, %r10b
	movb	%r10b, -37(%rbp)
	andb	$7, %al
	movb	%al, -38(%rbp)
	movl	%r8d, -44(%rbp)
	movq	%r11, -56(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	movb	-38(%rbp), %al
	movb	-37(%rbp), %r10b
	movl	-44(%rbp), %r9d
	leaq	-72(%rbp), %r11
	movzbl	%r10b, %r8d
	andl	$7, %r8d
	movzbl	%al, %r14d
	andl	$7, %r14d
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%r11, %rdi
	movl	%esi, -92(%rbp)         # 4-byte Spill
	movl	%ecx, %esi
	movl	%r8d, %ecx
	movl	%r14d, %r8d
	movq	%rbx, -104(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi
	leaq	-80(%rbp), %rdi
	callq	_ZN5sc_dt16sc_fxcast_switchC1Ev
	leaq	-72(%rbp), %rdx
	movl	$0, %ecx
	leaq	-80(%rbp), %r8
	movq	-56(%rbp), %r9
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-92(%rbp), %esi         # 4-byte Reload
	callq	_ZN5sc_dt8sc_fxnumC2EiRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	addq	$96, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	ret
.Ltmp1876:
	.size	_ZN5sc_dt6sc_fixC2EiiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE, .Ltmp1876-_ZN5sc_dt6sc_fixC2EiiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumC2EiRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fxnumC2EiRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fxnumC2EiRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumC2EiRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fxnumC2EiRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fxnumC2EiRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin150:
	.cfi_lsda 3, .Lexception150
# BB#0:
	pushq	%rbp
.Ltmp1885:
	.cfi_def_cfa_offset 16
.Ltmp1886:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1887:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movb	%cl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-8(%rbp), %rdx
	movl	$40, %edi
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repnwEm
	movl	-12(%rbp), %esi
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, %r8
.Ltmp1877:
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%r8, -88(%rbp)          # 8-byte Spill
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repC1Ei
.Ltmp1878:
	jmp	.LBB150_1
.LBB150_1:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, (%rax)
	movq	-96(%rbp), %rdx         # 8-byte Reload
	addq	$8, %rdx
	movq	-24(%rbp), %rsi
	movb	-25(%rbp), %dil
	movq	-40(%rbp), %rcx
	movzbl	%dil, %r8d
	andl	$1, %r8d
	movq	%rdx, %rdi
	movl	%r8d, %edx
	callq	_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	movq	-96(%rbp), %rax         # 8-byte Reload
	movb	$0, 28(%rax)
	movb	$0, 29(%rax)
	movq	-48(%rbp), %rcx
	movq	%rcx, 32(%rax)
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fxnum4castEv
	addq	$112, %rsp
	popq	%rbp
	ret
.LBB150_2:
.Ltmp1879:
	movl	%edx, %ecx
	movq	%rax, -56(%rbp)
	movl	%ecx, -60(%rbp)
.Ltmp1880:
	movl	$40, %esi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp1881:
	jmp	.LBB150_3
.LBB150_3:
	jmp	.LBB150_4
.LBB150_4:
	movq	-56(%rbp), %rdi
	callq	_Unwind_Resume
.LBB150_5:
.Ltmp1882:
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1888:
	.size	_ZN5sc_dt8sc_fxnumC2EiRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE, .Ltmp1888-_ZN5sc_dt8sc_fxnumC2EiRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	.cfi_endproc
.Leh_func_end150:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table150:
.Lexception150:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset628 = .Leh_func_begin150-.Leh_func_begin150 # >> Call Site 1 <<
	.long	.Lset628
.Lset629 = .Ltmp1877-.Leh_func_begin150 #   Call between .Leh_func_begin150 and .Ltmp1877
	.long	.Lset629
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset630 = .Ltmp1877-.Leh_func_begin150 # >> Call Site 2 <<
	.long	.Lset630
.Lset631 = .Ltmp1878-.Ltmp1877          #   Call between .Ltmp1877 and .Ltmp1878
	.long	.Lset631
.Lset632 = .Ltmp1879-.Leh_func_begin150 #     jumps to .Ltmp1879
	.long	.Lset632
	.byte	0                       #   On action: cleanup
.Lset633 = .Ltmp1878-.Leh_func_begin150 # >> Call Site 3 <<
	.long	.Lset633
.Lset634 = .Ltmp1880-.Ltmp1878          #   Call between .Ltmp1878 and .Ltmp1880
	.long	.Lset634
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset635 = .Ltmp1880-.Leh_func_begin150 # >> Call Site 4 <<
	.long	.Lset635
.Lset636 = .Ltmp1881-.Ltmp1880          #   Call between .Ltmp1880 and .Ltmp1881
	.long	.Lset636
.Lset637 = .Ltmp1882-.Leh_func_begin150 #     jumps to .Ltmp1882
	.long	.Lset637
	.byte	1                       #   On action: 1
.Lset638 = .Ltmp1881-.Leh_func_begin150 # >> Call Site 5 <<
	.long	.Lset638
.Lset639 = .Leh_func_end150-.Ltmp1881   #   Call between .Ltmp1881 and .Leh_func_end150
	.long	.Lset639
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi,"axG",@progbits,_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi,comdat
	.weak	_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi,@function
_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi: # @_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1891:
	.cfi_def_cfa_offset 16
.Ltmp1892:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1893:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%r8b, %al
	movb	%cl, %r10b
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	andb	$7, %r10b
	movb	%r10b, -17(%rbp)
	andb	$7, %al
	movb	%al, -18(%rbp)
	movl	%r9d, -24(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movb	-18(%rbp), %al
	movb	-17(%rbp), %r10b
	movl	-24(%rbp), %r9d
	movzbl	%r10b, %ecx
	andl	$7, %ecx
	movzbl	%al, %r8d
	andl	$7, %r8d
	callq	_ZN5sc_dt16sc_fxtype_paramsC2EiiNS_9sc_q_modeENS_9sc_o_modeEi
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1894:
	.size	_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi, .Ltmp1894-_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxcast_switchC1Ev,"axG",@progbits,_ZN5sc_dt16sc_fxcast_switchC1Ev,comdat
	.weak	_ZN5sc_dt16sc_fxcast_switchC1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxcast_switchC1Ev,@function
_ZN5sc_dt16sc_fxcast_switchC1Ev:        # @_ZN5sc_dt16sc_fxcast_switchC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1897:
	.cfi_def_cfa_offset 16
.Ltmp1898:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1899:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt16sc_fxcast_switchC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1900:
	.size	_ZN5sc_dt16sc_fxcast_switchC1Ev, .Ltmp1900-_ZN5sc_dt16sc_fxcast_switchC1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxcast_switchC2Ev,"axG",@progbits,_ZN5sc_dt16sc_fxcast_switchC2Ev,comdat
	.weak	_ZN5sc_dt16sc_fxcast_switchC2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxcast_switchC2Ev,@function
_ZN5sc_dt16sc_fxcast_switchC2Ev:        # @_ZN5sc_dt16sc_fxcast_switchC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1903:
	.cfi_def_cfa_offset 16
.Ltmp1904:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1905:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movb	$0, (%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt10sc_contextINS_16sc_fxcast_switchEE13default_valueEv
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt16sc_fxcast_switchaSERKS0_
	movq	%rax, -24(%rbp)         # 8-byte Spill
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1906:
	.size	_ZN5sc_dt16sc_fxcast_switchC2Ev, .Ltmp1906-_ZN5sc_dt16sc_fxcast_switchC2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxcast_switchaSERKS0_,"axG",@progbits,_ZN5sc_dt16sc_fxcast_switchaSERKS0_,comdat
	.weak	_ZN5sc_dt16sc_fxcast_switchaSERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxcast_switchaSERKS0_,@function
_ZN5sc_dt16sc_fxcast_switchaSERKS0_:    # @_ZN5sc_dt16sc_fxcast_switchaSERKS0_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	cmpq	%rsi, -16(%rsp)
	movq	%rsi, -24(%rsp)         # 8-byte Spill
	je	.LBB154_2
# BB#1:
	movq	-16(%rsp), %rax
	movb	(%rax), %cl
	andb	$1, %cl
	movq	-24(%rsp), %rax         # 8-byte Reload
	movb	%cl, (%rax)
.LBB154_2:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp1907:
	.size	_ZN5sc_dt16sc_fxcast_switchaSERKS0_, .Ltmp1907-_ZN5sc_dt16sc_fxcast_switchaSERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt10sc_contextINS_16sc_fxcast_switchEE13default_valueEv,"axG",@progbits,_ZN5sc_dt10sc_contextINS_16sc_fxcast_switchEE13default_valueEv,comdat
	.weak	_ZN5sc_dt10sc_contextINS_16sc_fxcast_switchEE13default_valueEv
	.align	16, 0x90
	.type	_ZN5sc_dt10sc_contextINS_16sc_fxcast_switchEE13default_valueEv,@function
_ZN5sc_dt10sc_contextINS_16sc_fxcast_switchEE13default_valueEv: # @_ZN5sc_dt10sc_contextINS_16sc_fxcast_switchEE13default_valueEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1910:
	.cfi_def_cfa_offset 16
.Ltmp1911:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1912:
	.cfi_def_cfa_register %rbp
	callq	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE8instanceEv
	movq	%rax, %rdi
	callq	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE9value_ptrEv
	movq	(%rax), %rax
	popq	%rbp
	ret
.Ltmp1913:
	.size	_ZN5sc_dt10sc_contextINS_16sc_fxcast_switchEE13default_valueEv, .Ltmp1913-_ZN5sc_dt10sc_contextINS_16sc_fxcast_switchEE13default_valueEv
	.cfi_endproc

	.section	.text._ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE8instanceEv,"axG",@progbits,_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE8instanceEv,comdat
	.weak	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE8instanceEv
	.align	16, 0x90
	.type	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE8instanceEv,@function
_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE8instanceEv: # @_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE8instanceEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin156:
	.cfi_lsda 3, .Lexception156
# BB#0:
	pushq	%rbp
.Ltmp1919:
	.cfi_def_cfa_offset 16
.Ltmp1920:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1921:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	cmpq	$0, _ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE
	jne	.LBB156_4
# BB#1:
	movl	$72, %edi
	callq	_Znwm
	movq	%rax, %rdi
	movq	%rax, %rcx
.Ltmp1914:
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC1Ev
.Ltmp1915:
	jmp	.LBB156_2
.LBB156_2:
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	%rax, _ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE
	jmp	.LBB156_4
.LBB156_3:
.Ltmp1916:
	movl	%edx, %ecx
	movq	%rax, -8(%rbp)
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZdlPv
	jmp	.LBB156_5
.LBB156_4:
	movq	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB156_5:
	movq	-8(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1922:
	.size	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE8instanceEv, .Ltmp1922-_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE8instanceEv
	.cfi_endproc
.Leh_func_end156:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table156:
.Lexception156:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset640 = .Leh_func_begin156-.Leh_func_begin156 # >> Call Site 1 <<
	.long	.Lset640
.Lset641 = .Ltmp1914-.Leh_func_begin156 #   Call between .Leh_func_begin156 and .Ltmp1914
	.long	.Lset641
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset642 = .Ltmp1914-.Leh_func_begin156 # >> Call Site 2 <<
	.long	.Lset642
.Lset643 = .Ltmp1915-.Ltmp1914          #   Call between .Ltmp1914 and .Ltmp1915
	.long	.Lset643
.Lset644 = .Ltmp1916-.Leh_func_begin156 #     jumps to .Ltmp1916
	.long	.Lset644
	.byte	0                       #   On action: cleanup
.Lset645 = .Ltmp1915-.Leh_func_begin156 # >> Call Site 3 <<
	.long	.Lset645
.Lset646 = .Leh_func_end156-.Ltmp1915   #   Call between .Ltmp1915 and .Leh_func_end156
	.long	.Lset646
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE9value_ptrEv,"axG",@progbits,_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE9value_ptrEv,comdat
	.weak	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE9value_ptrEv
	.align	16, 0x90
	.type	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE9value_ptrEv,@function
_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE9value_ptrEv: # @_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE9value_ptrEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1925:
	.cfi_def_cfa_offset 16
.Ltmp1926:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1927:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE6updateEv
	movq	-16(%rbp), %rdi         # 8-byte Reload
	addq	$64, %rdi
	movq	%rdi, %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1928:
	.size	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE9value_ptrEv, .Ltmp1928-_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE9value_ptrEv
	.cfi_endproc

	.section	.text._ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE6updateEv,"axG",@progbits,_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE6updateEv,comdat
	.weak	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE6updateEv
	.align	16, 0x90
	.type	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE6updateEv,@function
_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE6updateEv: # @_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE6updateEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin158:
	.cfi_lsda 3, .Lexception158
# BB#0:
	pushq	%rbp
.Ltmp1934:
	.cfi_def_cfa_offset 16
.Ltmp1935:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1936:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core24sc_get_current_process_bEv
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-56(%rbp), %rdi         # 8-byte Reload
	cmpq	56(%rdi), %rax
	je	.LBB158_6
# BB#1:
	movq	-16(%rbp), %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEixES3_
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB158_5
# BB#2:
	movl	$1, %edi
	callq	_Znwm
	movq	%rax, %rdi
	movq	%rax, %rcx
.Ltmp1929:
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt16sc_fxcast_switchC1ENS_18sc_without_contextE
.Ltmp1930:
	jmp	.LBB158_3
.LBB158_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEE6insertES3_S7_
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB158_5
.LBB158_4:
.Ltmp1931:
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZdlPv
	jmp	.LBB158_7
.LBB158_5:
	movq	-16(%rbp), %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rax, 56(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, 64(%rcx)
.LBB158_6:
	addq	$96, %rsp
	popq	%rbp
	ret
.LBB158_7:
	movq	-40(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1937:
	.size	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE6updateEv, .Ltmp1937-_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE6updateEv
	.cfi_endproc
.Leh_func_end158:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table158:
.Lexception158:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset647 = .Leh_func_begin158-.Leh_func_begin158 # >> Call Site 1 <<
	.long	.Lset647
.Lset648 = .Ltmp1929-.Leh_func_begin158 #   Call between .Leh_func_begin158 and .Ltmp1929
	.long	.Lset648
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset649 = .Ltmp1929-.Leh_func_begin158 # >> Call Site 2 <<
	.long	.Lset649
.Lset650 = .Ltmp1930-.Ltmp1929          #   Call between .Ltmp1929 and .Ltmp1930
	.long	.Lset650
.Lset651 = .Ltmp1931-.Leh_func_begin158 #     jumps to .Ltmp1931
	.long	.Lset651
	.byte	0                       #   On action: cleanup
.Lset652 = .Ltmp1930-.Leh_func_begin158 # >> Call Site 3 <<
	.long	.Lset652
.Lset653 = .Leh_func_end158-.Ltmp1930   #   Call between .Ltmp1930 and .Leh_func_end158
	.long	.Lset653
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core24sc_get_current_process_bEv,"axG",@progbits,_ZN7sc_core24sc_get_current_process_bEv,comdat
	.weak	_ZN7sc_core24sc_get_current_process_bEv
	.align	16, 0x90
	.type	_ZN7sc_core24sc_get_current_process_bEv,@function
_ZN7sc_core24sc_get_current_process_bEv: # @_ZN7sc_core24sc_get_current_process_bEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1940:
	.cfi_def_cfa_offset 16
.Ltmp1941:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1942:
	.cfi_def_cfa_register %rbp
	callq	_ZN7sc_core22sc_get_curr_simcontextEv
	movq	%rax, %rdi
	callq	_ZN7sc_core13sc_simcontext18get_curr_proc_infoEv
	movq	(%rax), %rax
	popq	%rbp
	ret
.Ltmp1943:
	.size	_ZN7sc_core24sc_get_current_process_bEv, .Ltmp1943-_ZN7sc_core24sc_get_current_process_bEv
	.cfi_endproc

	.section	.text._ZNK7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEixES3_,"axG",@progbits,_ZNK7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEixES3_,comdat
	.weak	_ZNK7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEixES3_
	.align	16, 0x90
	.type	_ZNK7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEixES3_,@function
_ZNK7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEixES3_: # @_ZNK7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEixES3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1946:
	.cfi_def_cfa_offset 16
.Ltmp1947:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1948:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZNK7sc_core13sc_phash_baseixEPKv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1949:
	.size	_ZNK7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEixES3_, .Ltmp1949-_ZNK7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEixES3_
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxcast_switchC1ENS_18sc_without_contextE,"axG",@progbits,_ZN5sc_dt16sc_fxcast_switchC1ENS_18sc_without_contextE,comdat
	.weak	_ZN5sc_dt16sc_fxcast_switchC1ENS_18sc_without_contextE
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxcast_switchC1ENS_18sc_without_contextE,@function
_ZN5sc_dt16sc_fxcast_switchC1ENS_18sc_without_contextE: # @_ZN5sc_dt16sc_fxcast_switchC1ENS_18sc_without_contextE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1952:
	.cfi_def_cfa_offset 16
.Ltmp1953:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1954:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt16sc_fxcast_switchC2ENS_18sc_without_contextE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1955:
	.size	_ZN5sc_dt16sc_fxcast_switchC1ENS_18sc_without_contextE, .Ltmp1955-_ZN5sc_dt16sc_fxcast_switchC1ENS_18sc_without_contextE
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEE6insertES3_S7_,"axG",@progbits,_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEE6insertES3_S7_,comdat
	.weak	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEE6insertES3_S7_
	.align	16, 0x90
	.type	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEE6insertES3_S7_,@function
_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEE6insertES3_S7_: # @_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEE6insertES3_S7_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1958:
	.cfi_def_cfa_offset 16
.Ltmp1959:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1960:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	-32(%rbp), %rdx         # 8-byte Reload
	callq	_ZN7sc_core13sc_phash_base6insertEPvS1_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1961:
	.size	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEE6insertES3_S7_, .Ltmp1961-_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEE6insertES3_S7_
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxcast_switchC2ENS_18sc_without_contextE,"axG",@progbits,_ZN5sc_dt16sc_fxcast_switchC2ENS_18sc_without_contextE,comdat
	.weak	_ZN5sc_dt16sc_fxcast_switchC2ENS_18sc_without_contextE
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxcast_switchC2ENS_18sc_without_contextE,@function
_ZN5sc_dt16sc_fxcast_switchC2ENS_18sc_without_contextE: # @_ZN5sc_dt16sc_fxcast_switchC2ENS_18sc_without_contextE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movb	$1, (%rdi)
	ret
.Ltmp1962:
	.size	_ZN5sc_dt16sc_fxcast_switchC2ENS_18sc_without_contextE, .Ltmp1962-_ZN5sc_dt16sc_fxcast_switchC2ENS_18sc_without_contextE
	.cfi_endproc

	.section	.text._ZN7sc_core13sc_simcontext18get_curr_proc_infoEv,"axG",@progbits,_ZN7sc_core13sc_simcontext18get_curr_proc_infoEv,comdat
	.weak	_ZN7sc_core13sc_simcontext18get_curr_proc_infoEv
	.align	16, 0x90
	.type	_ZN7sc_core13sc_simcontext18get_curr_proc_infoEv,@function
_ZN7sc_core13sc_simcontext18get_curr_proc_infoEv: # @_ZN7sc_core13sc_simcontext18get_curr_proc_infoEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	addq	$56, %rdi
	movq	%rdi, %rax
	ret
.Ltmp1963:
	.size	_ZN7sc_core13sc_simcontext18get_curr_proc_infoEv, .Ltmp1963-_ZN7sc_core13sc_simcontext18get_curr_proc_infoEv
	.cfi_endproc

	.section	.text._ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC1Ev,"axG",@progbits,_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC1Ev,comdat
	.weak	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC1Ev,@function
_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC1Ev: # @_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1966:
	.cfi_def_cfa_offset 16
.Ltmp1967:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1968:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1969:
	.size	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC1Ev, .Ltmp1969-_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC2Ev,"axG",@progbits,_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC2Ev,comdat
	.weak	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC2Ev,@function
_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC2Ev: # @_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1972:
	.cfi_def_cfa_offset 16
.Ltmp1973:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1974:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movabsq	$0, %rsi
	movl	$11, %edx
	movl	$5, %ecx
	movl	$1, %r8d
	leaq	_ZN7sc_core19default_ptr_hash_fnEPKv, %r9
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movsd	_ZN7sc_core25PHASH_DEFAULT_GROW_FACTORE, %xmm0
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	$0, (%rsp)
	callq	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC1ES7_iidbPFjPKvEPFiSA_SA_E
	movabsq	$-1, %rsi
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, 56(%rdi)
	movq	$0, 64(%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1975:
	.size	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC2Ev, .Ltmp1975-_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC1ES7_iidbPFjPKvEPFiSA_SA_E,"axG",@progbits,_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC1ES7_iidbPFjPKvEPFiSA_SA_E,comdat
	.weak	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC1ES7_iidbPFjPKvEPFiSA_SA_E
	.align	16, 0x90
	.type	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC1ES7_iidbPFjPKvEPFiSA_SA_E,@function
_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC1ES7_iidbPFjPKvEPFiSA_SA_E: # @_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC1ES7_iidbPFjPKvEPFiSA_SA_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1978:
	.cfi_def_cfa_offset 16
.Ltmp1979:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1980:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%r8b, %al
	movq	16(%rbp), %r10
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movsd	%xmm0, -32(%rbp)
	andb	$1, %al
	movb	%al, -33(%rbp)
	movq	%r9, -48(%rbp)
	movq	%r10, -56(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movsd	-32(%rbp), %xmm0
	movb	-33(%rbp), %al
	movq	-48(%rbp), %r9
	movq	-56(%rbp), %r10
	movq	%rsp, %r11
	movq	%r10, (%r11)
	movzbl	%al, %r8d
	andl	$1, %r8d
	callq	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC2ES7_iidbPFjPKvEPFiSA_SA_E
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp1981:
	.size	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC1ES7_iidbPFjPKvEPFiSA_SA_E, .Ltmp1981-_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC1ES7_iidbPFjPKvEPFiSA_SA_E
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC2ES7_iidbPFjPKvEPFiSA_SA_E,"axG",@progbits,_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC2ES7_iidbPFjPKvEPFiSA_SA_E,comdat
	.weak	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC2ES7_iidbPFjPKvEPFiSA_SA_E
	.align	16, 0x90
	.type	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC2ES7_iidbPFjPKvEPFiSA_SA_E,@function
_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC2ES7_iidbPFjPKvEPFiSA_SA_E: # @_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC2ES7_iidbPFjPKvEPFiSA_SA_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1984:
	.cfi_def_cfa_offset 16
.Ltmp1985:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1986:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movb	%r8b, %al
	movq	16(%rbp), %r10
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movsd	%xmm0, -32(%rbp)
	andb	$1, %al
	movb	%al, -33(%rbp)
	movq	%r9, -48(%rbp)
	movq	%r10, -56(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movsd	-32(%rbp), %xmm0
	movb	-33(%rbp), %al
	movq	-48(%rbp), %r9
	movq	-56(%rbp), %r10
	movq	%rsp, %r11
	movq	%r10, (%r11)
	movzbl	%al, %r8d
	andl	$1, %r8d
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-64(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core13sc_phash_baseC2EPviidbPFjPKvEPFiS3_S3_E
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp1987:
	.size	_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC2ES7_iidbPFjPKvEPFiSA_SA_E, .Ltmp1987-_ZN7sc_core8sc_phashIPKNS_12sc_process_bEPKN5sc_dt16sc_fxcast_switchEEC2ES7_iidbPFjPKvEPFiSA_SA_E
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxtype_paramsC2EiiNS_9sc_q_modeENS_9sc_o_modeEi,"axG",@progbits,_ZN5sc_dt16sc_fxtype_paramsC2EiiNS_9sc_q_modeENS_9sc_o_modeEi,comdat
	.weak	_ZN5sc_dt16sc_fxtype_paramsC2EiiNS_9sc_q_modeENS_9sc_o_modeEi
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxtype_paramsC2EiiNS_9sc_q_modeENS_9sc_o_modeEi,@function
_ZN5sc_dt16sc_fxtype_paramsC2EiiNS_9sc_q_modeENS_9sc_o_modeEi: # @_ZN5sc_dt16sc_fxtype_paramsC2EiiNS_9sc_q_modeENS_9sc_o_modeEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1990:
	.cfi_def_cfa_offset 16
.Ltmp1991:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1992:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%r8b, %al
	movb	%cl, %r10b
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	andb	$7, %r10b
	movb	%r10b, -17(%rbp)
	andb	$7, %al
	movb	%al, -18(%rbp)
	movl	%r9d, -24(%rbp)
	movq	-8(%rbp), %rdi
	movl	$0, (%rdi)
	movl	$0, 4(%rdi)
	movb	$0, 8(%rdi)
	movb	$0, 9(%rdi)
	movl	$0, 12(%rdi)
	cmpl	$0, -12(%rbp)
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	jg	.LBB169_2
# BB#1:
	movl	$2, %edi
	xorl	%edx, %edx
	movl	$168, %r8d
	movl	$_ZN7sc_core17SC_ID_INVALID_WL_E, %esi
	movl	$.L.str20, %ecx
	callq	_ZN7sc_core17sc_report_handler6reportENS_11sc_severityEPKcS3_S3_i
.LBB169_2:
	cmpl	$0, -24(%rbp)
	jge	.LBB169_4
# BB#3:
	movl	$2, %edi
	xorl	%edx, %edx
	movl	$169, %r8d
	movl	$_ZN7sc_core21SC_ID_INVALID_N_BITS_E, %esi
	movl	$.L.str20, %ecx
	callq	_ZN7sc_core17sc_report_handler6reportENS_11sc_severityEPKcS3_S3_i
.LBB169_4:
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movl	-16(%rbp), %eax
	movl	%eax, 4(%rcx)
	movb	-17(%rbp), %dl
	movb	%dl, 8(%rcx)
	movb	-18(%rbp), %dl
	movb	%dl, 9(%rcx)
	movl	-24(%rbp), %eax
	movl	%eax, 12(%rcx)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1993:
	.size	_ZN5sc_dt16sc_fxtype_paramsC2EiiNS_9sc_q_modeENS_9sc_o_modeEi, .Ltmp1993-_ZN5sc_dt16sc_fxtype_paramsC2EiiNS_9sc_q_modeENS_9sc_o_modeEi
	.cfi_endproc

	.section	.text._ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE,"axG",@progbits,_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE,comdat
	.weak	_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	.align	16, 0x90
	.type	_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE,@function
_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE: # @_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1996:
	.cfi_def_cfa_offset 16
.Ltmp1997:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1998:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rsi
	movq	-32(%rbp), %rcx
	movzbl	%al, %edx
	andl	$1, %edx
	callq	_ZN5sc_dt11scfx_paramsC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1999:
	.size	_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE, .Ltmp1999-_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	.cfi_endproc

	.section	.text._ZN5sc_dt11scfx_paramsC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE,"axG",@progbits,_ZN5sc_dt11scfx_paramsC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE,comdat
	.weak	_ZN5sc_dt11scfx_paramsC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	.align	16, 0x90
	.type	_ZN5sc_dt11scfx_paramsC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE,@function
_ZN5sc_dt11scfx_paramsC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE: # @_ZN5sc_dt11scfx_paramsC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2002:
	.cfi_def_cfa_offset 16
.Ltmp2003:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2004:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt16sc_fxtype_paramsC1ERKS0_
	movb	-17(%rbp), %al
	andb	$1, %al
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movb	%al, 16(%rcx)
	addq	$17, %rcx
	movq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	callq	_ZN5sc_dt16sc_fxcast_switchC1ERKS0_
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movb	16(%rcx), %al
	andb	$1, %al
	movzbl	%al, %edx
	cmpl	$1, %edx
	jne	.LBB171_3
# BB#1:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt16sc_fxtype_params6o_modeEv
	movzbl	%al, %ecx
	cmpl	$4, %ecx
	jne	.LBB171_3
# BB#2:
	movl	$2, %edi
	movl	$124, %r8d
	movl	$_ZN7sc_core21SC_ID_INVALID_O_MODE_E, %esi
	movl	$.L.str21, %edx
	movl	$.L.str22, %ecx
	callq	_ZN7sc_core17sc_report_handler6reportENS_11sc_severityEPKcS3_S3_i
.LBB171_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2005:
	.size	_ZN5sc_dt11scfx_paramsC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE, .Ltmp2005-_ZN5sc_dt11scfx_paramsC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxtype_paramsC1ERKS0_,"axG",@progbits,_ZN5sc_dt16sc_fxtype_paramsC1ERKS0_,comdat
	.weak	_ZN5sc_dt16sc_fxtype_paramsC1ERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxtype_paramsC1ERKS0_,@function
_ZN5sc_dt16sc_fxtype_paramsC1ERKS0_:    # @_ZN5sc_dt16sc_fxtype_paramsC1ERKS0_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2008:
	.cfi_def_cfa_offset 16
.Ltmp2009:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2010:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt16sc_fxtype_paramsC2ERKS0_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2011:
	.size	_ZN5sc_dt16sc_fxtype_paramsC1ERKS0_, .Ltmp2011-_ZN5sc_dt16sc_fxtype_paramsC1ERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxcast_switchC1ERKS0_,"axG",@progbits,_ZN5sc_dt16sc_fxcast_switchC1ERKS0_,comdat
	.weak	_ZN5sc_dt16sc_fxcast_switchC1ERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxcast_switchC1ERKS0_,@function
_ZN5sc_dt16sc_fxcast_switchC1ERKS0_:    # @_ZN5sc_dt16sc_fxcast_switchC1ERKS0_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2014:
	.cfi_def_cfa_offset 16
.Ltmp2015:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2016:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt16sc_fxcast_switchC2ERKS0_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2017:
	.size	_ZN5sc_dt16sc_fxcast_switchC1ERKS0_, .Ltmp2017-_ZN5sc_dt16sc_fxcast_switchC1ERKS0_
	.cfi_endproc

	.section	.text._ZNK5sc_dt16sc_fxtype_params6o_modeEv,"axG",@progbits,_ZNK5sc_dt16sc_fxtype_params6o_modeEv,comdat
	.weak	_ZNK5sc_dt16sc_fxtype_params6o_modeEv
	.align	16, 0x90
	.type	_ZNK5sc_dt16sc_fxtype_params6o_modeEv,@function
_ZNK5sc_dt16sc_fxtype_params6o_modeEv:  # @_ZNK5sc_dt16sc_fxtype_params6o_modeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movzbl	9(%rdi), %eax
	ret
.Ltmp2018:
	.size	_ZNK5sc_dt16sc_fxtype_params6o_modeEv, .Ltmp2018-_ZNK5sc_dt16sc_fxtype_params6o_modeEv
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxcast_switchC2ERKS0_,"axG",@progbits,_ZN5sc_dt16sc_fxcast_switchC2ERKS0_,comdat
	.weak	_ZN5sc_dt16sc_fxcast_switchC2ERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxcast_switchC2ERKS0_,@function
_ZN5sc_dt16sc_fxcast_switchC2ERKS0_:    # @_ZN5sc_dt16sc_fxcast_switchC2ERKS0_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movb	(%rdi), %al
	andb	$1, %al
	movb	%al, (%rsi)
	ret
.Ltmp2019:
	.size	_ZN5sc_dt16sc_fxcast_switchC2ERKS0_, .Ltmp2019-_ZN5sc_dt16sc_fxcast_switchC2ERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt16sc_fxtype_paramsC2ERKS0_,"axG",@progbits,_ZN5sc_dt16sc_fxtype_paramsC2ERKS0_,comdat
	.weak	_ZN5sc_dt16sc_fxtype_paramsC2ERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt16sc_fxtype_paramsC2ERKS0_,@function
_ZN5sc_dt16sc_fxtype_paramsC2ERKS0_:    # @_ZN5sc_dt16sc_fxtype_paramsC2ERKS0_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rdi
	movl	(%rsi), %eax
	movl	%eax, (%rdi)
	movq	-16(%rsp), %rsi
	movl	4(%rsi), %eax
	movl	%eax, 4(%rdi)
	movq	-16(%rsp), %rsi
	movb	8(%rsi), %cl
	movb	%cl, 8(%rdi)
	movq	-16(%rsp), %rsi
	movb	9(%rsi), %cl
	movb	%cl, 9(%rdi)
	movq	-16(%rsp), %rsi
	movl	12(%rsi), %eax
	movl	%eax, 12(%rdi)
	ret
.Ltmp2020:
	.size	_ZN5sc_dt16sc_fxtype_paramsC2ERKS0_, .Ltmp2020-_ZN5sc_dt16sc_fxtype_paramsC2ERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2023:
	.cfi_def_cfa_offset 16
.Ltmp2024:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2025:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$32, %eax
	movl	$16, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rsp, %rdx
	movq	%rdi, (%rdx)
	movl	$32, %r8d
	movl	$16, %edx
	movl	$4, %r9d
	movl	$2, %r10d
	xorl	%r11d, %r11d
	movq	%rsi, %rdi
	movl	%r8d, %esi
	movl	%ecx, -20(%rbp)         # 4-byte Spill
	movl	%r9d, %ecx
	movl	%r10d, %r8d
	movl	%r11d, %r9d
	movl	%eax, -24(%rbp)         # 4-byte Spill
	callq	_ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2026:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE, .Ltmp2026-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE: # @_ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2030:
	.cfi_def_cfa_offset 16
.Ltmp2031:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2032:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
.Ltmp2033:
	.cfi_offset %rbx, -24
	movb	%r8b, %al
	movb	%cl, %r10b
	movq	16(%rbp), %r11
	leaq	-56(%rbp), %rbx
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	andb	$7, %r10b
	movb	%r10b, -25(%rbp)
	andb	$7, %al
	movb	%al, -26(%rbp)
	movl	%r9d, -32(%rbp)
	movq	%r11, -40(%rbp)
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movb	-26(%rbp), %al
	movb	-25(%rbp), %r10b
	movl	-32(%rbp), %r9d
	leaq	-56(%rbp), %r11
	movzbl	%r10b, %ecx
	andl	$7, %ecx
	movzbl	%al, %r8d
	andl	$7, %r8d
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi
	leaq	-64(%rbp), %rdi
	callq	_ZN5sc_dt16sc_fxcast_switchC1Ev
	leaq	-56(%rbp), %rsi
	movl	$0, %edx
	leaq	-64(%rbp), %rcx
	movq	-40(%rbp), %r8
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8sc_fxnumC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
.Ltmp2034:
	.size	_ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE, .Ltmp2034-_ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fxnumC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fxnumC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fxnumC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fxnumC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin179:
	.cfi_lsda 3, .Lexception179
# BB#0:
	pushq	%rbp
.Ltmp2043:
	.cfi_def_cfa_offset 16
.Ltmp2044:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2045:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rcx
	movl	$40, %edi
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repnwEm
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rax, %rdi
.Ltmp2035:
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repC1Ev
.Ltmp2036:
	jmp	.LBB179_1
.LBB179_1:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, (%rax)
	movq	-88(%rbp), %rdx         # 8-byte Reload
	addq	$8, %rdx
	movq	-16(%rbp), %rsi
	movb	-17(%rbp), %dil
	movq	-32(%rbp), %rcx
	movzbl	%dil, %r8d
	andl	$1, %r8d
	movq	%rdx, %rdi
	movl	%r8d, %edx
	callq	_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	movq	-88(%rbp), %rax         # 8-byte Reload
	movb	$0, 28(%rax)
	movb	$0, 29(%rax)
	movq	-40(%rbp), %rcx
	movq	%rcx, 32(%rax)
	addq	$112, %rsp
	popq	%rbp
	ret
.LBB179_2:
.Ltmp2037:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp2038:
	movl	$40, %esi
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp2039:
	jmp	.LBB179_3
.LBB179_3:
	jmp	.LBB179_4
.LBB179_4:
	movq	-48(%rbp), %rdi
	callq	_Unwind_Resume
.LBB179_5:
.Ltmp2040:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2046:
	.size	_ZN5sc_dt8sc_fxnumC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE, .Ltmp2046-_ZN5sc_dt8sc_fxnumC2ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	.cfi_endproc
.Leh_func_end179:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table179:
.Lexception179:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset654 = .Leh_func_begin179-.Leh_func_begin179 # >> Call Site 1 <<
	.long	.Lset654
.Lset655 = .Ltmp2035-.Leh_func_begin179 #   Call between .Leh_func_begin179 and .Ltmp2035
	.long	.Lset655
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset656 = .Ltmp2035-.Leh_func_begin179 # >> Call Site 2 <<
	.long	.Lset656
.Lset657 = .Ltmp2036-.Ltmp2035          #   Call between .Ltmp2035 and .Ltmp2036
	.long	.Lset657
.Lset658 = .Ltmp2037-.Leh_func_begin179 #     jumps to .Ltmp2037
	.long	.Lset658
	.byte	0                       #   On action: cleanup
.Lset659 = .Ltmp2036-.Leh_func_begin179 # >> Call Site 3 <<
	.long	.Lset659
.Lset660 = .Ltmp2038-.Ltmp2036          #   Call between .Ltmp2036 and .Ltmp2038
	.long	.Lset660
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset661 = .Ltmp2038-.Leh_func_begin179 # >> Call Site 4 <<
	.long	.Lset661
.Lset662 = .Ltmp2039-.Ltmp2038          #   Call between .Ltmp2038 and .Ltmp2039
	.long	.Lset662
.Lset663 = .Ltmp2040-.Leh_func_begin179 #     jumps to .Ltmp2040
	.long	.Lset663
	.byte	1                       #   On action: 1
.Lset664 = .Ltmp2039-.Leh_func_begin179 # >> Call Site 5 <<
	.long	.Lset664
.Lset665 = .Leh_func_end179-.Ltmp2039   #   Call between .Ltmp2039 and .Leh_func_end179
	.long	.Lset665
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt7sc_uintILi32EEC2Ei,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC2Ei,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC2Ei
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC2Ei,@function
_ZN5sc_dt7sc_uintILi32EEC2Ei:           # @_ZN5sc_dt7sc_uintILi32EEC2Ei
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin180:
	.cfi_lsda 3, .Lexception180
# BB#0:
	pushq	%rbp
.Ltmp2055:
	.cfi_def_cfa_offset 16
.Ltmp2056:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2057:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	$32, %esi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_baseC2Ei
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt7sc_uintILi32EEE+16, (%rdi)
	movl	-12(%rbp), %esi
.Ltmp2047:
	callq	_ZN5sc_dt12sc_uint_baseaSEi
.Ltmp2048:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB180_1
.LBB180_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB180_2:
.Ltmp2049:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp2050:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
.Ltmp2051:
	jmp	.LBB180_3
.LBB180_3:
	jmp	.LBB180_4
.LBB180_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB180_5:
.Ltmp2052:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2058:
	.size	_ZN5sc_dt7sc_uintILi32EEC2Ei, .Ltmp2058-_ZN5sc_dt7sc_uintILi32EEC2Ei
	.cfi_endproc
.Leh_func_end180:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table180:
.Lexception180:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset666 = .Leh_func_begin180-.Leh_func_begin180 # >> Call Site 1 <<
	.long	.Lset666
.Lset667 = .Ltmp2047-.Leh_func_begin180 #   Call between .Leh_func_begin180 and .Ltmp2047
	.long	.Lset667
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset668 = .Ltmp2047-.Leh_func_begin180 # >> Call Site 2 <<
	.long	.Lset668
.Lset669 = .Ltmp2048-.Ltmp2047          #   Call between .Ltmp2047 and .Ltmp2048
	.long	.Lset669
.Lset670 = .Ltmp2049-.Leh_func_begin180 #     jumps to .Ltmp2049
	.long	.Lset670
	.byte	0                       #   On action: cleanup
.Lset671 = .Ltmp2050-.Leh_func_begin180 # >> Call Site 3 <<
	.long	.Lset671
.Lset672 = .Ltmp2051-.Ltmp2050          #   Call between .Ltmp2050 and .Ltmp2051
	.long	.Lset672
.Lset673 = .Ltmp2052-.Leh_func_begin180 #     jumps to .Ltmp2052
	.long	.Lset673
	.byte	1                       #   On action: 1
.Lset674 = .Ltmp2051-.Leh_func_begin180 # >> Call Site 4 <<
	.long	.Lset674
.Lset675 = .Leh_func_end180-.Ltmp2051   #   Call between .Ltmp2051 and .Leh_func_end180
	.long	.Lset675
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt12sc_uint_baseaSEi,"axG",@progbits,_ZN5sc_dt12sc_uint_baseaSEi,comdat
	.weak	_ZN5sc_dt12sc_uint_baseaSEi
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseaSEi,@function
_ZN5sc_dt12sc_uint_baseaSEi:            # @_ZN5sc_dt12sc_uint_baseaSEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2061:
	.cfi_def_cfa_offset 16
.Ltmp2062:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2063:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movslq	-12(%rbp), %rax
	movq	%rax, 8(%rdi)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_base11extend_signEv
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2064:
	.size	_ZN5sc_dt12sc_uint_baseaSEi, .Ltmp2064-_ZN5sc_dt12sc_uint_baseaSEi
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2067:
	.cfi_def_cfa_offset 16
.Ltmp2068:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2069:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB182_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str18, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB182_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2070:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv, .Ltmp2070-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_fixpLERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt6sc_fixpLERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt6sc_fixpLERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixpLERKNS_8sc_fxvalE,@function
_ZN5sc_dt6sc_fixpLERKNS_8sc_fxvalE:     # @_ZN5sc_dt6sc_fixpLERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2073:
	.cfi_def_cfa_offset 16
.Ltmp2074:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2075:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxnumpLERKNS_8sc_fxvalE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2076:
	.size	_ZN5sc_dt6sc_fixpLERKNS_8sc_fxvalE, .Ltmp2076-_ZN5sc_dt6sc_fixpLERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumpLERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt8sc_fxnumpLERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt8sc_fxnumpLERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumpLERKNS_8sc_fxvalE,@function
_ZN5sc_dt8sc_fxnumpLERKNS_8sc_fxvalE:   # @_ZN5sc_dt8sc_fxnumpLERKNS_8sc_fxvalE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin184:
	.cfi_lsda 3, .Lexception184
# BB#0:
	pushq	%rbp
.Ltmp2085:
	.cfi_def_cfa_offset 16
.Ltmp2086:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2087:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
	movl	$1024, %edx             # imm = 0x400
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt12add_scfx_repERKNS_8scfx_repES2_i
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rsi
	cmpq	$0, %rsi
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	je	.LBB184_3
# BB#1:
.Ltmp2077:
	movq	-64(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repD1Ev
.Ltmp2078:
	jmp	.LBB184_2
.LBB184_2:
	movabsq	$40, %rsi
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN5sc_dt8scfx_repdlEPvm
.LBB184_3:
	movq	-24(%rbp), %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%rcx, %rdi
	callq	_ZN5sc_dt8sc_fxnum4castEv
	movq	-56(%rbp), %rax         # 8-byte Reload
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB184_4:
.Ltmp2079:
	movl	%edx, %ecx
	movq	%rax, -32(%rbp)
	movl	%ecx, -36(%rbp)
.Ltmp2080:
	movl	$40, %esi
	movq	-64(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp2081:
	jmp	.LBB184_5
.LBB184_5:
	jmp	.LBB184_6
.LBB184_6:
	movq	-32(%rbp), %rdi
	callq	_Unwind_Resume
.LBB184_7:
.Ltmp2082:
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2088:
	.size	_ZN5sc_dt8sc_fxnumpLERKNS_8sc_fxvalE, .Ltmp2088-_ZN5sc_dt8sc_fxnumpLERKNS_8sc_fxvalE
	.cfi_endproc
.Leh_func_end184:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table184:
.Lexception184:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset676 = .Leh_func_begin184-.Leh_func_begin184 # >> Call Site 1 <<
	.long	.Lset676
.Lset677 = .Ltmp2077-.Leh_func_begin184 #   Call between .Leh_func_begin184 and .Ltmp2077
	.long	.Lset677
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset678 = .Ltmp2077-.Leh_func_begin184 # >> Call Site 2 <<
	.long	.Lset678
.Lset679 = .Ltmp2078-.Ltmp2077          #   Call between .Ltmp2077 and .Ltmp2078
	.long	.Lset679
.Lset680 = .Ltmp2079-.Leh_func_begin184 #     jumps to .Ltmp2079
	.long	.Lset680
	.byte	0                       #   On action: cleanup
.Lset681 = .Ltmp2078-.Leh_func_begin184 # >> Call Site 3 <<
	.long	.Lset681
.Lset682 = .Ltmp2080-.Ltmp2078          #   Call between .Ltmp2078 and .Ltmp2080
	.long	.Lset682
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset683 = .Ltmp2080-.Leh_func_begin184 # >> Call Site 4 <<
	.long	.Lset683
.Lset684 = .Ltmp2081-.Ltmp2080          #   Call between .Ltmp2080 and .Ltmp2081
	.long	.Lset684
.Lset685 = .Ltmp2082-.Leh_func_begin184 #     jumps to .Ltmp2082
	.long	.Lset685
	.byte	1                       #   On action: 1
.Lset686 = .Ltmp2081-.Leh_func_begin184 # >> Call Site 5 <<
	.long	.Lset686
.Lset687 = .Leh_func_end184-.Ltmp2081   #   Call between .Ltmp2081 and .Leh_func_end184
	.long	.Lset687
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8scfx_repD1Ev,"axG",@progbits,_ZN5sc_dt8scfx_repD1Ev,comdat
	.weak	_ZN5sc_dt8scfx_repD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt8scfx_repD1Ev,@function
_ZN5sc_dt8scfx_repD1Ev:                 # @_ZN5sc_dt8scfx_repD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2091:
	.cfi_def_cfa_offset 16
.Ltmp2092:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2093:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt8scfx_repD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2094:
	.size	_ZN5sc_dt8scfx_repD1Ev, .Ltmp2094-_ZN5sc_dt8scfx_repD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt8scfx_repD2Ev,"axG",@progbits,_ZN5sc_dt8scfx_repD2Ev,comdat
	.weak	_ZN5sc_dt8scfx_repD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt8scfx_repD2Ev,@function
_ZN5sc_dt8scfx_repD2Ev:                 # @_ZN5sc_dt8scfx_repD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2097:
	.cfi_def_cfa_offset 16
.Ltmp2098:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2099:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt9scfx_mantD1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2100:
	.size	_ZN5sc_dt8scfx_repD2Ev, .Ltmp2100-_ZN5sc_dt8scfx_repD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt9scfx_mantD1Ev,"axG",@progbits,_ZN5sc_dt9scfx_mantD1Ev,comdat
	.weak	_ZN5sc_dt9scfx_mantD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt9scfx_mantD1Ev,@function
_ZN5sc_dt9scfx_mantD1Ev:                # @_ZN5sc_dt9scfx_mantD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2103:
	.cfi_def_cfa_offset 16
.Ltmp2104:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2105:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt9scfx_mantD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2106:
	.size	_ZN5sc_dt9scfx_mantD1Ev, .Ltmp2106-_ZN5sc_dt9scfx_mantD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt9scfx_mantD2Ev,"axG",@progbits,_ZN5sc_dt9scfx_mantD2Ev,comdat
	.weak	_ZN5sc_dt9scfx_mantD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt9scfx_mantD2Ev,@function
_ZN5sc_dt9scfx_mantD2Ev:                # @_ZN5sc_dt9scfx_mantD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2109:
	.cfi_def_cfa_offset 16
.Ltmp2110:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2111:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, (%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	je	.LBB188_2
# BB#1:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movslq	8(%rax), %rsi
	callq	_ZN5sc_dt9scfx_mant4freeEPjm
.LBB188_2:
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2112:
	.size	_ZN5sc_dt9scfx_mantD2Ev, .Ltmp2112-_ZN5sc_dt9scfx_mantD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_fixmIERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt6sc_fixmIERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt6sc_fixmIERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixmIERKNS_8sc_fxvalE,@function
_ZN5sc_dt6sc_fixmIERKNS_8sc_fxvalE:     # @_ZN5sc_dt6sc_fixmIERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2115:
	.cfi_def_cfa_offset 16
.Ltmp2116:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2117:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxnummIERKNS_8sc_fxvalE
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2118:
	.size	_ZN5sc_dt6sc_fixmIERKNS_8sc_fxvalE, .Ltmp2118-_ZN5sc_dt6sc_fixmIERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnummIERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt8sc_fxnummIERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt8sc_fxnummIERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnummIERKNS_8sc_fxvalE,@function
_ZN5sc_dt8sc_fxnummIERKNS_8sc_fxvalE:   # @_ZN5sc_dt8sc_fxnummIERKNS_8sc_fxvalE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin190:
	.cfi_lsda 3, .Lexception190
# BB#0:
	pushq	%rbp
.Ltmp2127:
	.cfi_def_cfa_offset 16
.Ltmp2128:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2129:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
	movl	$1024, %edx             # imm = 0x400
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN5sc_dt12sub_scfx_repERKNS_8scfx_repES2_i
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rsi
	cmpq	$0, %rsi
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	je	.LBB190_3
# BB#1:
.Ltmp2119:
	movq	-64(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repD1Ev
.Ltmp2120:
	jmp	.LBB190_2
.LBB190_2:
	movabsq	$40, %rsi
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN5sc_dt8scfx_repdlEPvm
.LBB190_3:
	movq	-24(%rbp), %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%rcx, %rdi
	callq	_ZN5sc_dt8sc_fxnum4castEv
	movq	-56(%rbp), %rax         # 8-byte Reload
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB190_4:
.Ltmp2121:
	movl	%edx, %ecx
	movq	%rax, -32(%rbp)
	movl	%ecx, -36(%rbp)
.Ltmp2122:
	movl	$40, %esi
	movq	-64(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp2123:
	jmp	.LBB190_5
.LBB190_5:
	jmp	.LBB190_6
.LBB190_6:
	movq	-32(%rbp), %rdi
	callq	_Unwind_Resume
.LBB190_7:
.Ltmp2124:
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2130:
	.size	_ZN5sc_dt8sc_fxnummIERKNS_8sc_fxvalE, .Ltmp2130-_ZN5sc_dt8sc_fxnummIERKNS_8sc_fxvalE
	.cfi_endproc
.Leh_func_end190:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table190:
.Lexception190:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset688 = .Leh_func_begin190-.Leh_func_begin190 # >> Call Site 1 <<
	.long	.Lset688
.Lset689 = .Ltmp2119-.Leh_func_begin190 #   Call between .Leh_func_begin190 and .Ltmp2119
	.long	.Lset689
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset690 = .Ltmp2119-.Leh_func_begin190 # >> Call Site 2 <<
	.long	.Lset690
.Lset691 = .Ltmp2120-.Ltmp2119          #   Call between .Ltmp2119 and .Ltmp2120
	.long	.Lset691
.Lset692 = .Ltmp2121-.Leh_func_begin190 #     jumps to .Ltmp2121
	.long	.Lset692
	.byte	0                       #   On action: cleanup
.Lset693 = .Ltmp2120-.Leh_func_begin190 # >> Call Site 3 <<
	.long	.Lset693
.Lset694 = .Ltmp2122-.Ltmp2120          #   Call between .Ltmp2120 and .Ltmp2122
	.long	.Lset694
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset695 = .Ltmp2122-.Leh_func_begin190 # >> Call Site 4 <<
	.long	.Lset695
.Lset696 = .Ltmp2123-.Ltmp2122          #   Call between .Ltmp2122 and .Ltmp2123
	.long	.Lset696
.Lset697 = .Ltmp2124-.Leh_func_begin190 #     jumps to .Ltmp2124
	.long	.Lset697
	.byte	1                       #   On action: 1
.Lset698 = .Ltmp2123-.Leh_func_begin190 # >> Call Site 5 <<
	.long	.Lset698
.Lset699 = .Leh_func_end190-.Ltmp2123   #   Call between .Ltmp2123 and .Leh_func_end190
	.long	.Lset699
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt6sc_fixaSEd,"axG",@progbits,_ZN5sc_dt6sc_fixaSEd,comdat
	.weak	_ZN5sc_dt6sc_fixaSEd
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixaSEd,@function
_ZN5sc_dt6sc_fixaSEd:                   # @_ZN5sc_dt6sc_fixaSEd
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2133:
	.cfi_def_cfa_offset 16
.Ltmp2134:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2135:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movsd	-16(%rbp), %xmm0
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fxnumaSEd
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2136:
	.size	_ZN5sc_dt6sc_fixaSEd, .Ltmp2136-_ZN5sc_dt6sc_fixaSEd
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumaSEd,"axG",@progbits,_ZN5sc_dt8sc_fxnumaSEd,comdat
	.weak	_ZN5sc_dt8sc_fxnumaSEd
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumaSEd,@function
_ZN5sc_dt8sc_fxnumaSEd:                 # @_ZN5sc_dt8sc_fxnumaSEd
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin192:
	.cfi_lsda 3, .Lexception192
# BB#0:
	pushq	%rbp
.Ltmp2149:
	.cfi_def_cfa_offset 16
.Ltmp2150:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2151:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rdi
	leaq	-32(%rbp), %rax
	xorl	%esi, %esi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp2137:
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	callq	_ZNK5sc_dt8sc_fxval7get_repEv
.Ltmp2138:
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB192_1
.LBB192_1:
.Ltmp2139:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repaSERKS0_
.Ltmp2140:
	jmp	.LBB192_2
.LBB192_2:
.Ltmp2141:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8sc_fxnum4castEv
.Ltmp2142:
	jmp	.LBB192_3
.LBB192_3:
	leaq	-32(%rbp), %rdi
	movl	$1, -48(%rbp)
	callq	_ZN5sc_dt8sc_fxvalD1Ev
	movq	-56(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.LBB192_4:
.Ltmp2143:
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
.Ltmp2144:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxvalD1Ev
.Ltmp2145:
	jmp	.LBB192_5
.LBB192_5:
	jmp	.LBB192_6
.LBB192_6:
	movq	-40(%rbp), %rdi
	callq	_Unwind_Resume
.LBB192_7:
.Ltmp2146:
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2152:
	.size	_ZN5sc_dt8sc_fxnumaSEd, .Ltmp2152-_ZN5sc_dt8sc_fxnumaSEd
	.cfi_endproc
.Leh_func_end192:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table192:
.Lexception192:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset700 = .Leh_func_begin192-.Leh_func_begin192 # >> Call Site 1 <<
	.long	.Lset700
.Lset701 = .Ltmp2137-.Leh_func_begin192 #   Call between .Leh_func_begin192 and .Ltmp2137
	.long	.Lset701
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset702 = .Ltmp2137-.Leh_func_begin192 # >> Call Site 2 <<
	.long	.Lset702
.Lset703 = .Ltmp2142-.Ltmp2137          #   Call between .Ltmp2137 and .Ltmp2142
	.long	.Lset703
.Lset704 = .Ltmp2143-.Leh_func_begin192 #     jumps to .Ltmp2143
	.long	.Lset704
	.byte	0                       #   On action: cleanup
.Lset705 = .Ltmp2142-.Leh_func_begin192 # >> Call Site 3 <<
	.long	.Lset705
.Lset706 = .Ltmp2144-.Ltmp2142          #   Call between .Ltmp2142 and .Ltmp2144
	.long	.Lset706
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset707 = .Ltmp2144-.Leh_func_begin192 # >> Call Site 4 <<
	.long	.Lset707
.Lset708 = .Ltmp2145-.Ltmp2144          #   Call between .Ltmp2144 and .Ltmp2145
	.long	.Lset708
.Lset709 = .Ltmp2146-.Leh_func_begin192 #     jumps to .Ltmp2146
	.long	.Lset709
	.byte	1                       #   On action: 1
.Lset710 = .Ltmp2145-.Leh_func_begin192 # >> Call Site 5 <<
	.long	.Lset710
.Lset711 = .Leh_func_end192-.Ltmp2145   #   Call between .Ltmp2145 and .Leh_func_end192
	.long	.Lset711
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE,"axG",@progbits,_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE,comdat
	.weak	_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE,@function
_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE: # @_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2155:
	.cfi_def_cfa_offset 16
.Ltmp2156:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2157:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	movq	-24(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fxvalC2EdPNS_17sc_fxval_observerE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2158:
	.size	_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE, .Ltmp2158-_ZN5sc_dt8sc_fxvalC1EdPNS_17sc_fxval_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxvalC2EdPNS_17sc_fxval_observerE,"axG",@progbits,_ZN5sc_dt8sc_fxvalC2EdPNS_17sc_fxval_observerE,comdat
	.weak	_ZN5sc_dt8sc_fxvalC2EdPNS_17sc_fxval_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxvalC2EdPNS_17sc_fxval_observerE,@function
_ZN5sc_dt8sc_fxvalC2EdPNS_17sc_fxval_observerE: # @_ZN5sc_dt8sc_fxvalC2EdPNS_17sc_fxval_observerE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin194:
	.cfi_lsda 3, .Lexception194
# BB#0:
	pushq	%rbp
.Ltmp2167:
	.cfi_def_cfa_offset 16
.Ltmp2168:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2169:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rsi
	movl	$40, %edi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repnwEm
	movsd	-16(%rbp), %xmm0
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, %rcx
.Ltmp2159:
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movq	%rsi, -72(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repC1Ed
.Ltmp2160:
	jmp	.LBB194_1
.LBB194_1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, (%rax)
	movq	-24(%rbp), %rdx
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	%rdx, 8(%rsi)
	addq	$96, %rsp
	popq	%rbp
	ret
.LBB194_2:
.Ltmp2161:
	movl	%edx, %ecx
	movq	%rax, -32(%rbp)
	movl	%ecx, -36(%rbp)
.Ltmp2162:
	movl	$40, %esi
	movq	-64(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp2163:
	jmp	.LBB194_3
.LBB194_3:
	jmp	.LBB194_4
.LBB194_4:
	movq	-32(%rbp), %rdi
	callq	_Unwind_Resume
.LBB194_5:
.Ltmp2164:
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2170:
	.size	_ZN5sc_dt8sc_fxvalC2EdPNS_17sc_fxval_observerE, .Ltmp2170-_ZN5sc_dt8sc_fxvalC2EdPNS_17sc_fxval_observerE
	.cfi_endproc
.Leh_func_end194:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table194:
.Lexception194:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset712 = .Leh_func_begin194-.Leh_func_begin194 # >> Call Site 1 <<
	.long	.Lset712
.Lset713 = .Ltmp2159-.Leh_func_begin194 #   Call between .Leh_func_begin194 and .Ltmp2159
	.long	.Lset713
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset714 = .Ltmp2159-.Leh_func_begin194 # >> Call Site 2 <<
	.long	.Lset714
.Lset715 = .Ltmp2160-.Ltmp2159          #   Call between .Ltmp2159 and .Ltmp2160
	.long	.Lset715
.Lset716 = .Ltmp2161-.Leh_func_begin194 #     jumps to .Ltmp2161
	.long	.Lset716
	.byte	0                       #   On action: cleanup
.Lset717 = .Ltmp2162-.Leh_func_begin194 # >> Call Site 3 <<
	.long	.Lset717
.Lset718 = .Ltmp2163-.Ltmp2162          #   Call between .Ltmp2162 and .Ltmp2163
	.long	.Lset718
.Lset719 = .Ltmp2164-.Leh_func_begin194 #     jumps to .Ltmp2164
	.long	.Lset719
	.byte	1                       #   On action: 1
.Lset720 = .Ltmp2163-.Leh_func_begin194 # >> Call Site 4 <<
	.long	.Lset720
.Lset721 = .Leh_func_end194-.Ltmp2163   #   Call between .Ltmp2163 and .Leh_func_end194
	.long	.Lset721
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt6sc_fixpLERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt6sc_fixpLERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt6sc_fixpLERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixpLERKNS_8sc_fxnumE,@function
_ZN5sc_dt6sc_fixpLERKNS_8sc_fxnumE:     # @_ZN5sc_dt6sc_fixpLERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2173:
	.cfi_def_cfa_offset 16
.Ltmp2174:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2175:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxnumpLERKS0_
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2176:
	.size	_ZN5sc_dt6sc_fixpLERKNS_8sc_fxnumE, .Ltmp2176-_ZN5sc_dt6sc_fixpLERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumpLERKS0_,"axG",@progbits,_ZN5sc_dt8sc_fxnumpLERKS0_,comdat
	.weak	_ZN5sc_dt8sc_fxnumpLERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumpLERKS0_,@function
_ZN5sc_dt8sc_fxnumpLERKS0_:             # @_ZN5sc_dt8sc_fxnumpLERKS0_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin196:
	.cfi_lsda 3, .Lexception196
# BB#0:
	pushq	%rbp
.Ltmp2185:
	.cfi_def_cfa_offset 16
.Ltmp2186:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2187:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1024, %edx             # imm = 0x400
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt12add_scfx_repERKNS_8scfx_repES2_i
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rsi
	cmpq	$0, %rsi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	je	.LBB196_3
# BB#1:
.Ltmp2177:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repD1Ev
.Ltmp2178:
	jmp	.LBB196_2
.LBB196_2:
	movabsq	$40, %rsi
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN5sc_dt8scfx_repdlEPvm
.LBB196_3:
	movq	-24(%rbp), %rax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%rcx, %rdi
	callq	_ZN5sc_dt8sc_fxnum4castEv
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB196_4:
.Ltmp2179:
	movl	%edx, %ecx
	movq	%rax, -32(%rbp)
	movl	%ecx, -36(%rbp)
.Ltmp2180:
	movl	$40, %esi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp2181:
	jmp	.LBB196_5
.LBB196_5:
	jmp	.LBB196_6
.LBB196_6:
	movq	-32(%rbp), %rdi
	callq	_Unwind_Resume
.LBB196_7:
.Ltmp2182:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2188:
	.size	_ZN5sc_dt8sc_fxnumpLERKS0_, .Ltmp2188-_ZN5sc_dt8sc_fxnumpLERKS0_
	.cfi_endproc
.Leh_func_end196:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table196:
.Lexception196:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset722 = .Leh_func_begin196-.Leh_func_begin196 # >> Call Site 1 <<
	.long	.Lset722
.Lset723 = .Ltmp2177-.Leh_func_begin196 #   Call between .Leh_func_begin196 and .Ltmp2177
	.long	.Lset723
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset724 = .Ltmp2177-.Leh_func_begin196 # >> Call Site 2 <<
	.long	.Lset724
.Lset725 = .Ltmp2178-.Ltmp2177          #   Call between .Ltmp2177 and .Ltmp2178
	.long	.Lset725
.Lset726 = .Ltmp2179-.Leh_func_begin196 #     jumps to .Ltmp2179
	.long	.Lset726
	.byte	0                       #   On action: cleanup
.Lset727 = .Ltmp2178-.Leh_func_begin196 # >> Call Site 3 <<
	.long	.Lset727
.Lset728 = .Ltmp2180-.Ltmp2178          #   Call between .Ltmp2178 and .Ltmp2180
	.long	.Lset728
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset729 = .Ltmp2180-.Leh_func_begin196 # >> Call Site 4 <<
	.long	.Lset729
.Lset730 = .Ltmp2181-.Ltmp2180          #   Call between .Ltmp2180 and .Ltmp2181
	.long	.Lset730
.Lset731 = .Ltmp2182-.Leh_func_begin196 #     jumps to .Ltmp2182
	.long	.Lset731
	.byte	1                       #   On action: 1
.Lset732 = .Ltmp2181-.Leh_func_begin196 # >> Call Site 5 <<
	.long	.Lset732
.Lset733 = .Leh_func_end196-.Ltmp2181   #   Call between .Ltmp2181 and .Leh_func_end196
	.long	.Lset733
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt6sc_fixaSERKS0_,"axG",@progbits,_ZN5sc_dt6sc_fixaSERKS0_,comdat
	.weak	_ZN5sc_dt6sc_fixaSERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixaSERKS0_,@function
_ZN5sc_dt6sc_fixaSERKS0_:               # @_ZN5sc_dt6sc_fixaSERKS0_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2191:
	.cfi_def_cfa_offset 16
.Ltmp2192:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2193:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt8sc_fxnumaSERKS0_
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2194:
	.size	_ZN5sc_dt6sc_fixaSERKS0_, .Ltmp2194-_ZN5sc_dt6sc_fixaSERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2197:
	.cfi_def_cfa_offset 16
.Ltmp2198:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2199:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$32, %eax
	movl	$16, %ecx
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rsi
	movsd	-16(%rbp), %xmm0
	movq	-24(%rbp), %rdi
	movq	%rsp, %rdx
	movq	%rdi, (%rdx)
	movl	$32, %r8d
	movl	$16, %edx
	movl	$4, %r9d
	movl	$2, %r10d
	xorl	%r11d, %r11d
	movq	%rsi, %rdi
	movl	%r8d, %esi
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movl	%r9d, %ecx
	movl	%r10d, %r8d
	movl	%r11d, %r9d
	movl	%eax, -32(%rbp)         # 4-byte Spill
	callq	_ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2200:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE, .Ltmp2200-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE: # @_ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2204:
	.cfi_def_cfa_offset 16
.Ltmp2205:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2206:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
.Ltmp2207:
	.cfi_offset %rbx, -24
	movb	%r8b, %al
	movb	%cl, %r10b
	movq	16(%rbp), %r11
	leaq	-64(%rbp), %rbx
	movq	%rdi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	andb	$7, %r10b
	movb	%r10b, -33(%rbp)
	andb	$7, %al
	movb	%al, -34(%rbp)
	movl	%r9d, -40(%rbp)
	movq	%r11, -48(%rbp)
	movq	-16(%rbp), %rdi
	movsd	-24(%rbp), %xmm0
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movb	-34(%rbp), %al
	movb	-33(%rbp), %r10b
	movl	-40(%rbp), %r9d
	leaq	-64(%rbp), %r11
	movzbl	%r10b, %ecx
	andl	$7, %ecx
	movzbl	%al, %r8d
	andl	$7, %r8d
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rbx, -88(%rbp)         # 8-byte Spill
	movsd	%xmm0, -96(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt16sc_fxtype_paramsC1EiiNS_9sc_q_modeENS_9sc_o_modeEi
	leaq	-72(%rbp), %rdi
	callq	_ZN5sc_dt16sc_fxcast_switchC1Ev
	leaq	-64(%rbp), %rsi
	movl	$0, %edx
	leaq	-72(%rbp), %rcx
	movq	-48(%rbp), %r8
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movsd	-96(%rbp), %xmm0        # 8-byte Reload
	callq	_ZN5sc_dt8sc_fxnumC2EdRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	ret
.Ltmp2208:
	.size	_ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE, .Ltmp2208-_ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumC2EdRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fxnumC2EdRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fxnumC2EdRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumC2EdRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fxnumC2EdRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fxnumC2EdRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin200:
	.cfi_lsda 3, .Lexception200
# BB#0:
	pushq	%rbp
.Ltmp2217:
	.cfi_def_cfa_offset 16
.Ltmp2218:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2219:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	%rsi, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	-8(%rbp), %rcx
	movl	$40, %edi
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repnwEm
	movsd	-16(%rbp), %xmm0
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rax, %rdi
.Ltmp2209:
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repC1Ed
.Ltmp2210:
	jmp	.LBB200_1
.LBB200_1:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rcx, (%rax)
	movq	-96(%rbp), %rdx         # 8-byte Reload
	addq	$8, %rdx
	movq	-24(%rbp), %rsi
	movb	-25(%rbp), %dil
	movq	-40(%rbp), %rcx
	movzbl	%dil, %r8d
	andl	$1, %r8d
	movq	%rdx, %rdi
	movl	%r8d, %edx
	callq	_ZN5sc_dt11scfx_paramsC1ERKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchE
	movq	-96(%rbp), %rax         # 8-byte Reload
	movb	$0, 28(%rax)
	movb	$0, 29(%rax)
	movq	-48(%rbp), %rcx
	movq	%rcx, 32(%rax)
	movq	%rax, %rdi
	callq	_ZN5sc_dt8sc_fxnum4castEv
	addq	$112, %rsp
	popq	%rbp
	ret
.LBB200_2:
.Ltmp2211:
	movl	%edx, %ecx
	movq	%rax, -56(%rbp)
	movl	%ecx, -60(%rbp)
.Ltmp2212:
	movl	$40, %esi
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp2213:
	jmp	.LBB200_3
.LBB200_3:
	jmp	.LBB200_4
.LBB200_4:
	movq	-56(%rbp), %rdi
	callq	_Unwind_Resume
.LBB200_5:
.Ltmp2214:
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rdx, -112(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2220:
	.size	_ZN5sc_dt8sc_fxnumC2EdRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE, .Ltmp2220-_ZN5sc_dt8sc_fxnumC2EdRKNS_16sc_fxtype_paramsENS_6sc_encERKNS_16sc_fxcast_switchEPNS_17sc_fxnum_observerE
	.cfi_endproc
.Leh_func_end200:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table200:
.Lexception200:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset734 = .Leh_func_begin200-.Leh_func_begin200 # >> Call Site 1 <<
	.long	.Lset734
.Lset735 = .Ltmp2209-.Leh_func_begin200 #   Call between .Leh_func_begin200 and .Ltmp2209
	.long	.Lset735
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset736 = .Ltmp2209-.Leh_func_begin200 # >> Call Site 2 <<
	.long	.Lset736
.Lset737 = .Ltmp2210-.Ltmp2209          #   Call between .Ltmp2209 and .Ltmp2210
	.long	.Lset737
.Lset738 = .Ltmp2211-.Leh_func_begin200 #     jumps to .Ltmp2211
	.long	.Lset738
	.byte	0                       #   On action: cleanup
.Lset739 = .Ltmp2210-.Leh_func_begin200 # >> Call Site 3 <<
	.long	.Lset739
.Lset740 = .Ltmp2212-.Ltmp2210          #   Call between .Ltmp2210 and .Ltmp2212
	.long	.Lset740
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset741 = .Ltmp2212-.Leh_func_begin200 # >> Call Site 4 <<
	.long	.Lset741
.Lset742 = .Ltmp2213-.Ltmp2212          #   Call between .Ltmp2212 and .Ltmp2213
	.long	.Lset742
.Lset743 = .Ltmp2214-.Leh_func_begin200 #     jumps to .Ltmp2214
	.long	.Lset743
	.byte	1                       #   On action: 1
.Lset744 = .Ltmp2213-.Leh_func_begin200 # >> Call Site 5 <<
	.long	.Lset744
.Lset745 = .Leh_func_end200-.Ltmp2213   #   Call between .Ltmp2213 and .Leh_func_end200
	.long	.Lset745
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2223:
	.cfi_def_cfa_offset 16
.Ltmp2224:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2225:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$21, %eax
	movl	$5, %ecx
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rsi
	movsd	-16(%rbp), %xmm0
	movq	-24(%rbp), %rdi
	movq	%rsp, %rdx
	movq	%rdi, (%rdx)
	movl	$21, %r8d
	movl	$5, %edx
	movl	$4, %r9d
	movl	$2, %r10d
	xorl	%r11d, %r11d
	movq	%rsi, %rdi
	movl	%r8d, %esi
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movl	%r9d, %ecx
	movl	%r10d, %r8d
	movl	%r11d, %r9d
	movl	%eax, -32(%rbp)         # 4-byte Spill
	callq	_ZN5sc_dt6sc_fixC2EdiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2226:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE, .Ltmp2226-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EdPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIbED2Ev,"axG",@progbits,_ZN7sc_core6sc_outIbED2Ev,comdat
	.weak	_ZN7sc_core6sc_outIbED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbED2Ev,@function
_ZN7sc_core6sc_outIbED2Ev:              # @_ZN7sc_core6sc_outIbED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2229:
	.cfi_def_cfa_offset 16
.Ltmp2230:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2231:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core8sc_inoutIbED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2232:
	.size	_ZN7sc_core6sc_outIbED2Ev, .Ltmp2232-_ZN7sc_core6sc_outIbED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2235:
	.cfi_def_cfa_offset 16
.Ltmp2236:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2237:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2238:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev, .Ltmp2238-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin204:
	.cfi_lsda 3, .Lexception204
# BB#0:
	pushq	%rbp
.Ltmp2251:
	.cfi_def_cfa_offset 16
.Ltmp2252:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2253:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, %rax
	addq	$16, %rax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rax, (%rdi)
	movq	144(%rdi), %rax
	cmpq	$0, %rax
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	je	.LBB204_3
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp2239:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp2240:
	jmp	.LBB204_2
.LBB204_2:
	jmp	.LBB204_3
.LBB204_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	je	.LBB204_6
# BB#4:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	80(%rcx), %rcx
.Ltmp2241:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp2242:
	jmp	.LBB204_5
.LBB204_5:
	jmp	.LBB204_6
.LBB204_6:
.Ltmp2243:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
.Ltmp2244:
	jmp	.LBB204_7
.LBB204_7:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB204_8:
.Ltmp2245:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2246:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
.Ltmp2247:
	jmp	.LBB204_9
.LBB204_9:
	jmp	.LBB204_10
.LBB204_10:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB204_11:
.Ltmp2248:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2254:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev, .Ltmp2254-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_endproc
.Leh_func_end204:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table204:
.Lexception204:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset746 = .Ltmp2239-.Leh_func_begin204 # >> Call Site 1 <<
	.long	.Lset746
.Lset747 = .Ltmp2244-.Ltmp2239          #   Call between .Ltmp2239 and .Ltmp2244
	.long	.Lset747
.Lset748 = .Ltmp2245-.Leh_func_begin204 #     jumps to .Ltmp2245
	.long	.Lset748
	.byte	0                       #   On action: cleanup
.Lset749 = .Ltmp2244-.Leh_func_begin204 # >> Call Site 2 <<
	.long	.Lset749
.Lset750 = .Ltmp2246-.Ltmp2244          #   Call between .Ltmp2244 and .Ltmp2246
	.long	.Lset750
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset751 = .Ltmp2246-.Leh_func_begin204 # >> Call Site 3 <<
	.long	.Lset751
.Lset752 = .Ltmp2247-.Ltmp2246          #   Call between .Ltmp2246 and .Ltmp2247
	.long	.Lset752
.Lset753 = .Ltmp2248-.Leh_func_begin204 #     jumps to .Ltmp2248
	.long	.Lset753
	.byte	1                       #   On action: 1
.Lset754 = .Ltmp2247-.Leh_func_begin204 # >> Call Site 4 <<
	.long	.Lset754
.Lset755 = .Leh_func_end204-.Ltmp2247   #   Call between .Ltmp2247 and .Leh_func_end204
	.long	.Lset755
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,"axG",@progbits,_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,comdat
	.weak	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.align	16, 0x90
	.type	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,@function
_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv: # @_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin205:
	.cfi_lsda 3, .Lexception205
# BB#0:
	pushq	%rbp
.Ltmp2263:
	.cfi_def_cfa_offset 16
.Ltmp2264:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2265:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 136(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB205_14
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	subq	$1, %rax
	movl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB205_2:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB205_9
# BB#3:                                 #   in Loop: Header=BB205_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	cmpq	$0, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB205_6
# BB#4:                                 #   in Loop: Header=BB205_2 Depth=1
.Ltmp2258:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core15sc_trace_paramsD1Ev
.Ltmp2259:
	jmp	.LBB205_5
.LBB205_5:                              #   in Loop: Header=BB205_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB205_6:                              #   in Loop: Header=BB205_2 Depth=1
	jmp	.LBB205_7
.LBB205_7:                              #   in Loop: Header=BB205_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -12(%rbp)
	jmp	.LBB205_2
.LBB205_8:
.Ltmp2260:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB205_15
.LBB205_9:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	je	.LBB205_12
# BB#10:
.Ltmp2255:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
.Ltmp2256:
	jmp	.LBB205_11
.LBB205_11:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB205_12:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	$0, 136(%rax)
	jmp	.LBB205_14
.LBB205_13:
.Ltmp2257:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB205_15
.LBB205_14:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB205_15:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2266:
	.size	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv, .Ltmp2266-_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.cfi_endproc
.Leh_func_end205:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table205:
.Lexception205:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset756 = .Ltmp2258-.Leh_func_begin205 # >> Call Site 1 <<
	.long	.Lset756
.Lset757 = .Ltmp2259-.Ltmp2258          #   Call between .Ltmp2258 and .Ltmp2259
	.long	.Lset757
.Lset758 = .Ltmp2260-.Leh_func_begin205 #     jumps to .Ltmp2260
	.long	.Lset758
	.byte	0                       #   On action: cleanup
.Lset759 = .Ltmp2255-.Leh_func_begin205 # >> Call Site 2 <<
	.long	.Lset759
.Lset760 = .Ltmp2256-.Ltmp2255          #   Call between .Ltmp2255 and .Ltmp2256
	.long	.Lset760
.Lset761 = .Ltmp2257-.Leh_func_begin205 #     jumps to .Ltmp2257
	.long	.Lset761
	.byte	0                       #   On action: cleanup
.Lset762 = .Ltmp2256-.Leh_func_begin205 # >> Call Site 3 <<
	.long	.Lset762
.Lset763 = .Leh_func_end205-.Ltmp2256   #   Call between .Ltmp2256 and .Leh_func_end205
	.long	.Lset763
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2269:
	.cfi_def_cfa_offset 16
.Ltmp2270:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2271:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2272:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp2272-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv,"axG",@progbits,_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv,comdat
	.weak	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv,@function
_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv: # @_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str28, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2273:
	.size	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv, .Ltmp2273-_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_object17get_child_objectsEv,"axG",@progbits,_ZNK7sc_core9sc_object17get_child_objectsEv,comdat
	.weak	_ZNK7sc_core9sc_object17get_child_objectsEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_object17get_child_objectsEv,@function
_ZNK7sc_core9sc_object17get_child_objectsEv: # @_ZNK7sc_core9sc_object17get_child_objectsEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	addq	$40, %rdi
	movq	%rdi, %rax
	ret
.Ltmp2274:
	.size	_ZNK7sc_core9sc_object17get_child_objectsEv, .Ltmp2274-_ZNK7sc_core9sc_object17get_child_objectsEv
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2277:
	.cfi_def_cfa_offset 16
.Ltmp2278:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2279:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2280:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev, .Ltmp2280-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin210:
	.cfi_lsda 3, .Lexception210
# BB#0:
	pushq	%rbp
.Ltmp2286:
	.cfi_def_cfa_offset 16
.Ltmp2287:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2288:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2281:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp2282:
	jmp	.LBB210_1
.LBB210_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB210_2:
.Ltmp2283:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2289:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev, .Ltmp2289-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_endproc
.Leh_func_end210:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table210:
.Lexception210:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset764 = .Ltmp2281-.Leh_func_begin210 # >> Call Site 1 <<
	.long	.Lset764
.Lset765 = .Ltmp2282-.Ltmp2281          #   Call between .Ltmp2281 and .Ltmp2282
	.long	.Lset765
.Lset766 = .Ltmp2283-.Leh_func_begin210 #     jumps to .Ltmp2283
	.long	.Lset766
	.byte	0                       #   On action: cleanup
.Lset767 = .Ltmp2282-.Leh_func_begin210 # >> Call Site 2 <<
	.long	.Lset767
.Lset768 = .Leh_func_end210-.Ltmp2282   #   Call between .Ltmp2282 and .Leh_func_end210
	.long	.Lset768
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB211_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB211_3
.LBB211_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB211_3
.LBB211_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp2290:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv, .Ltmp2290-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB212_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB212_3
.LBB212_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB212_3
.LBB212_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp2291:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv, .Ltmp2291-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2294:
	.cfi_def_cfa_offset 16
.Ltmp2295:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2296:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB213_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB213_3
.LBB213_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB213_3
.LBB213_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB213_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB213_6
.LBB213_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB213_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2297:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE, .Ltmp2297-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2300:
	.cfi_def_cfa_offset 16
.Ltmp2301:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2302:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB214_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB214_3
.LBB214_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB214_3
.LBB214_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB214_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB214_6
.LBB214_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB214_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2303:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE, .Ltmp2303-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2306:
	.cfi_def_cfa_offset 16
.Ltmp2307:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2308:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB215_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB215_3
.LBB215_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB215_3
.LBB215_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB215_5
# BB#4:
	jmp	.LBB215_6
.LBB215_5:
	leaq	.L.str25, %rdi
	leaq	.L.str24, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB215_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB215_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB215_12
# BB#8:                                 #   in Loop: Header=BB215_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB215_10
# BB#9:                                 #   in Loop: Header=BB215_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str26, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB215_10:                             #   in Loop: Header=BB215_7 Depth=1
	jmp	.LBB215_11
.LBB215_11:                             #   in Loop: Header=BB215_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB215_7
.LBB215_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp2309:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp2309-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2312:
	.cfi_def_cfa_offset 16
.Ltmp2313:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2314:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2315:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv, .Ltmp2315-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2318:
	.cfi_def_cfa_offset 16
.Ltmp2319:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2320:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2321:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv, .Ltmp2321-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2324:
	.cfi_def_cfa_offset 16
.Ltmp2325:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2326:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB218_4
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rsi
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rsi
	cmpq	$0, %rsi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	je	.LBB218_3
# BB#2:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	%rax, %rdi
	callq	*80(%rcx)
.LBB218_3:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	$0, 128(%rax)
.LBB218_4:
	movq	-40(%rbp), %rax         # 8-byte Reload
	cmpq	$0, 136(%rax)
	je	.LBB218_13
# BB#5:
	movl	$0, -12(%rbp)
.LBB218_6:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movq	136(%rcx), %rdi
	movl	%eax, -52(%rbp)         # 4-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %edx
	movl	-52(%rbp), %esi         # 4-byte Reload
	cmpl	%edx, %esi
	jge	.LBB218_12
# BB#7:                                 #   in Loop: Header=BB218_6 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rdi
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-64(%rbp), %rax         # 8-byte Reload
	callq	*112(%rax)
	cmpq	$0, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	je	.LBB218_9
# BB#8:                                 #   in Loop: Header=BB218_6 Depth=1
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-80(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB218_10
.LBB218_9:                              #   in Loop: Header=BB218_6 Depth=1
	movabsq	$0, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB218_10
.LBB218_10:                             #   in Loop: Header=BB218_6 Depth=1
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rdi, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	*40(%rcx)
	movq	-24(%rbp), %rcx
	addq	$8, %rcx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	_ZN7sc_core8sc_traceEPNS_13sc_trace_fileERKN5sc_dt12sc_uint_baseERKSs
# BB#11:                                #   in Loop: Header=BB218_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB218_6
.LBB218_12:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
.LBB218_13:
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp2327:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv, .Ltmp2327-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2330:
	.cfi_def_cfa_offset 16
.Ltmp2331:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2332:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB219_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB219_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB219_8
# BB#3:                                 #   in Loop: Header=BB219_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB219_5
# BB#4:                                 #   in Loop: Header=BB219_2 Depth=1
	jmp	.LBB219_6
.LBB219_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB219_6:                              #   in Loop: Header=BB219_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB219_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB219_2
.LBB219_8:
	jmp	.LBB219_10
.LBB219_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB219_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2333:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp2333-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2336:
	.cfi_def_cfa_offset 16
.Ltmp2337:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2338:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB220_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB220_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB220_8
# BB#3:                                 #   in Loop: Header=BB220_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB220_5
# BB#4:                                 #   in Loop: Header=BB220_2 Depth=1
	jmp	.LBB220_6
.LBB220_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB220_6:                              #   in Loop: Header=BB220_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB220_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB220_2
.LBB220_8:
	jmp	.LBB220_10
.LBB220_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB220_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2339:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp2339-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2342:
	.cfi_def_cfa_offset 16
.Ltmp2343:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2344:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2345:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_, .Ltmp2345-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2348:
	.cfi_def_cfa_offset 16
.Ltmp2349:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2350:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2351:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_, .Ltmp2351-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp2352:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv, .Ltmp2352-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp2353:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm, .Ltmp2353-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp2354:
	.size	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv, .Ltmp2354-_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm,@function
_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm: # @_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp2355:
	.size	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm, .Ltmp2355-_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	.cfi_endproc

	.section	.text._ZNKSt9type_info4nameEv,"axG",@progbits,_ZNKSt9type_info4nameEv,comdat
	.weak	_ZNKSt9type_info4nameEv
	.align	16, 0x90
	.type	_ZNKSt9type_info4nameEv,@function
_ZNKSt9type_info4nameEv:                # @_ZNKSt9type_info4nameEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movsbl	(%rax), %ecx
	cmpl	$42, %ecx
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	jne	.LBB227_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rsp)         # 8-byte Spill
	jmp	.LBB227_3
.LBB227_2:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	movq	%rcx, -24(%rsp)         # 8-byte Spill
.LBB227_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp2356:
	.size	_ZNKSt9type_info4nameEv, .Ltmp2356-_ZNKSt9type_info4nameEv
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp2357:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm, .Ltmp2357-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2360:
	.cfi_def_cfa_offset 16
.Ltmp2361:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2362:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB229_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB229_3
.LBB229_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
.LBB229_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2363:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_, .Ltmp2363-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB230_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB230_2:
	ret
.Ltmp2364:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_, .Ltmp2364-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin231:
	.cfi_lsda 3, .Lexception231
# BB#0:
	pushq	%rbp
.Ltmp2396:
	.cfi_def_cfa_offset 16
.Ltmp2397:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2398:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB231_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB231_22
.LBB231_2:
	movl	$1, %esi
	movl	$.L.str27, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp2365:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
.Ltmp2366:
	jmp	.LBB231_3
.LBB231_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp2367:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp2368:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB231_4
.LBB231_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp2369:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp2370:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB231_5
.LBB231_5:
.Ltmp2371:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp2372:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB231_6
.LBB231_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp2373:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp2374:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB231_7
.LBB231_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp2375:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp2376:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB231_8
.LBB231_8:
.Ltmp2377:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp2378:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB231_9
.LBB231_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB231_21
.LBB231_10:
.Ltmp2379:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB231_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp2380:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
.Ltmp2381:
	jmp	.LBB231_13
.LBB231_13:
	jmp	.LBB231_18
.LBB231_14:
.Ltmp2390:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp2391:
	callq	__cxa_end_catch
.Ltmp2392:
	jmp	.LBB231_20
.LBB231_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp2382:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp2383:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB231_16
.LBB231_16:
.Ltmp2384:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
.Ltmp2385:
	jmp	.LBB231_17
.LBB231_17:
	jmp	.LBB231_18
.LBB231_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp2386:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp2387:
	jmp	.LBB231_19
.LBB231_19:
.Ltmp2388:
	callq	__cxa_rethrow
.Ltmp2389:
	jmp	.LBB231_25
.LBB231_20:
	jmp	.LBB231_23
.LBB231_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB231_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB231_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB231_24:
.Ltmp2393:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB231_25:
.Ltmp2399:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_, .Ltmp2399-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_endproc
.Leh_func_end231:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table231:
.Lexception231:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset769 = .Leh_func_begin231-.Leh_func_begin231 # >> Call Site 1 <<
	.long	.Lset769
.Lset770 = .Ltmp2365-.Leh_func_begin231 #   Call between .Leh_func_begin231 and .Ltmp2365
	.long	.Lset770
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset771 = .Ltmp2365-.Leh_func_begin231 # >> Call Site 2 <<
	.long	.Lset771
.Lset772 = .Ltmp2378-.Ltmp2365          #   Call between .Ltmp2365 and .Ltmp2378
	.long	.Lset772
.Lset773 = .Ltmp2379-.Leh_func_begin231 #     jumps to .Ltmp2379
	.long	.Lset773
	.byte	1                       #   On action: 1
.Lset774 = .Ltmp2378-.Leh_func_begin231 # >> Call Site 3 <<
	.long	.Lset774
.Lset775 = .Ltmp2380-.Ltmp2378          #   Call between .Ltmp2378 and .Ltmp2380
	.long	.Lset775
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset776 = .Ltmp2380-.Leh_func_begin231 # >> Call Site 4 <<
	.long	.Lset776
.Lset777 = .Ltmp2381-.Ltmp2380          #   Call between .Ltmp2380 and .Ltmp2381
	.long	.Lset777
.Lset778 = .Ltmp2390-.Leh_func_begin231 #     jumps to .Ltmp2390
	.long	.Lset778
	.byte	0                       #   On action: cleanup
.Lset779 = .Ltmp2391-.Leh_func_begin231 # >> Call Site 5 <<
	.long	.Lset779
.Lset780 = .Ltmp2392-.Ltmp2391          #   Call between .Ltmp2391 and .Ltmp2392
	.long	.Lset780
.Lset781 = .Ltmp2393-.Leh_func_begin231 #     jumps to .Ltmp2393
	.long	.Lset781
	.byte	1                       #   On action: 1
.Lset782 = .Ltmp2382-.Leh_func_begin231 # >> Call Site 6 <<
	.long	.Lset782
.Lset783 = .Ltmp2389-.Ltmp2382          #   Call between .Ltmp2382 and .Ltmp2389
	.long	.Lset783
.Lset784 = .Ltmp2390-.Leh_func_begin231 #     jumps to .Ltmp2390
	.long	.Lset784
	.byte	0                       #   On action: cleanup
.Lset785 = .Ltmp2389-.Leh_func_begin231 # >> Call Site 7 <<
	.long	.Lset785
.Lset786 = .Leh_func_end231-.Ltmp2389   #   Call between .Ltmp2389 and .Leh_func_end231
	.long	.Lset786
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2402:
	.cfi_def_cfa_offset 16
.Ltmp2403:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2404:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2405:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv, .Ltmp2405-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2408:
	.cfi_def_cfa_offset 16
.Ltmp2409:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2410:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2411:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_, .Ltmp2411-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp2412:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_, .Ltmp2412-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2415:
	.cfi_def_cfa_offset 16
.Ltmp2416:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2417:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2418:
	.size	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp2418-_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp2419:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv, .Ltmp2419-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp2420:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv, .Ltmp2420-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2423:
	.cfi_def_cfa_offset 16
.Ltmp2424:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2425:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB238_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB238_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB238_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB238_5
.LBB238_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB238_6
.LBB238_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB238_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp2426:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc, .Ltmp2426-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,@function
_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_: # @_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2429:
	.cfi_def_cfa_offset 16
.Ltmp2430:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2431:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2432:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_, .Ltmp2432-_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2435:
	.cfi_def_cfa_offset 16
.Ltmp2436:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2437:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2438:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv, .Ltmp2438-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2441:
	.cfi_def_cfa_offset 16
.Ltmp2442:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2443:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB241_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB241_3
.LBB241_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB241_3
.LBB241_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2444:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm, .Ltmp2444-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2447:
	.cfi_def_cfa_offset 16
.Ltmp2448:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2449:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2450:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_, .Ltmp2450-_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp2451:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp2451-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp2452:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_, .Ltmp2452-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2455:
	.cfi_def_cfa_offset 16
.Ltmp2456:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2457:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2458:
	.size	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E, .Ltmp2458-_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2461:
	.cfi_def_cfa_offset 16
.Ltmp2462:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2463:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB246_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
.LBB246_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2464:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m, .Ltmp2464-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2467:
	.cfi_def_cfa_offset 16
.Ltmp2468:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2469:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2470:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m, .Ltmp2470-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,@function
_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_: # @_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2473:
	.cfi_def_cfa_offset 16
.Ltmp2474:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2475:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2476:
	.size	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_, .Ltmp2476-_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp2477:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_, .Ltmp2477-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2480:
	.cfi_def_cfa_offset 16
.Ltmp2481:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2482:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2483:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E, .Ltmp2483-_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2486:
	.cfi_def_cfa_offset 16
.Ltmp2487:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2488:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2489:
	.size	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp2489-_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2492:
	.cfi_def_cfa_offset 16
.Ltmp2493:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2494:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2495:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_, .Ltmp2495-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2498:
	.cfi_def_cfa_offset 16
.Ltmp2499:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2500:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2501:
	.size	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp2501-_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2504:
	.cfi_def_cfa_offset 16
.Ltmp2505:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2506:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2507:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp2507-_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,@function
_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_: # @_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2510:
	.cfi_def_cfa_offset 16
.Ltmp2511:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2512:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2513:
	.size	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_, .Ltmp2513-_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,@function
_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_: # @_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp2514:
	.size	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_, .Ltmp2514-_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2517:
	.cfi_def_cfa_offset 16
.Ltmp2518:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2519:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2520:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp2520-_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,@function
_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_: # @_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2523:
	.cfi_def_cfa_offset 16
.Ltmp2524:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2525:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2526:
	.size	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_, .Ltmp2526-_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2529:
	.cfi_def_cfa_offset 16
.Ltmp2530:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2531:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB259_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB259_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2532:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_, .Ltmp2532-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2535:
	.cfi_def_cfa_offset 16
.Ltmp2536:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2537:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB260_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB260_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2538:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv, .Ltmp2538-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2539:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv, .Ltmp2539-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2542:
	.cfi_def_cfa_offset 16
.Ltmp2543:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2544:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2545:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv, .Ltmp2545-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZSt3maxImERKT_S2_S2_,"axG",@progbits,_ZSt3maxImERKT_S2_S2_,comdat
	.weak	_ZSt3maxImERKT_S2_S2_
	.align	16, 0x90
	.type	_ZSt3maxImERKT_S2_S2_,@function
_ZSt3maxImERKT_S2_S2_:                  # @_ZSt3maxImERKT_S2_S2_
	.cfi_startproc
# BB#0:
	movq	%rdi, -16(%rsp)
	movq	%rsi, -24(%rsp)
	movq	-16(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-24(%rsp), %rdi
	cmpq	(%rdi), %rsi
	jae	.LBB263_2
# BB#1:
	movq	-24(%rsp), %rax
	movq	%rax, -8(%rsp)
	jmp	.LBB263_3
.LBB263_2:
	movq	-16(%rsp), %rax
	movq	%rax, -8(%rsp)
.LBB263_3:
	movq	-8(%rsp), %rax
	ret
.Ltmp2546:
	.size	_ZSt3maxImERKT_S2_S2_, .Ltmp2546-_ZSt3maxImERKT_S2_S2_
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp2547:
	.size	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp2547-_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2550:
	.cfi_def_cfa_offset 16
.Ltmp2551:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2552:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2553:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp2553-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2556:
	.cfi_def_cfa_offset 16
.Ltmp2557:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2558:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2559:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp2559-_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2562:
	.cfi_def_cfa_offset 16
.Ltmp2563:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2564:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB267_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB267_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2565:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_, .Ltmp2565-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin268:
	.cfi_lsda 3, .Lexception268
# BB#0:
	pushq	%rbp
.Ltmp2574:
	.cfi_def_cfa_offset 16
.Ltmp2575:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2576:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp2566:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
.Ltmp2567:
	jmp	.LBB268_1
.LBB268_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB268_2:
.Ltmp2568:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2569:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp2570:
	jmp	.LBB268_3
.LBB268_3:
	jmp	.LBB268_4
.LBB268_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB268_5:
.Ltmp2571:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2577:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp2577-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc
.Leh_func_end268:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table268:
.Lexception268:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset787 = .Ltmp2566-.Leh_func_begin268 # >> Call Site 1 <<
	.long	.Lset787
.Lset788 = .Ltmp2567-.Ltmp2566          #   Call between .Ltmp2566 and .Ltmp2567
	.long	.Lset788
.Lset789 = .Ltmp2568-.Leh_func_begin268 #     jumps to .Ltmp2568
	.long	.Lset789
	.byte	0                       #   On action: cleanup
.Lset790 = .Ltmp2567-.Leh_func_begin268 # >> Call Site 2 <<
	.long	.Lset790
.Lset791 = .Ltmp2569-.Ltmp2567          #   Call between .Ltmp2567 and .Ltmp2569
	.long	.Lset791
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset792 = .Ltmp2569-.Leh_func_begin268 # >> Call Site 3 <<
	.long	.Lset792
.Lset793 = .Ltmp2570-.Ltmp2569          #   Call between .Ltmp2569 and .Ltmp2570
	.long	.Lset793
.Lset794 = .Ltmp2571-.Leh_func_begin268 #     jumps to .Ltmp2571
	.long	.Lset794
	.byte	1                       #   On action: 1
.Lset795 = .Ltmp2570-.Leh_func_begin268 # >> Call Site 4 <<
	.long	.Lset795
.Lset796 = .Leh_func_end268-.Ltmp2570   #   Call between .Ltmp2570 and .Leh_func_end268
	.long	.Lset796
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2580:
	.cfi_def_cfa_offset 16
.Ltmp2581:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2582:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2583:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev, .Ltmp2583-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core12sc_port_base4kindEv,"axG",@progbits,_ZNK7sc_core12sc_port_base4kindEv,comdat
	.weak	_ZNK7sc_core12sc_port_base4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core12sc_port_base4kindEv,@function
_ZNK7sc_core12sc_port_base4kindEv:      # @_ZNK7sc_core12sc_port_base4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str29, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2584:
	.size	_ZNK7sc_core12sc_port_base4kindEv, .Ltmp2584-_ZNK7sc_core12sc_port_base4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2587:
	.cfi_def_cfa_offset 16
.Ltmp2588:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2589:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2590:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev, .Ltmp2590-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin272:
	.cfi_lsda 3, .Lexception272
# BB#0:
	pushq	%rbp
.Ltmp2596:
	.cfi_def_cfa_offset 16
.Ltmp2597:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2598:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2591:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
.Ltmp2592:
	jmp	.LBB272_1
.LBB272_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB272_2:
.Ltmp2593:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2599:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev, .Ltmp2599-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.cfi_endproc
.Leh_func_end272:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table272:
.Lexception272:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset797 = .Ltmp2591-.Leh_func_begin272 # >> Call Site 1 <<
	.long	.Lset797
.Lset798 = .Ltmp2592-.Ltmp2591          #   Call between .Ltmp2591 and .Ltmp2592
	.long	.Lset798
.Lset799 = .Ltmp2593-.Leh_func_begin272 #     jumps to .Ltmp2593
	.long	.Lset799
	.byte	0                       #   On action: cleanup
.Lset800 = .Ltmp2592-.Leh_func_begin272 # >> Call Site 2 <<
	.long	.Lset800
.Lset801 = .Leh_func_end272-.Ltmp2592   #   Call between .Ltmp2592 and .Leh_func_end272
	.long	.Lset801
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin273:
	.cfi_lsda 3, .Lexception273
# BB#0:
	pushq	%rbp
.Ltmp2610:
	.cfi_def_cfa_offset 16
.Ltmp2611:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2612:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp2600:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp2601:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB273_1
.LBB273_1:
.Ltmp2602:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
.Ltmp2603:
	jmp	.LBB273_2
.LBB273_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB273_3:
.Ltmp2604:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2605:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
.Ltmp2606:
	jmp	.LBB273_4
.LBB273_4:
	jmp	.LBB273_5
.LBB273_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB273_6:
.Ltmp2607:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2613:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev, .Ltmp2613-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end273:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table273:
.Lexception273:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset802 = .Ltmp2600-.Leh_func_begin273 # >> Call Site 1 <<
	.long	.Lset802
.Lset803 = .Ltmp2603-.Ltmp2600          #   Call between .Ltmp2600 and .Ltmp2603
	.long	.Lset803
.Lset804 = .Ltmp2604-.Leh_func_begin273 #     jumps to .Ltmp2604
	.long	.Lset804
	.byte	0                       #   On action: cleanup
.Lset805 = .Ltmp2603-.Leh_func_begin273 # >> Call Site 2 <<
	.long	.Lset805
.Lset806 = .Ltmp2605-.Ltmp2603          #   Call between .Ltmp2603 and .Ltmp2605
	.long	.Lset806
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset807 = .Ltmp2605-.Leh_func_begin273 # >> Call Site 3 <<
	.long	.Lset807
.Lset808 = .Ltmp2606-.Ltmp2605          #   Call between .Ltmp2605 and .Ltmp2606
	.long	.Lset808
.Lset809 = .Ltmp2607-.Leh_func_begin273 #     jumps to .Ltmp2607
	.long	.Lset809
	.byte	1                       #   On action: 1
.Lset810 = .Ltmp2606-.Leh_func_begin273 # >> Call Site 4 <<
	.long	.Lset810
.Lset811 = .Leh_func_end273-.Ltmp2606   #   Call between .Ltmp2606 and .Leh_func_end273
	.long	.Lset811
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin274:
	.cfi_lsda 3, .Lexception274
# BB#0:
	pushq	%rbp
.Ltmp2619:
	.cfi_def_cfa_offset 16
.Ltmp2620:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2621:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp2614:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp2615:
	jmp	.LBB274_1
.LBB274_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB274_2:
.Ltmp2616:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2622:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev, .Ltmp2622-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end274:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table274:
.Lexception274:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset812 = .Ltmp2614-.Leh_func_begin274 # >> Call Site 1 <<
	.long	.Lset812
.Lset813 = .Ltmp2615-.Ltmp2614          #   Call between .Ltmp2614 and .Ltmp2615
	.long	.Lset813
.Lset814 = .Ltmp2616-.Leh_func_begin274 #     jumps to .Ltmp2616
	.long	.Lset814
	.byte	0                       #   On action: cleanup
.Lset815 = .Ltmp2615-.Leh_func_begin274 # >> Call Site 2 <<
	.long	.Lset815
.Lset816 = .Leh_func_end274-.Ltmp2615   #   Call between .Ltmp2615 and .Leh_func_end274
	.long	.Lset816
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2625:
	.cfi_def_cfa_offset 16
.Ltmp2626:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2627:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2628:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev, .Ltmp2628-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2631:
	.cfi_def_cfa_offset 16
.Ltmp2632:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2633:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2634:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev, .Ltmp2634-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2637:
	.cfi_def_cfa_offset 16
.Ltmp2638:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2639:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2640:
	.size	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp2640-_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2641:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp2641-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core15sc_trace_paramsD1Ev,"axG",@progbits,_ZN7sc_core15sc_trace_paramsD1Ev,comdat
	.weak	_ZN7sc_core15sc_trace_paramsD1Ev
	.align	16, 0x90
	.type	_ZN7sc_core15sc_trace_paramsD1Ev,@function
_ZN7sc_core15sc_trace_paramsD1Ev:       # @_ZN7sc_core15sc_trace_paramsD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2644:
	.cfi_def_cfa_offset 16
.Ltmp2645:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2646:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core15sc_trace_paramsD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2647:
	.size	_ZN7sc_core15sc_trace_paramsD1Ev, .Ltmp2647-_ZN7sc_core15sc_trace_paramsD1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev: # @_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2650:
	.cfi_def_cfa_offset 16
.Ltmp2651:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2652:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2653:
	.size	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev, .Ltmp2653-_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev: # @_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin281:
	.cfi_lsda 3, .Lexception281
# BB#0:
	pushq	%rbp
.Ltmp2664:
	.cfi_def_cfa_offset 16
.Ltmp2665:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2666:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp2654:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv
.Ltmp2655:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB281_1
.LBB281_1:
.Ltmp2656:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E
.Ltmp2657:
	jmp	.LBB281_2
.LBB281_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB281_3:
.Ltmp2658:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2659:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
.Ltmp2660:
	jmp	.LBB281_4
.LBB281_4:
	jmp	.LBB281_5
.LBB281_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB281_6:
.Ltmp2661:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2667:
	.size	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev, .Ltmp2667-_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.cfi_endproc
.Leh_func_end281:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table281:
.Lexception281:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset817 = .Ltmp2654-.Leh_func_begin281 # >> Call Site 1 <<
	.long	.Lset817
.Lset818 = .Ltmp2657-.Ltmp2654          #   Call between .Ltmp2654 and .Ltmp2657
	.long	.Lset818
.Lset819 = .Ltmp2658-.Leh_func_begin281 #     jumps to .Ltmp2658
	.long	.Lset819
	.byte	0                       #   On action: cleanup
.Lset820 = .Ltmp2657-.Leh_func_begin281 # >> Call Site 2 <<
	.long	.Lset820
.Lset821 = .Ltmp2659-.Ltmp2657          #   Call between .Ltmp2657 and .Ltmp2659
	.long	.Lset821
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset822 = .Ltmp2659-.Leh_func_begin281 # >> Call Site 3 <<
	.long	.Lset822
.Lset823 = .Ltmp2660-.Ltmp2659          #   Call between .Ltmp2659 and .Ltmp2660
	.long	.Lset823
.Lset824 = .Ltmp2661-.Leh_func_begin281 #     jumps to .Ltmp2661
	.long	.Lset824
	.byte	1                       #   On action: 1
.Lset825 = .Ltmp2660-.Leh_func_begin281 # >> Call Site 4 <<
	.long	.Lset825
.Lset826 = .Leh_func_end281-.Ltmp2660   #   Call between .Ltmp2660 and .Leh_func_end281
	.long	.Lset826
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2670:
	.cfi_def_cfa_offset 16
.Ltmp2671:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2672:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2673:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E, .Ltmp2673-_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp2674:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv, .Ltmp2674-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin284:
	.cfi_lsda 3, .Lexception284
# BB#0:
	pushq	%rbp
.Ltmp2680:
	.cfi_def_cfa_offset 16
.Ltmp2681:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2682:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp2675:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m
.Ltmp2676:
	jmp	.LBB284_1
.LBB284_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB284_2:
.Ltmp2677:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2683:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev, .Ltmp2683-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.cfi_endproc
.Leh_func_end284:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table284:
.Lexception284:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset827 = .Ltmp2675-.Leh_func_begin284 # >> Call Site 1 <<
	.long	.Lset827
.Lset828 = .Ltmp2676-.Ltmp2675          #   Call between .Ltmp2675 and .Ltmp2676
	.long	.Lset828
.Lset829 = .Ltmp2677-.Leh_func_begin284 #     jumps to .Ltmp2677
	.long	.Lset829
	.byte	0                       #   On action: cleanup
.Lset830 = .Ltmp2676-.Leh_func_begin284 # >> Call Site 2 <<
	.long	.Lset830
.Lset831 = .Leh_func_end284-.Ltmp2676   #   Call between .Ltmp2676 and .Leh_func_end284
	.long	.Lset831
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2686:
	.cfi_def_cfa_offset 16
.Ltmp2687:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2688:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB285_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m
.LBB285_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2689:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m, .Ltmp2689-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2692:
	.cfi_def_cfa_offset 16
.Ltmp2693:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2694:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2695:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev, .Ltmp2695-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2698:
	.cfi_def_cfa_offset 16
.Ltmp2699:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2700:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2701:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev, .Ltmp2701-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_trace_paramsEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev,@function
_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev: # @_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2704:
	.cfi_def_cfa_offset 16
.Ltmp2705:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2706:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2707:
	.size	_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev, .Ltmp2707-_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2708:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev, .Ltmp2708-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2711:
	.cfi_def_cfa_offset 16
.Ltmp2712:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2713:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2714:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m, .Ltmp2714-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_,@function
_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_: # @_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2717:
	.cfi_def_cfa_offset 16
.Ltmp2718:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2719:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2720:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_, .Ltmp2720-_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp2721:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_, .Ltmp2721-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_
	.cfi_endproc

	.section	.text._ZN7sc_core15sc_trace_paramsD2Ev,"axG",@progbits,_ZN7sc_core15sc_trace_paramsD2Ev,comdat
	.weak	_ZN7sc_core15sc_trace_paramsD2Ev
	.align	16, 0x90
	.type	_ZN7sc_core15sc_trace_paramsD2Ev,@function
_ZN7sc_core15sc_trace_paramsD2Ev:       # @_ZN7sc_core15sc_trace_paramsD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2724:
	.cfi_def_cfa_offset 16
.Ltmp2725:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2726:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	callq	_ZNSsD1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2727:
	.size	_ZN7sc_core15sc_trace_paramsD2Ev, .Ltmp2727-_ZN7sc_core15sc_trace_paramsD2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin294:
	.cfi_lsda 3, .Lexception294
# BB#0:
	pushq	%rbp
.Ltmp2738:
	.cfi_def_cfa_offset 16
.Ltmp2739:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2740:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE+16, (%rdi)
	movq	%rdi, %rax
.Ltmp2728:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
.Ltmp2729:
	jmp	.LBB294_1
.LBB294_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	je	.LBB294_4
# BB#2:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp2730:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp2731:
	jmp	.LBB294_3
.LBB294_3:
	jmp	.LBB294_4
.LBB294_4:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB294_5:
.Ltmp2732:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2733:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
.Ltmp2734:
	jmp	.LBB294_6
.LBB294_6:
	jmp	.LBB294_7
.LBB294_7:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB294_8:
.Ltmp2735:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2741:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev, .Ltmp2741-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev
	.cfi_endproc
.Leh_func_end294:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table294:
.Lexception294:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset832 = .Ltmp2728-.Leh_func_begin294 # >> Call Site 1 <<
	.long	.Lset832
.Lset833 = .Ltmp2731-.Ltmp2728          #   Call between .Ltmp2728 and .Ltmp2731
	.long	.Lset833
.Lset834 = .Ltmp2732-.Leh_func_begin294 #     jumps to .Ltmp2732
	.long	.Lset834
	.byte	0                       #   On action: cleanup
.Lset835 = .Ltmp2731-.Leh_func_begin294 # >> Call Site 2 <<
	.long	.Lset835
.Lset836 = .Ltmp2733-.Ltmp2731          #   Call between .Ltmp2731 and .Ltmp2733
	.long	.Lset836
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset837 = .Ltmp2733-.Leh_func_begin294 # >> Call Site 3 <<
	.long	.Lset837
.Lset838 = .Ltmp2734-.Ltmp2733          #   Call between .Ltmp2733 and .Ltmp2734
	.long	.Lset838
.Lset839 = .Ltmp2735-.Leh_func_begin294 #     jumps to .Ltmp2735
	.long	.Lset839
	.byte	1                       #   On action: 1
.Lset840 = .Ltmp2734-.Leh_func_begin294 # >> Call Site 4 <<
	.long	.Lset840
.Lset841 = .Leh_func_end294-.Ltmp2734   #   Call between .Ltmp2734 and .Leh_func_end294
	.long	.Lset841
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin295:
	.cfi_lsda 3, .Lexception295
# BB#0:
	pushq	%rbp
.Ltmp2750:
	.cfi_def_cfa_offset 16
.Ltmp2751:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2752:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB295_14
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %ecx
	subl	$1, %ecx
	movl	%ecx, -12(%rbp)
.LBB295_2:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB295_9
# BB#3:                                 #   in Loop: Header=BB295_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	cmpq	$0, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB295_6
# BB#4:                                 #   in Loop: Header=BB295_2 Depth=1
.Ltmp2745:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core15sc_trace_paramsD1Ev
.Ltmp2746:
	jmp	.LBB295_5
.LBB295_5:                              #   in Loop: Header=BB295_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB295_6:                              #   in Loop: Header=BB295_2 Depth=1
	jmp	.LBB295_7
.LBB295_7:                              #   in Loop: Header=BB295_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -12(%rbp)
	jmp	.LBB295_2
.LBB295_8:
.Ltmp2747:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB295_15
.LBB295_9:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	je	.LBB295_12
# BB#10:
.Ltmp2742:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
.Ltmp2743:
	jmp	.LBB295_11
.LBB295_11:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB295_12:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	$0, 128(%rax)
	jmp	.LBB295_14
.LBB295_13:
.Ltmp2744:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB295_15
.LBB295_14:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB295_15:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2753:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv, .Ltmp2753-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
	.cfi_endproc
.Leh_func_end295:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table295:
.Lexception295:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset842 = .Ltmp2745-.Leh_func_begin295 # >> Call Site 1 <<
	.long	.Lset842
.Lset843 = .Ltmp2746-.Ltmp2745          #   Call between .Ltmp2745 and .Ltmp2746
	.long	.Lset843
.Lset844 = .Ltmp2747-.Leh_func_begin295 #     jumps to .Ltmp2747
	.long	.Lset844
	.byte	0                       #   On action: cleanup
.Lset845 = .Ltmp2742-.Leh_func_begin295 # >> Call Site 2 <<
	.long	.Lset845
.Lset846 = .Ltmp2743-.Ltmp2742          #   Call between .Ltmp2742 and .Ltmp2743
	.long	.Lset846
.Lset847 = .Ltmp2744-.Leh_func_begin295 #     jumps to .Ltmp2744
	.long	.Lset847
	.byte	0                       #   On action: cleanup
.Lset848 = .Ltmp2743-.Leh_func_begin295 # >> Call Site 3 <<
	.long	.Lset848
.Lset849 = .Leh_func_end295-.Ltmp2743   #   Call between .Ltmp2743 and .Leh_func_end295
	.long	.Lset849
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2756:
	.cfi_def_cfa_offset 16
.Ltmp2757:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2758:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2759:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp2759-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str30, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2760:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv, .Ltmp2760-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin298:
	.cfi_lsda 3, .Lexception298
# BB#0:
	pushq	%rbp
.Ltmp2766:
	.cfi_def_cfa_offset 16
.Ltmp2767:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2768:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2761:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
.Ltmp2762:
	jmp	.LBB298_1
.LBB298_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB298_2:
.Ltmp2763:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2769:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev, .Ltmp2769-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev
	.cfi_endproc
.Leh_func_end298:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table298:
.Lexception298:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset850 = .Ltmp2761-.Leh_func_begin298 # >> Call Site 1 <<
	.long	.Lset850
.Lset851 = .Ltmp2762-.Ltmp2761          #   Call between .Ltmp2761 and .Ltmp2762
	.long	.Lset851
.Lset852 = .Ltmp2763-.Leh_func_begin298 #     jumps to .Ltmp2763
	.long	.Lset852
	.byte	0                       #   On action: cleanup
.Lset853 = .Ltmp2762-.Leh_func_begin298 # >> Call Site 2 <<
	.long	.Lset853
.Lset854 = .Leh_func_end298-.Ltmp2762   #   Call between .Ltmp2762 and .Leh_func_end298
	.long	.Lset854
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB299_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB299_3
.LBB299_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB299_3
.LBB299_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp2770:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv, .Ltmp2770-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB300_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB300_3
.LBB300_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB300_3
.LBB300_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp2771:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv, .Ltmp2771-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2774:
	.cfi_def_cfa_offset 16
.Ltmp2775:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2776:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2777:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE, .Ltmp2777-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2780:
	.cfi_def_cfa_offset 16
.Ltmp2781:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2782:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	je	.LBB302_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	movabsq	$-1, %rdx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-64(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB302_3
.LBB302_2:
	movabsq	$0, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB302_3
.LBB302_3:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB302_5
# BB#4:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
	jmp	.LBB302_11
.LBB302_5:
	movq	-24(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	je	.LBB302_7
# BB#6:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	movabsq	$-1, %rdx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-88(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB302_8
.LBB302_7:
	movabsq	$0, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB302_8
.LBB302_8:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB302_10
# BB#9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
	jmp	.LBB302_11
.LBB302_10:
	movl	$2, -4(%rbp)
.LBB302_11:
	movl	-4(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp2783:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE, .Ltmp2783-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2786:
	.cfi_def_cfa_offset 16
.Ltmp2787:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2788:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB303_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB303_3
.LBB303_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB303_3
.LBB303_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB303_5
# BB#4:
	jmp	.LBB303_6
.LBB303_5:
	leaq	.L.str25, %rdi
	leaq	.L.str24, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB303_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB303_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB303_12
# BB#8:                                 #   in Loop: Header=BB303_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB303_10
# BB#9:                                 #   in Loop: Header=BB303_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str26, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB303_10:                             #   in Loop: Header=BB303_7 Depth=1
	jmp	.LBB303_11
.LBB303_11:                             #   in Loop: Header=BB303_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB303_7
.LBB303_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp2789:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp2789-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2792:
	.cfi_def_cfa_offset 16
.Ltmp2793:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2794:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2795:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv, .Ltmp2795-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2798:
	.cfi_def_cfa_offset 16
.Ltmp2799:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2800:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2801:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv, .Ltmp2801-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2804:
	.cfi_def_cfa_offset 16
.Ltmp2805:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2806:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB306_9
# BB#1:
	movl	$0, -12(%rbp)
.LBB306_2:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movq	128(%rcx), %rdi
	movl	%eax, -44(%rbp)         # 4-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %edx
	movl	-44(%rbp), %esi         # 4-byte Reload
	cmpl	%edx, %esi
	jge	.LBB306_8
# BB#3:                                 #   in Loop: Header=BB306_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rdi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-56(%rbp), %rax         # 8-byte Reload
	callq	*112(%rax)
	cmpq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	je	.LBB306_5
# BB#4:                                 #   in Loop: Header=BB306_2 Depth=1
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-72(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB306_6
.LBB306_5:                              #   in Loop: Header=BB306_2 Depth=1
	movabsq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB306_6
.LBB306_6:                              #   in Loop: Header=BB306_2 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	*40(%rcx)
	movq	-24(%rbp), %rcx
	addq	$8, %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	_ZN7sc_core8sc_traceEPNS_13sc_trace_fileERKN5sc_dt12sc_uint_baseERKSs
# BB#7:                                 #   in Loop: Header=BB306_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_2
.LBB306_8:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
.LBB306_9:
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp2807:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv, .Ltmp2807-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2810:
	.cfi_def_cfa_offset 16
.Ltmp2811:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2812:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB307_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB307_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB307_8
# BB#3:                                 #   in Loop: Header=BB307_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB307_5
# BB#4:                                 #   in Loop: Header=BB307_2 Depth=1
	jmp	.LBB307_6
.LBB307_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB307_6:                              #   in Loop: Header=BB307_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB307_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB307_2
.LBB307_8:
	jmp	.LBB307_10
.LBB307_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB307_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2813:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp2813-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2816:
	.cfi_def_cfa_offset 16
.Ltmp2817:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2818:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB308_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB308_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB308_8
# BB#3:                                 #   in Loop: Header=BB308_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB308_5
# BB#4:                                 #   in Loop: Header=BB308_2 Depth=1
	jmp	.LBB308_6
.LBB308_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB308_6:                              #   in Loop: Header=BB308_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB308_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB308_2
.LBB308_8:
	jmp	.LBB308_10
.LBB308_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB308_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2819:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp2819-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2822:
	.cfi_def_cfa_offset 16
.Ltmp2823:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2824:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	232(%rdi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	-24(%rbp), %rax         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2825:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE, .Ltmp2825-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2828:
	.cfi_def_cfa_offset 16
.Ltmp2829:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2830:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2831:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE, .Ltmp2831-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2834:
	.cfi_def_cfa_offset 16
.Ltmp2835:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2836:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2837:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE, .Ltmp2837-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2840:
	.cfi_def_cfa_offset 16
.Ltmp2841:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2842:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2843:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE, .Ltmp2843-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2846:
	.cfi_def_cfa_offset 16
.Ltmp2847:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2848:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2849:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE, .Ltmp2849-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp2850:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv, .Ltmp2850-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp2851:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm, .Ltmp2851-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp2852:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm, .Ltmp2852-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2855:
	.cfi_def_cfa_offset 16
.Ltmp2856:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2857:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB317_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB317_3
.LBB317_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
.LBB317_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2858:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_, .Ltmp2858-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB318_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB318_2:
	ret
.Ltmp2859:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_, .Ltmp2859-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin319:
	.cfi_lsda 3, .Lexception319
# BB#0:
	pushq	%rbp
.Ltmp2891:
	.cfi_def_cfa_offset 16
.Ltmp2892:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2893:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB319_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB319_22
.LBB319_2:
	movl	$1, %esi
	movl	$.L.str27, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp2860:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
.Ltmp2861:
	jmp	.LBB319_3
.LBB319_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp2862:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp2863:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB319_4
.LBB319_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp2864:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp2865:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB319_5
.LBB319_5:
.Ltmp2866:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp2867:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB319_6
.LBB319_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp2868:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp2869:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB319_7
.LBB319_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp2870:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp2871:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB319_8
.LBB319_8:
.Ltmp2872:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp2873:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB319_9
.LBB319_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB319_21
.LBB319_10:
.Ltmp2874:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB319_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp2875:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_
.Ltmp2876:
	jmp	.LBB319_13
.LBB319_13:
	jmp	.LBB319_18
.LBB319_14:
.Ltmp2885:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp2886:
	callq	__cxa_end_catch
.Ltmp2887:
	jmp	.LBB319_20
.LBB319_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp2877:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp2878:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB319_16
.LBB319_16:
.Ltmp2879:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
.Ltmp2880:
	jmp	.LBB319_17
.LBB319_17:
	jmp	.LBB319_18
.LBB319_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp2881:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp2882:
	jmp	.LBB319_19
.LBB319_19:
.Ltmp2883:
	callq	__cxa_rethrow
.Ltmp2884:
	jmp	.LBB319_25
.LBB319_20:
	jmp	.LBB319_23
.LBB319_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB319_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB319_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB319_24:
.Ltmp2888:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB319_25:
.Ltmp2894:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_, .Ltmp2894-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_endproc
.Leh_func_end319:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table319:
.Lexception319:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset855 = .Leh_func_begin319-.Leh_func_begin319 # >> Call Site 1 <<
	.long	.Lset855
.Lset856 = .Ltmp2860-.Leh_func_begin319 #   Call between .Leh_func_begin319 and .Ltmp2860
	.long	.Lset856
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset857 = .Ltmp2860-.Leh_func_begin319 # >> Call Site 2 <<
	.long	.Lset857
.Lset858 = .Ltmp2873-.Ltmp2860          #   Call between .Ltmp2860 and .Ltmp2873
	.long	.Lset858
.Lset859 = .Ltmp2874-.Leh_func_begin319 #     jumps to .Ltmp2874
	.long	.Lset859
	.byte	1                       #   On action: 1
.Lset860 = .Ltmp2873-.Leh_func_begin319 # >> Call Site 3 <<
	.long	.Lset860
.Lset861 = .Ltmp2875-.Ltmp2873          #   Call between .Ltmp2873 and .Ltmp2875
	.long	.Lset861
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset862 = .Ltmp2875-.Leh_func_begin319 # >> Call Site 4 <<
	.long	.Lset862
.Lset863 = .Ltmp2876-.Ltmp2875          #   Call between .Ltmp2875 and .Ltmp2876
	.long	.Lset863
.Lset864 = .Ltmp2885-.Leh_func_begin319 #     jumps to .Ltmp2885
	.long	.Lset864
	.byte	0                       #   On action: cleanup
.Lset865 = .Ltmp2886-.Leh_func_begin319 # >> Call Site 5 <<
	.long	.Lset865
.Lset866 = .Ltmp2887-.Ltmp2886          #   Call between .Ltmp2886 and .Ltmp2887
	.long	.Lset866
.Lset867 = .Ltmp2888-.Leh_func_begin319 #     jumps to .Ltmp2888
	.long	.Lset867
	.byte	1                       #   On action: 1
.Lset868 = .Ltmp2877-.Leh_func_begin319 # >> Call Site 6 <<
	.long	.Lset868
.Lset869 = .Ltmp2884-.Ltmp2877          #   Call between .Ltmp2877 and .Ltmp2884
	.long	.Lset869
.Lset870 = .Ltmp2885-.Leh_func_begin319 #     jumps to .Ltmp2885
	.long	.Lset870
	.byte	0                       #   On action: cleanup
.Lset871 = .Ltmp2884-.Leh_func_begin319 # >> Call Site 7 <<
	.long	.Lset871
.Lset872 = .Leh_func_end319-.Ltmp2884   #   Call between .Ltmp2884 and .Leh_func_end319
	.long	.Lset872
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2897:
	.cfi_def_cfa_offset 16
.Ltmp2898:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2899:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2900:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv, .Ltmp2900-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2903:
	.cfi_def_cfa_offset 16
.Ltmp2904:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2905:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2906:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_, .Ltmp2906-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp2907:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_, .Ltmp2907-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,@function
_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_: # @_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2910:
	.cfi_def_cfa_offset 16
.Ltmp2911:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2912:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2913:
	.size	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_, .Ltmp2913-_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp2914:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv, .Ltmp2914-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp2915:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv, .Ltmp2915-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2918:
	.cfi_def_cfa_offset 16
.Ltmp2919:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2920:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB326_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB326_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB326_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB326_5
.LBB326_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB326_6
.LBB326_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB326_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp2921:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc, .Ltmp2921-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,@function
_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_: # @_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2924:
	.cfi_def_cfa_offset 16
.Ltmp2925:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2926:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2927:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_, .Ltmp2927-_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2930:
	.cfi_def_cfa_offset 16
.Ltmp2931:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2932:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2933:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv, .Ltmp2933-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2936:
	.cfi_def_cfa_offset 16
.Ltmp2937:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2938:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB329_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB329_3
.LBB329_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB329_3
.LBB329_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2939:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm, .Ltmp2939-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2942:
	.cfi_def_cfa_offset 16
.Ltmp2943:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2944:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2945:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_, .Ltmp2945-_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp2946:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp2946-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp2947:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_, .Ltmp2947-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2950:
	.cfi_def_cfa_offset 16
.Ltmp2951:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2952:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2953:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E, .Ltmp2953-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2956:
	.cfi_def_cfa_offset 16
.Ltmp2957:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2958:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB334_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m
.LBB334_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2959:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m, .Ltmp2959-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2962:
	.cfi_def_cfa_offset 16
.Ltmp2963:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2964:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2965:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m, .Ltmp2965-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2968:
	.cfi_def_cfa_offset 16
.Ltmp2969:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2970:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2971:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_, .Ltmp2971-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp2972:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_, .Ltmp2972-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2975:
	.cfi_def_cfa_offset 16
.Ltmp2976:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2977:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2978:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E, .Ltmp2978-_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,@function
_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_: # @_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2981:
	.cfi_def_cfa_offset 16
.Ltmp2982:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2983:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2984:
	.size	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_, .Ltmp2984-_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2987:
	.cfi_def_cfa_offset 16
.Ltmp2988:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2989:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2990:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_, .Ltmp2990-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,@function
_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_: # @_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2993:
	.cfi_def_cfa_offset 16
.Ltmp2994:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2995:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2996:
	.size	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_, .Ltmp2996-_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2999:
	.cfi_def_cfa_offset 16
.Ltmp3000:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3001:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3002:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_, .Ltmp3002-_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,@function
_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_: # @_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3005:
	.cfi_def_cfa_offset 16
.Ltmp3006:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3007:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3008:
	.size	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_, .Ltmp3008-_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_,@function
_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_: # @_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp3009:
	.size	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_, .Ltmp3009-_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_: # @_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3012:
	.cfi_def_cfa_offset 16
.Ltmp3013:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3014:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3015:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_, .Ltmp3015-_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,@function
_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_: # @_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3018:
	.cfi_def_cfa_offset 16
.Ltmp3019:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3020:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3021:
	.size	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_, .Ltmp3021-_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3024:
	.cfi_def_cfa_offset 16
.Ltmp3025:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3026:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB347_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB347_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3027:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_, .Ltmp3027-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3030:
	.cfi_def_cfa_offset 16
.Ltmp3031:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3032:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB348_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB348_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3033:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv, .Ltmp3033-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3034:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv, .Ltmp3034-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3037:
	.cfi_def_cfa_offset 16
.Ltmp3038:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3039:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3040:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv, .Ltmp3040-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp3041:
	.size	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp3041-_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3044:
	.cfi_def_cfa_offset 16
.Ltmp3045:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3046:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3047:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_, .Ltmp3047-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3050:
	.cfi_def_cfa_offset 16
.Ltmp3051:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3052:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3053:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_, .Ltmp3053-_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3056:
	.cfi_def_cfa_offset 16
.Ltmp3057:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3058:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB354_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB354_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3059:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_, .Ltmp3059-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3062:
	.cfi_def_cfa_offset 16
.Ltmp3063:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3064:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB355_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB355_3
.LBB355_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB355_3
.LBB355_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB355_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB355_6
.LBB355_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB355_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3065:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE, .Ltmp3065-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin356:
	.cfi_lsda 3, .Lexception356
# BB#0:
	pushq	%rbp
.Ltmp3074:
	.cfi_def_cfa_offset 16
.Ltmp3075:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3076:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp3066:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev
.Ltmp3067:
	jmp	.LBB356_1
.LBB356_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB356_2:
.Ltmp3068:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp3069:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp3070:
	jmp	.LBB356_3
.LBB356_3:
	jmp	.LBB356_4
.LBB356_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB356_5:
.Ltmp3071:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3077:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev, .Ltmp3077-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_endproc
.Leh_func_end356:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table356:
.Lexception356:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset873 = .Ltmp3066-.Leh_func_begin356 # >> Call Site 1 <<
	.long	.Lset873
.Lset874 = .Ltmp3067-.Ltmp3066          #   Call between .Ltmp3066 and .Ltmp3067
	.long	.Lset874
.Lset875 = .Ltmp3068-.Leh_func_begin356 #     jumps to .Ltmp3068
	.long	.Lset875
	.byte	0                       #   On action: cleanup
.Lset876 = .Ltmp3067-.Leh_func_begin356 # >> Call Site 2 <<
	.long	.Lset876
.Lset877 = .Ltmp3069-.Ltmp3067          #   Call between .Ltmp3067 and .Ltmp3069
	.long	.Lset877
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset878 = .Ltmp3069-.Leh_func_begin356 # >> Call Site 3 <<
	.long	.Lset878
.Lset879 = .Ltmp3070-.Ltmp3069          #   Call between .Ltmp3069 and .Ltmp3070
	.long	.Lset879
.Lset880 = .Ltmp3071-.Leh_func_begin356 #     jumps to .Ltmp3071
	.long	.Lset880
	.byte	1                       #   On action: 1
.Lset881 = .Ltmp3070-.Leh_func_begin356 # >> Call Site 4 <<
	.long	.Lset881
.Lset882 = .Leh_func_end356-.Ltmp3070   #   Call between .Ltmp3070 and .Leh_func_end356
	.long	.Lset882
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3080:
	.cfi_def_cfa_offset 16
.Ltmp3081:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3082:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3083:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev, .Ltmp3083-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3086:
	.cfi_def_cfa_offset 16
.Ltmp3087:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3088:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3089:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev, .Ltmp3089-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin359:
	.cfi_lsda 3, .Lexception359
# BB#0:
	pushq	%rbp
.Ltmp3095:
	.cfi_def_cfa_offset 16
.Ltmp3096:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3097:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp3090:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
.Ltmp3091:
	jmp	.LBB359_1
.LBB359_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB359_2:
.Ltmp3092:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3098:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev, .Ltmp3098-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev
	.cfi_endproc
.Leh_func_end359:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table359:
.Lexception359:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset883 = .Ltmp3090-.Leh_func_begin359 # >> Call Site 1 <<
	.long	.Lset883
.Lset884 = .Ltmp3091-.Ltmp3090          #   Call between .Ltmp3090 and .Ltmp3091
	.long	.Lset884
.Lset885 = .Ltmp3092-.Leh_func_begin359 #     jumps to .Ltmp3092
	.long	.Lset885
	.byte	0                       #   On action: cleanup
.Lset886 = .Ltmp3091-.Leh_func_begin359 # >> Call Site 2 <<
	.long	.Lset886
.Lset887 = .Leh_func_end359-.Ltmp3091   #   Call between .Ltmp3091 and .Leh_func_end359
	.long	.Lset887
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3101:
	.cfi_def_cfa_offset 16
.Ltmp3102:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3103:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB360_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB360_3
.LBB360_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB360_3
.LBB360_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB360_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB360_6
.LBB360_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB360_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3104:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE, .Ltmp3104-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3107:
	.cfi_def_cfa_offset 16
.Ltmp3108:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3109:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3110:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_, .Ltmp3110-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3113:
	.cfi_def_cfa_offset 16
.Ltmp3114:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3115:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3116:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_, .Ltmp3116-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin363:
	.cfi_lsda 3, .Lexception363
# BB#0:
	pushq	%rbp
.Ltmp3127:
	.cfi_def_cfa_offset 16
.Ltmp3128:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3129:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp3117:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp3118:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB363_1
.LBB363_1:
.Ltmp3119:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
.Ltmp3120:
	jmp	.LBB363_2
.LBB363_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB363_3:
.Ltmp3121:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp3122:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
.Ltmp3123:
	jmp	.LBB363_4
.LBB363_4:
	jmp	.LBB363_5
.LBB363_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB363_6:
.Ltmp3124:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3130:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev, .Ltmp3130-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end363:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table363:
.Lexception363:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset888 = .Ltmp3117-.Leh_func_begin363 # >> Call Site 1 <<
	.long	.Lset888
.Lset889 = .Ltmp3120-.Ltmp3117          #   Call between .Ltmp3117 and .Ltmp3120
	.long	.Lset889
.Lset890 = .Ltmp3121-.Leh_func_begin363 #     jumps to .Ltmp3121
	.long	.Lset890
	.byte	0                       #   On action: cleanup
.Lset891 = .Ltmp3120-.Leh_func_begin363 # >> Call Site 2 <<
	.long	.Lset891
.Lset892 = .Ltmp3122-.Ltmp3120          #   Call between .Ltmp3120 and .Ltmp3122
	.long	.Lset892
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset893 = .Ltmp3122-.Leh_func_begin363 # >> Call Site 3 <<
	.long	.Lset893
.Lset894 = .Ltmp3123-.Ltmp3122          #   Call between .Ltmp3122 and .Ltmp3123
	.long	.Lset894
.Lset895 = .Ltmp3124-.Leh_func_begin363 #     jumps to .Ltmp3124
	.long	.Lset895
	.byte	1                       #   On action: 1
.Lset896 = .Ltmp3123-.Leh_func_begin363 # >> Call Site 4 <<
	.long	.Lset896
.Lset897 = .Leh_func_end363-.Ltmp3123   #   Call between .Ltmp3123 and .Leh_func_end363
	.long	.Lset897
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin364:
	.cfi_lsda 3, .Lexception364
# BB#0:
	pushq	%rbp
.Ltmp3136:
	.cfi_def_cfa_offset 16
.Ltmp3137:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3138:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp3131:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp3132:
	jmp	.LBB364_1
.LBB364_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB364_2:
.Ltmp3133:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3139:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev, .Ltmp3139-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end364:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table364:
.Lexception364:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset898 = .Ltmp3131-.Leh_func_begin364 # >> Call Site 1 <<
	.long	.Lset898
.Lset899 = .Ltmp3132-.Ltmp3131          #   Call between .Ltmp3131 and .Ltmp3132
	.long	.Lset899
.Lset900 = .Ltmp3133-.Leh_func_begin364 #     jumps to .Ltmp3133
	.long	.Lset900
	.byte	0                       #   On action: cleanup
.Lset901 = .Ltmp3132-.Leh_func_begin364 # >> Call Site 2 <<
	.long	.Lset901
.Lset902 = .Leh_func_end364-.Ltmp3132   #   Call between .Ltmp3132 and .Leh_func_end364
	.long	.Lset902
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3142:
	.cfi_def_cfa_offset 16
.Ltmp3143:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3144:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3145:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev, .Ltmp3145-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3148:
	.cfi_def_cfa_offset 16
.Ltmp3149:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3150:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3151:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev, .Ltmp3151-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3154:
	.cfi_def_cfa_offset 16
.Ltmp3155:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3156:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3157:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev, .Ltmp3157-_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3158:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev, .Ltmp3158-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin369:
	.cfi_lsda 3, .Lexception369
# BB#0:
	pushq	%rbp
.Ltmp3169:
	.cfi_def_cfa_offset 16
.Ltmp3170:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3171:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE+16, (%rdi)
	movq	%rdi, %rax
.Ltmp3159:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
.Ltmp3160:
	jmp	.LBB369_1
.LBB369_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	je	.LBB369_4
# BB#2:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp3161:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp3162:
	jmp	.LBB369_3
.LBB369_3:
	jmp	.LBB369_4
.LBB369_4:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB369_5:
.Ltmp3163:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp3164:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
.Ltmp3165:
	jmp	.LBB369_6
.LBB369_6:
	jmp	.LBB369_7
.LBB369_7:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB369_8:
.Ltmp3166:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3172:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev, .Ltmp3172-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_endproc
.Leh_func_end369:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table369:
.Lexception369:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset903 = .Ltmp3159-.Leh_func_begin369 # >> Call Site 1 <<
	.long	.Lset903
.Lset904 = .Ltmp3162-.Ltmp3159          #   Call between .Ltmp3159 and .Ltmp3162
	.long	.Lset904
.Lset905 = .Ltmp3163-.Leh_func_begin369 #     jumps to .Ltmp3163
	.long	.Lset905
	.byte	0                       #   On action: cleanup
.Lset906 = .Ltmp3162-.Leh_func_begin369 # >> Call Site 2 <<
	.long	.Lset906
.Lset907 = .Ltmp3164-.Ltmp3162          #   Call between .Ltmp3162 and .Ltmp3164
	.long	.Lset907
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset908 = .Ltmp3164-.Leh_func_begin369 # >> Call Site 3 <<
	.long	.Lset908
.Lset909 = .Ltmp3165-.Ltmp3164          #   Call between .Ltmp3164 and .Ltmp3165
	.long	.Lset909
.Lset910 = .Ltmp3166-.Leh_func_begin369 #     jumps to .Ltmp3166
	.long	.Lset910
	.byte	1                       #   On action: 1
.Lset911 = .Ltmp3165-.Leh_func_begin369 # >> Call Site 4 <<
	.long	.Lset911
.Lset912 = .Leh_func_end369-.Ltmp3165   #   Call between .Ltmp3165 and .Leh_func_end369
	.long	.Lset912
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin370:
	.cfi_lsda 3, .Lexception370
# BB#0:
	pushq	%rbp
.Ltmp3181:
	.cfi_def_cfa_offset 16
.Ltmp3182:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3183:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB370_14
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %ecx
	subl	$1, %ecx
	movl	%ecx, -12(%rbp)
.LBB370_2:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB370_9
# BB#3:                                 #   in Loop: Header=BB370_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	cmpq	$0, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB370_6
# BB#4:                                 #   in Loop: Header=BB370_2 Depth=1
.Ltmp3176:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core15sc_trace_paramsD1Ev
.Ltmp3177:
	jmp	.LBB370_5
.LBB370_5:                              #   in Loop: Header=BB370_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB370_6:                              #   in Loop: Header=BB370_2 Depth=1
	jmp	.LBB370_7
.LBB370_7:                              #   in Loop: Header=BB370_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -12(%rbp)
	jmp	.LBB370_2
.LBB370_8:
.Ltmp3178:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB370_15
.LBB370_9:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	je	.LBB370_12
# BB#10:
.Ltmp3173:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
.Ltmp3174:
	jmp	.LBB370_11
.LBB370_11:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB370_12:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	$0, 128(%rax)
	jmp	.LBB370_14
.LBB370_13:
.Ltmp3175:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB370_15
.LBB370_14:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB370_15:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3184:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv, .Ltmp3184-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.cfi_endproc
.Leh_func_end370:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table370:
.Lexception370:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset913 = .Ltmp3176-.Leh_func_begin370 # >> Call Site 1 <<
	.long	.Lset913
.Lset914 = .Ltmp3177-.Ltmp3176          #   Call between .Ltmp3176 and .Ltmp3177
	.long	.Lset914
.Lset915 = .Ltmp3178-.Leh_func_begin370 #     jumps to .Ltmp3178
	.long	.Lset915
	.byte	0                       #   On action: cleanup
.Lset916 = .Ltmp3173-.Leh_func_begin370 # >> Call Site 2 <<
	.long	.Lset916
.Lset917 = .Ltmp3174-.Ltmp3173          #   Call between .Ltmp3173 and .Ltmp3174
	.long	.Lset917
.Lset918 = .Ltmp3175-.Leh_func_begin370 #     jumps to .Ltmp3175
	.long	.Lset918
	.byte	0                       #   On action: cleanup
.Lset919 = .Ltmp3174-.Leh_func_begin370 # >> Call Site 3 <<
	.long	.Lset919
.Lset920 = .Leh_func_end370-.Ltmp3174   #   Call between .Ltmp3174 and .Leh_func_end370
	.long	.Lset920
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3187:
	.cfi_def_cfa_offset 16
.Ltmp3188:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3189:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3190:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp3190-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str30, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3191:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv, .Ltmp3191-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin373:
	.cfi_lsda 3, .Lexception373
# BB#0:
	pushq	%rbp
.Ltmp3197:
	.cfi_def_cfa_offset 16
.Ltmp3198:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3199:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp3192:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp3193:
	jmp	.LBB373_1
.LBB373_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB373_2:
.Ltmp3194:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3200:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev, .Ltmp3200-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_endproc
.Leh_func_end373:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table373:
.Lexception373:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset921 = .Ltmp3192-.Leh_func_begin373 # >> Call Site 1 <<
	.long	.Lset921
.Lset922 = .Ltmp3193-.Ltmp3192          #   Call between .Ltmp3192 and .Ltmp3193
	.long	.Lset922
.Lset923 = .Ltmp3194-.Leh_func_begin373 #     jumps to .Ltmp3194
	.long	.Lset923
	.byte	0                       #   On action: cleanup
.Lset924 = .Ltmp3193-.Leh_func_begin373 # >> Call Site 2 <<
	.long	.Lset924
.Lset925 = .Leh_func_end373-.Ltmp3193   #   Call between .Ltmp3193 and .Leh_func_end373
	.long	.Lset925
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB374_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB374_3
.LBB374_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB374_3
.LBB374_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp3201:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv, .Ltmp3201-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB375_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB375_3
.LBB375_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB375_3
.LBB375_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp3202:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv, .Ltmp3202-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3205:
	.cfi_def_cfa_offset 16
.Ltmp3206:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3207:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3208:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE, .Ltmp3208-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3211:
	.cfi_def_cfa_offset 16
.Ltmp3212:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3213:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	je	.LBB377_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	movabsq	$-1, %rdx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-64(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB377_3
.LBB377_2:
	movabsq	$0, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB377_3
.LBB377_3:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB377_5
# BB#4:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
	jmp	.LBB377_11
.LBB377_5:
	movq	-24(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	je	.LBB377_7
# BB#6:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	movabsq	$-1, %rdx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-88(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB377_8
.LBB377_7:
	movabsq	$0, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB377_8
.LBB377_8:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB377_10
# BB#9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
	jmp	.LBB377_11
.LBB377_10:
	movl	$2, -4(%rbp)
.LBB377_11:
	movl	-4(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp3214:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE, .Ltmp3214-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3217:
	.cfi_def_cfa_offset 16
.Ltmp3218:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3219:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB378_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB378_3
.LBB378_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB378_3
.LBB378_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB378_5
# BB#4:
	jmp	.LBB378_6
.LBB378_5:
	leaq	.L.str25, %rdi
	leaq	.L.str24, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB378_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB378_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB378_12
# BB#8:                                 #   in Loop: Header=BB378_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB378_10
# BB#9:                                 #   in Loop: Header=BB378_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str26, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB378_10:                             #   in Loop: Header=BB378_7 Depth=1
	jmp	.LBB378_11
.LBB378_11:                             #   in Loop: Header=BB378_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB378_7
.LBB378_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp3220:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp3220-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3223:
	.cfi_def_cfa_offset 16
.Ltmp3224:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3225:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3226:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv, .Ltmp3226-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3229:
	.cfi_def_cfa_offset 16
.Ltmp3230:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3231:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3232:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv, .Ltmp3232-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3235:
	.cfi_def_cfa_offset 16
.Ltmp3236:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3237:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB381_9
# BB#1:
	movl	$0, -12(%rbp)
.LBB381_2:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movq	128(%rcx), %rdi
	movl	%eax, -44(%rbp)         # 4-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %edx
	movl	-44(%rbp), %esi         # 4-byte Reload
	cmpl	%edx, %esi
	jge	.LBB381_8
# BB#3:                                 #   in Loop: Header=BB381_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rdi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-56(%rbp), %rax         # 8-byte Reload
	callq	*112(%rax)
	cmpq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	je	.LBB381_5
# BB#4:                                 #   in Loop: Header=BB381_2 Depth=1
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-72(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB381_6
.LBB381_5:                              #   in Loop: Header=BB381_2 Depth=1
	movabsq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB381_6
.LBB381_6:                              #   in Loop: Header=BB381_2 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	*40(%rcx)
	movq	-24(%rbp), %rcx
	addq	$8, %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	_ZN7sc_core8sc_traceEPNS_13sc_trace_fileERKN5sc_dt12sc_uint_baseERKSs
# BB#7:                                 #   in Loop: Header=BB381_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB381_2
.LBB381_8:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
.LBB381_9:
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp3238:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv, .Ltmp3238-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3241:
	.cfi_def_cfa_offset 16
.Ltmp3242:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3243:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB382_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB382_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB382_8
# BB#3:                                 #   in Loop: Header=BB382_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB382_5
# BB#4:                                 #   in Loop: Header=BB382_2 Depth=1
	jmp	.LBB382_6
.LBB382_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB382_6:                              #   in Loop: Header=BB382_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB382_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB382_2
.LBB382_8:
	jmp	.LBB382_10
.LBB382_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB382_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3244:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp3244-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3247:
	.cfi_def_cfa_offset 16
.Ltmp3248:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3249:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB383_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB383_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB383_8
# BB#3:                                 #   in Loop: Header=BB383_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB383_5
# BB#4:                                 #   in Loop: Header=BB383_2 Depth=1
	jmp	.LBB383_6
.LBB383_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB383_6:                              #   in Loop: Header=BB383_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB383_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB383_2
.LBB383_8:
	jmp	.LBB383_10
.LBB383_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB383_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3250:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp3250-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3253:
	.cfi_def_cfa_offset 16
.Ltmp3254:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3255:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	232(%rdi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	-24(%rbp), %rax         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3256:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE, .Ltmp3256-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3259:
	.cfi_def_cfa_offset 16
.Ltmp3260:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3261:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3262:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE, .Ltmp3262-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3265:
	.cfi_def_cfa_offset 16
.Ltmp3266:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3267:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3268:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE, .Ltmp3268-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3271:
	.cfi_def_cfa_offset 16
.Ltmp3272:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3273:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3274:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE, .Ltmp3274-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3277:
	.cfi_def_cfa_offset 16
.Ltmp3278:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3279:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3280:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE, .Ltmp3280-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp3281:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv, .Ltmp3281-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp3282:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm, .Ltmp3282-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp3283:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm, .Ltmp3283-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3286:
	.cfi_def_cfa_offset 16
.Ltmp3287:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3288:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB392_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB392_3
.LBB392_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
.LBB392_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3289:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_, .Ltmp3289-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB393_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB393_2:
	ret
.Ltmp3290:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_, .Ltmp3290-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin394:
	.cfi_lsda 3, .Lexception394
# BB#0:
	pushq	%rbp
.Ltmp3322:
	.cfi_def_cfa_offset 16
.Ltmp3323:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3324:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB394_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB394_22
.LBB394_2:
	movl	$1, %esi
	movl	$.L.str27, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp3291:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
.Ltmp3292:
	jmp	.LBB394_3
.LBB394_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp3293:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp3294:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB394_4
.LBB394_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp3295:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp3296:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB394_5
.LBB394_5:
.Ltmp3297:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp3298:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB394_6
.LBB394_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp3299:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp3300:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB394_7
.LBB394_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp3301:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp3302:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB394_8
.LBB394_8:
.Ltmp3303:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp3304:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB394_9
.LBB394_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB394_21
.LBB394_10:
.Ltmp3305:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB394_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp3306:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
.Ltmp3307:
	jmp	.LBB394_13
.LBB394_13:
	jmp	.LBB394_18
.LBB394_14:
.Ltmp3316:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp3317:
	callq	__cxa_end_catch
.Ltmp3318:
	jmp	.LBB394_20
.LBB394_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp3308:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp3309:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB394_16
.LBB394_16:
.Ltmp3310:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
.Ltmp3311:
	jmp	.LBB394_17
.LBB394_17:
	jmp	.LBB394_18
.LBB394_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp3312:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp3313:
	jmp	.LBB394_19
.LBB394_19:
.Ltmp3314:
	callq	__cxa_rethrow
.Ltmp3315:
	jmp	.LBB394_25
.LBB394_20:
	jmp	.LBB394_23
.LBB394_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB394_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB394_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB394_24:
.Ltmp3319:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB394_25:
.Ltmp3325:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_, .Ltmp3325-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_endproc
.Leh_func_end394:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table394:
.Lexception394:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset926 = .Leh_func_begin394-.Leh_func_begin394 # >> Call Site 1 <<
	.long	.Lset926
.Lset927 = .Ltmp3291-.Leh_func_begin394 #   Call between .Leh_func_begin394 and .Ltmp3291
	.long	.Lset927
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset928 = .Ltmp3291-.Leh_func_begin394 # >> Call Site 2 <<
	.long	.Lset928
.Lset929 = .Ltmp3304-.Ltmp3291          #   Call between .Ltmp3291 and .Ltmp3304
	.long	.Lset929
.Lset930 = .Ltmp3305-.Leh_func_begin394 #     jumps to .Ltmp3305
	.long	.Lset930
	.byte	1                       #   On action: 1
.Lset931 = .Ltmp3304-.Leh_func_begin394 # >> Call Site 3 <<
	.long	.Lset931
.Lset932 = .Ltmp3306-.Ltmp3304          #   Call between .Ltmp3304 and .Ltmp3306
	.long	.Lset932
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset933 = .Ltmp3306-.Leh_func_begin394 # >> Call Site 4 <<
	.long	.Lset933
.Lset934 = .Ltmp3307-.Ltmp3306          #   Call between .Ltmp3306 and .Ltmp3307
	.long	.Lset934
.Lset935 = .Ltmp3316-.Leh_func_begin394 #     jumps to .Ltmp3316
	.long	.Lset935
	.byte	0                       #   On action: cleanup
.Lset936 = .Ltmp3317-.Leh_func_begin394 # >> Call Site 5 <<
	.long	.Lset936
.Lset937 = .Ltmp3318-.Ltmp3317          #   Call between .Ltmp3317 and .Ltmp3318
	.long	.Lset937
.Lset938 = .Ltmp3319-.Leh_func_begin394 #     jumps to .Ltmp3319
	.long	.Lset938
	.byte	1                       #   On action: 1
.Lset939 = .Ltmp3308-.Leh_func_begin394 # >> Call Site 6 <<
	.long	.Lset939
.Lset940 = .Ltmp3315-.Ltmp3308          #   Call between .Ltmp3308 and .Ltmp3315
	.long	.Lset940
.Lset941 = .Ltmp3316-.Leh_func_begin394 #     jumps to .Ltmp3316
	.long	.Lset941
	.byte	0                       #   On action: cleanup
.Lset942 = .Ltmp3315-.Leh_func_begin394 # >> Call Site 7 <<
	.long	.Lset942
.Lset943 = .Leh_func_end394-.Ltmp3315   #   Call between .Ltmp3315 and .Leh_func_end394
	.long	.Lset943
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3328:
	.cfi_def_cfa_offset 16
.Ltmp3329:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3330:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3331:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv, .Ltmp3331-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3334:
	.cfi_def_cfa_offset 16
.Ltmp3335:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3336:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3337:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_, .Ltmp3337-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp3338:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_, .Ltmp3338-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3341:
	.cfi_def_cfa_offset 16
.Ltmp3342:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3343:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3344:
	.size	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp3344-_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp3345:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv, .Ltmp3345-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp3346:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv, .Ltmp3346-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3349:
	.cfi_def_cfa_offset 16
.Ltmp3350:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3351:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB401_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB401_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB401_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB401_5
.LBB401_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB401_6
.LBB401_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB401_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp3352:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc, .Ltmp3352-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,@function
_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_: # @_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3355:
	.cfi_def_cfa_offset 16
.Ltmp3356:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3357:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3358:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_, .Ltmp3358-_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3361:
	.cfi_def_cfa_offset 16
.Ltmp3362:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3363:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3364:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv, .Ltmp3364-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3367:
	.cfi_def_cfa_offset 16
.Ltmp3368:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3369:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB404_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB404_3
.LBB404_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB404_3
.LBB404_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3370:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm, .Ltmp3370-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3373:
	.cfi_def_cfa_offset 16
.Ltmp3374:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3375:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3376:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_, .Ltmp3376-_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp3377:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp3377-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp3378:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_, .Ltmp3378-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3381:
	.cfi_def_cfa_offset 16
.Ltmp3382:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3383:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3384:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E, .Ltmp3384-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3387:
	.cfi_def_cfa_offset 16
.Ltmp3388:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3389:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB409_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
.LBB409_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3390:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m, .Ltmp3390-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3393:
	.cfi_def_cfa_offset 16
.Ltmp3394:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3395:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3396:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m, .Ltmp3396-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3399:
	.cfi_def_cfa_offset 16
.Ltmp3400:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3401:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3402:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_, .Ltmp3402-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp3403:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_, .Ltmp3403-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3406:
	.cfi_def_cfa_offset 16
.Ltmp3407:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3408:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3409:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E, .Ltmp3409-_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3412:
	.cfi_def_cfa_offset 16
.Ltmp3413:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3414:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3415:
	.size	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp3415-_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3418:
	.cfi_def_cfa_offset 16
.Ltmp3419:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3420:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3421:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_, .Ltmp3421-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3424:
	.cfi_def_cfa_offset 16
.Ltmp3425:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3426:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3427:
	.size	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp3427-_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3430:
	.cfi_def_cfa_offset 16
.Ltmp3431:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3432:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3433:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp3433-_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,@function
_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_: # @_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3436:
	.cfi_def_cfa_offset 16
.Ltmp3437:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3438:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3439:
	.size	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_, .Ltmp3439-_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,@function
_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_: # @_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp3440:
	.size	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_, .Ltmp3440-_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3443:
	.cfi_def_cfa_offset 16
.Ltmp3444:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3445:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3446:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp3446-_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,@function
_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_: # @_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3449:
	.cfi_def_cfa_offset 16
.Ltmp3450:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3451:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3452:
	.size	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_, .Ltmp3452-_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3455:
	.cfi_def_cfa_offset 16
.Ltmp3456:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3457:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB422_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB422_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3458:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_, .Ltmp3458-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3461:
	.cfi_def_cfa_offset 16
.Ltmp3462:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3463:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB423_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB423_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3464:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv, .Ltmp3464-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3465:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv, .Ltmp3465-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3468:
	.cfi_def_cfa_offset 16
.Ltmp3469:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3470:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3471:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv, .Ltmp3471-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp3472:
	.size	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp3472-_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3475:
	.cfi_def_cfa_offset 16
.Ltmp3476:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3477:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3478:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp3478-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3481:
	.cfi_def_cfa_offset 16
.Ltmp3482:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3483:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3484:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp3484-_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3487:
	.cfi_def_cfa_offset 16
.Ltmp3488:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3489:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB429_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB429_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3490:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_, .Ltmp3490-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3493:
	.cfi_def_cfa_offset 16
.Ltmp3494:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3495:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB430_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB430_3
.LBB430_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB430_3
.LBB430_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB430_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB430_6
.LBB430_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB430_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3496:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE, .Ltmp3496-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin431:
	.cfi_lsda 3, .Lexception431
# BB#0:
	pushq	%rbp
.Ltmp3505:
	.cfi_def_cfa_offset 16
.Ltmp3506:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3507:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp3497:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
.Ltmp3498:
	jmp	.LBB431_1
.LBB431_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB431_2:
.Ltmp3499:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp3500:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp3501:
	jmp	.LBB431_3
.LBB431_3:
	jmp	.LBB431_4
.LBB431_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB431_5:
.Ltmp3502:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3508:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp3508-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc
.Leh_func_end431:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table431:
.Lexception431:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset944 = .Ltmp3497-.Leh_func_begin431 # >> Call Site 1 <<
	.long	.Lset944
.Lset945 = .Ltmp3498-.Ltmp3497          #   Call between .Ltmp3497 and .Ltmp3498
	.long	.Lset945
.Lset946 = .Ltmp3499-.Leh_func_begin431 #     jumps to .Ltmp3499
	.long	.Lset946
	.byte	0                       #   On action: cleanup
.Lset947 = .Ltmp3498-.Leh_func_begin431 # >> Call Site 2 <<
	.long	.Lset947
.Lset948 = .Ltmp3500-.Ltmp3498          #   Call between .Ltmp3498 and .Ltmp3500
	.long	.Lset948
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset949 = .Ltmp3500-.Leh_func_begin431 # >> Call Site 3 <<
	.long	.Lset949
.Lset950 = .Ltmp3501-.Ltmp3500          #   Call between .Ltmp3500 and .Ltmp3501
	.long	.Lset950
.Lset951 = .Ltmp3502-.Leh_func_begin431 #     jumps to .Ltmp3502
	.long	.Lset951
	.byte	1                       #   On action: 1
.Lset952 = .Ltmp3501-.Leh_func_begin431 # >> Call Site 4 <<
	.long	.Lset952
.Lset953 = .Leh_func_end431-.Ltmp3501   #   Call between .Ltmp3501 and .Leh_func_end431
	.long	.Lset953
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3511:
	.cfi_def_cfa_offset 16
.Ltmp3512:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3513:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3514:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev, .Ltmp3514-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3517:
	.cfi_def_cfa_offset 16
.Ltmp3518:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3519:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3520:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev, .Ltmp3520-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin434:
	.cfi_lsda 3, .Lexception434
# BB#0:
	pushq	%rbp
.Ltmp3526:
	.cfi_def_cfa_offset 16
.Ltmp3527:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3528:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp3521:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
.Ltmp3522:
	jmp	.LBB434_1
.LBB434_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB434_2:
.Ltmp3523:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3529:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev, .Ltmp3529-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.cfi_endproc
.Leh_func_end434:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table434:
.Lexception434:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset954 = .Ltmp3521-.Leh_func_begin434 # >> Call Site 1 <<
	.long	.Lset954
.Lset955 = .Ltmp3522-.Ltmp3521          #   Call between .Ltmp3521 and .Ltmp3522
	.long	.Lset955
.Lset956 = .Ltmp3523-.Leh_func_begin434 #     jumps to .Ltmp3523
	.long	.Lset956
	.byte	0                       #   On action: cleanup
.Lset957 = .Ltmp3522-.Leh_func_begin434 # >> Call Site 2 <<
	.long	.Lset957
.Lset958 = .Leh_func_end434-.Ltmp3522   #   Call between .Ltmp3522 and .Leh_func_end434
	.long	.Lset958
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3532:
	.cfi_def_cfa_offset 16
.Ltmp3533:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3534:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB435_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB435_3
.LBB435_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB435_3
.LBB435_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB435_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB435_6
.LBB435_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB435_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3535:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE, .Ltmp3535-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3538:
	.cfi_def_cfa_offset 16
.Ltmp3539:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3540:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3541:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_, .Ltmp3541-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3544:
	.cfi_def_cfa_offset 16
.Ltmp3545:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3546:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3547:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_, .Ltmp3547-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin438:
	.cfi_lsda 3, .Lexception438
# BB#0:
	pushq	%rbp
.Ltmp3558:
	.cfi_def_cfa_offset 16
.Ltmp3559:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3560:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp3548:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp3549:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB438_1
.LBB438_1:
.Ltmp3550:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
.Ltmp3551:
	jmp	.LBB438_2
.LBB438_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB438_3:
.Ltmp3552:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp3553:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
.Ltmp3554:
	jmp	.LBB438_4
.LBB438_4:
	jmp	.LBB438_5
.LBB438_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB438_6:
.Ltmp3555:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3561:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev, .Ltmp3561-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end438:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table438:
.Lexception438:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset959 = .Ltmp3548-.Leh_func_begin438 # >> Call Site 1 <<
	.long	.Lset959
.Lset960 = .Ltmp3551-.Ltmp3548          #   Call between .Ltmp3548 and .Ltmp3551
	.long	.Lset960
.Lset961 = .Ltmp3552-.Leh_func_begin438 #     jumps to .Ltmp3552
	.long	.Lset961
	.byte	0                       #   On action: cleanup
.Lset962 = .Ltmp3551-.Leh_func_begin438 # >> Call Site 2 <<
	.long	.Lset962
.Lset963 = .Ltmp3553-.Ltmp3551          #   Call between .Ltmp3551 and .Ltmp3553
	.long	.Lset963
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset964 = .Ltmp3553-.Leh_func_begin438 # >> Call Site 3 <<
	.long	.Lset964
.Lset965 = .Ltmp3554-.Ltmp3553          #   Call between .Ltmp3553 and .Ltmp3554
	.long	.Lset965
.Lset966 = .Ltmp3555-.Leh_func_begin438 #     jumps to .Ltmp3555
	.long	.Lset966
	.byte	1                       #   On action: 1
.Lset967 = .Ltmp3554-.Leh_func_begin438 # >> Call Site 4 <<
	.long	.Lset967
.Lset968 = .Leh_func_end438-.Ltmp3554   #   Call between .Ltmp3554 and .Leh_func_end438
	.long	.Lset968
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin439:
	.cfi_lsda 3, .Lexception439
# BB#0:
	pushq	%rbp
.Ltmp3567:
	.cfi_def_cfa_offset 16
.Ltmp3568:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3569:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp3562:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp3563:
	jmp	.LBB439_1
.LBB439_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB439_2:
.Ltmp3564:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3570:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev, .Ltmp3570-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end439:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table439:
.Lexception439:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset969 = .Ltmp3562-.Leh_func_begin439 # >> Call Site 1 <<
	.long	.Lset969
.Lset970 = .Ltmp3563-.Ltmp3562          #   Call between .Ltmp3562 and .Ltmp3563
	.long	.Lset970
.Lset971 = .Ltmp3564-.Leh_func_begin439 #     jumps to .Ltmp3564
	.long	.Lset971
	.byte	0                       #   On action: cleanup
.Lset972 = .Ltmp3563-.Leh_func_begin439 # >> Call Site 2 <<
	.long	.Lset972
.Lset973 = .Leh_func_end439-.Ltmp3563   #   Call between .Ltmp3563 and .Leh_func_end439
	.long	.Lset973
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3573:
	.cfi_def_cfa_offset 16
.Ltmp3574:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3575:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3576:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev, .Ltmp3576-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3579:
	.cfi_def_cfa_offset 16
.Ltmp3580:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3581:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3582:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev, .Ltmp3582-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3585:
	.cfi_def_cfa_offset 16
.Ltmp3586:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3587:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3588:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp3588-_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3589:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp3589-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EEC2Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EEC2Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EEC2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EEC2Ev,@function
_ZN5sc_dt7sc_uintILi1EEC2Ev:            # @_ZN5sc_dt7sc_uintILi1EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3592:
	.cfi_def_cfa_offset 16
.Ltmp3593:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3594:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt12sc_uint_baseC2Ei
	leaq	_ZTVN5sc_dt7sc_uintILi1EEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3595:
	.size	_ZN5sc_dt7sc_uintILi1EEC2Ev, .Ltmp3595-_ZN5sc_dt7sc_uintILi1EEC2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EED0Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EED0Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EED0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EED0Ev,@function
_ZN5sc_dt7sc_uintILi1EED0Ev:            # @_ZN5sc_dt7sc_uintILi1EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin445:
	.cfi_lsda 3, .Lexception445
# BB#0:
	pushq	%rbp
.Ltmp3601:
	.cfi_def_cfa_offset 16
.Ltmp3602:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3603:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp3596:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp3597:
	jmp	.LBB445_1
.LBB445_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB445_2:
.Ltmp3598:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3604:
	.size	_ZN5sc_dt7sc_uintILi1EED0Ev, .Ltmp3604-_ZN5sc_dt7sc_uintILi1EED0Ev
	.cfi_endproc
.Leh_func_end445:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table445:
.Lexception445:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset974 = .Ltmp3596-.Leh_func_begin445 # >> Call Site 1 <<
	.long	.Lset974
.Lset975 = .Ltmp3597-.Ltmp3596          #   Call between .Ltmp3596 and .Ltmp3597
	.long	.Lset975
.Lset976 = .Ltmp3598-.Leh_func_begin445 #     jumps to .Ltmp3598
	.long	.Lset976
	.byte	0                       #   On action: cleanup
.Lset977 = .Ltmp3597-.Leh_func_begin445 # >> Call Site 2 <<
	.long	.Lset977
.Lset978 = .Leh_func_end445-.Ltmp3597   #   Call between .Ltmp3597 and .Leh_func_end445
	.long	.Lset978
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3607:
	.cfi_def_cfa_offset 16
.Ltmp3608:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3609:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$21, %eax
	movl	$5, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rsp, %rdx
	movq	%rdi, (%rdx)
	movl	$21, %r8d
	movl	$5, %edx
	movl	$4, %r9d
	movl	$2, %r10d
	xorl	%r11d, %r11d
	movq	%rsi, %rdi
	movl	%r8d, %esi
	movl	%ecx, -20(%rbp)         # 4-byte Spill
	movl	%r9d, %ecx
	movl	%r10d, %r8d
	movl	%r11d, %r9d
	movl	%eax, -24(%rbp)         # 4-byte Spill
	callq	_ZN5sc_dt6sc_fixC2EiiNS_9sc_q_modeENS_9sc_o_modeEiPNS_17sc_fxnum_observerE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3610:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE, .Ltmp3610-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EEC2EPNS_17sc_fxnum_observerE
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIbEC2Ev,"axG",@progbits,_ZN7sc_core6sc_outIbEC2Ev,comdat
	.weak	_ZN7sc_core6sc_outIbEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbEC2Ev,@function
_ZN7sc_core6sc_outIbEC2Ev:              # @_ZN7sc_core6sc_outIbEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3613:
	.cfi_def_cfa_offset 16
.Ltmp3614:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3615:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbEC2Ev
	leaq	_ZTVN7sc_core6sc_outIbEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3616:
	.size	_ZN7sc_core6sc_outIbEC2Ev, .Ltmp3616-_ZN7sc_core6sc_outIbEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIbEC2Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIbEC2Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIbEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIbEC2Ev,@function
_ZN7sc_core8sc_inoutIbEC2Ev:            # @_ZN7sc_core8sc_inoutIbEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3619:
	.cfi_def_cfa_offset 16
.Ltmp3620:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3621:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core8sc_inoutIbEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	movq	$0, 144(%rdi)
	movq	$0, 152(%rdi)
	movq	$0, 160(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3622:
	.size	_ZN7sc_core8sc_inoutIbEC2Ev, .Ltmp3622-_ZN7sc_core8sc_inoutIbEC2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core6sc_outIbE4kindEv,"axG",@progbits,_ZNK7sc_core6sc_outIbE4kindEv,comdat
	.weak	_ZNK7sc_core6sc_outIbE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core6sc_outIbE4kindEv,@function
_ZNK7sc_core6sc_outIbE4kindEv:          # @_ZNK7sc_core6sc_outIbE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str31, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3623:
	.size	_ZNK7sc_core6sc_outIbE4kindEv, .Ltmp3623-_ZNK7sc_core6sc_outIbE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIbED0Ev,"axG",@progbits,_ZN7sc_core6sc_outIbED0Ev,comdat
	.weak	_ZN7sc_core6sc_outIbED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbED0Ev,@function
_ZN7sc_core6sc_outIbED0Ev:              # @_ZN7sc_core6sc_outIbED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin450:
	.cfi_lsda 3, .Lexception450
# BB#0:
	pushq	%rbp
.Ltmp3629:
	.cfi_def_cfa_offset 16
.Ltmp3630:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3631:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp3624:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp3625:
	jmp	.LBB450_1
.LBB450_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB450_2:
.Ltmp3626:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3632:
	.size	_ZN7sc_core6sc_outIbED0Ev, .Ltmp3632-_ZN7sc_core6sc_outIbED0Ev
	.cfi_endproc
.Leh_func_end450:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table450:
.Lexception450:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset979 = .Ltmp3624-.Leh_func_begin450 # >> Call Site 1 <<
	.long	.Lset979
.Lset980 = .Ltmp3625-.Ltmp3624          #   Call between .Ltmp3624 and .Ltmp3625
	.long	.Lset980
.Lset981 = .Ltmp3626-.Leh_func_begin450 #     jumps to .Ltmp3626
	.long	.Lset981
	.byte	0                       #   On action: cleanup
.Lset982 = .Ltmp3625-.Leh_func_begin450 # >> Call Site 2 <<
	.long	.Lset982
.Lset983 = .Leh_func_end450-.Ltmp3625   #   Call between .Ltmp3625 and .Leh_func_end450
	.long	.Lset983
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB451_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB451_3
.LBB451_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB451_3
.LBB451_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp3633:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv, .Ltmp3633-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB452_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB452_3
.LBB452_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB452_3
.LBB452_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp3634:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv, .Ltmp3634-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3637:
	.cfi_def_cfa_offset 16
.Ltmp3638:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3639:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB453_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB453_3
.LBB453_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB453_3
.LBB453_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB453_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB453_6
.LBB453_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB453_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3640:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE, .Ltmp3640-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3643:
	.cfi_def_cfa_offset 16
.Ltmp3644:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3645:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB454_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB454_3
.LBB454_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB454_3
.LBB454_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB454_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB454_6
.LBB454_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB454_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3646:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE, .Ltmp3646-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3649:
	.cfi_def_cfa_offset 16
.Ltmp3650:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3651:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB455_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB455_3
.LBB455_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB455_3
.LBB455_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB455_5
# BB#4:
	jmp	.LBB455_6
.LBB455_5:
	leaq	.L.str25, %rdi
	leaq	.L.str24, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB455_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB455_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB455_12
# BB#8:                                 #   in Loop: Header=BB455_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB455_10
# BB#9:                                 #   in Loop: Header=BB455_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str26, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB455_10:                             #   in Loop: Header=BB455_7 Depth=1
	jmp	.LBB455_11
.LBB455_11:                             #   in Loop: Header=BB455_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB455_7
.LBB455_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp3652:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp3652-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3655:
	.cfi_def_cfa_offset 16
.Ltmp3656:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3657:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3658:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv, .Ltmp3658-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3661:
	.cfi_def_cfa_offset 16
.Ltmp3662:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3663:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIbEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3664:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv, .Ltmp3664-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3667:
	.cfi_def_cfa_offset 16
.Ltmp3668:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3669:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB458_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB458_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB458_8
# BB#3:                                 #   in Loop: Header=BB458_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB458_5
# BB#4:                                 #   in Loop: Header=BB458_2 Depth=1
	jmp	.LBB458_6
.LBB458_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB458_6:                              #   in Loop: Header=BB458_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB458_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB458_2
.LBB458_8:
	jmp	.LBB458_10
.LBB458_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB458_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3670:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp3670-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3673:
	.cfi_def_cfa_offset 16
.Ltmp3674:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3675:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB459_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB459_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB459_8
# BB#3:                                 #   in Loop: Header=BB459_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB459_5
# BB#4:                                 #   in Loop: Header=BB459_2 Depth=1
	jmp	.LBB459_6
.LBB459_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB459_6:                              #   in Loop: Header=BB459_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB459_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB459_2
.LBB459_8:
	jmp	.LBB459_10
.LBB459_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB459_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3676:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp3676-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3679:
	.cfi_def_cfa_offset 16
.Ltmp3680:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3681:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3682:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_, .Ltmp3682-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3685:
	.cfi_def_cfa_offset 16
.Ltmp3686:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3687:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3688:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_, .Ltmp3688-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp3689:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv, .Ltmp3689-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp3690:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm, .Ltmp3690-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp3691:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm, .Ltmp3691-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3694:
	.cfi_def_cfa_offset 16
.Ltmp3695:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3696:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB465_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB465_3
.LBB465_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
.LBB465_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3697:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_, .Ltmp3697-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB466_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB466_2:
	ret
.Ltmp3698:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_, .Ltmp3698-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin467:
	.cfi_lsda 3, .Lexception467
# BB#0:
	pushq	%rbp
.Ltmp3730:
	.cfi_def_cfa_offset 16
.Ltmp3731:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3732:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB467_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB467_22
.LBB467_2:
	movl	$1, %esi
	movl	$.L.str27, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp3699:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
.Ltmp3700:
	jmp	.LBB467_3
.LBB467_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp3701:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
.Ltmp3702:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB467_4
.LBB467_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp3703:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp3704:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB467_5
.LBB467_5:
.Ltmp3705:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
.Ltmp3706:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB467_6
.LBB467_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp3707:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
.Ltmp3708:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB467_7
.LBB467_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp3709:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp3710:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB467_8
.LBB467_8:
.Ltmp3711:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
.Ltmp3712:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB467_9
.LBB467_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB467_21
.LBB467_10:
.Ltmp3713:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB467_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp3714:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_
.Ltmp3715:
	jmp	.LBB467_13
.LBB467_13:
	jmp	.LBB467_18
.LBB467_14:
.Ltmp3724:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp3725:
	callq	__cxa_end_catch
.Ltmp3726:
	jmp	.LBB467_20
.LBB467_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp3716:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp3717:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB467_16
.LBB467_16:
.Ltmp3718:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
.Ltmp3719:
	jmp	.LBB467_17
.LBB467_17:
	jmp	.LBB467_18
.LBB467_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp3720:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
.Ltmp3721:
	jmp	.LBB467_19
.LBB467_19:
.Ltmp3722:
	callq	__cxa_rethrow
.Ltmp3723:
	jmp	.LBB467_25
.LBB467_20:
	jmp	.LBB467_23
.LBB467_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB467_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB467_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB467_24:
.Ltmp3727:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB467_25:
.Ltmp3733:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_, .Ltmp3733-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.cfi_endproc
.Leh_func_end467:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table467:
.Lexception467:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset984 = .Leh_func_begin467-.Leh_func_begin467 # >> Call Site 1 <<
	.long	.Lset984
.Lset985 = .Ltmp3699-.Leh_func_begin467 #   Call between .Leh_func_begin467 and .Ltmp3699
	.long	.Lset985
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset986 = .Ltmp3699-.Leh_func_begin467 # >> Call Site 2 <<
	.long	.Lset986
.Lset987 = .Ltmp3712-.Ltmp3699          #   Call between .Ltmp3699 and .Ltmp3712
	.long	.Lset987
.Lset988 = .Ltmp3713-.Leh_func_begin467 #     jumps to .Ltmp3713
	.long	.Lset988
	.byte	1                       #   On action: 1
.Lset989 = .Ltmp3712-.Leh_func_begin467 # >> Call Site 3 <<
	.long	.Lset989
.Lset990 = .Ltmp3714-.Ltmp3712          #   Call between .Ltmp3712 and .Ltmp3714
	.long	.Lset990
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset991 = .Ltmp3714-.Leh_func_begin467 # >> Call Site 4 <<
	.long	.Lset991
.Lset992 = .Ltmp3715-.Ltmp3714          #   Call between .Ltmp3714 and .Ltmp3715
	.long	.Lset992
.Lset993 = .Ltmp3724-.Leh_func_begin467 #     jumps to .Ltmp3724
	.long	.Lset993
	.byte	0                       #   On action: cleanup
.Lset994 = .Ltmp3725-.Leh_func_begin467 # >> Call Site 5 <<
	.long	.Lset994
.Lset995 = .Ltmp3726-.Ltmp3725          #   Call between .Ltmp3725 and .Ltmp3726
	.long	.Lset995
.Lset996 = .Ltmp3727-.Leh_func_begin467 #     jumps to .Ltmp3727
	.long	.Lset996
	.byte	1                       #   On action: 1
.Lset997 = .Ltmp3716-.Leh_func_begin467 # >> Call Site 6 <<
	.long	.Lset997
.Lset998 = .Ltmp3723-.Ltmp3716          #   Call between .Ltmp3716 and .Ltmp3723
	.long	.Lset998
.Lset999 = .Ltmp3724-.Leh_func_begin467 #     jumps to .Ltmp3724
	.long	.Lset999
	.byte	0                       #   On action: cleanup
.Lset1000 = .Ltmp3723-.Leh_func_begin467 # >> Call Site 7 <<
	.long	.Lset1000
.Lset1001 = .Leh_func_end467-.Ltmp3723  #   Call between .Ltmp3723 and .Leh_func_end467
	.long	.Lset1001
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3736:
	.cfi_def_cfa_offset 16
.Ltmp3737:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3738:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3739:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv, .Ltmp3739-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3742:
	.cfi_def_cfa_offset 16
.Ltmp3743:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3744:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3745:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_, .Ltmp3745-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp3746:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_, .Ltmp3746-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_: # @_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3749:
	.cfi_def_cfa_offset 16
.Ltmp3750:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3751:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3752:
	.size	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_, .Ltmp3752-_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp3753:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv, .Ltmp3753-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp3754:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv, .Ltmp3754-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3757:
	.cfi_def_cfa_offset 16
.Ltmp3758:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3759:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB474_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB474_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB474_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB474_5
.LBB474_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB474_6
.LBB474_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB474_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp3760:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc, .Ltmp3760-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,@function
_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_: # @_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3763:
	.cfi_def_cfa_offset 16
.Ltmp3764:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3765:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3766:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_, .Ltmp3766-_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3769:
	.cfi_def_cfa_offset 16
.Ltmp3770:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3771:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3772:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv, .Ltmp3772-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3775:
	.cfi_def_cfa_offset 16
.Ltmp3776:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3777:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB477_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB477_3
.LBB477_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB477_3
.LBB477_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3778:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm, .Ltmp3778-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3781:
	.cfi_def_cfa_offset 16
.Ltmp3782:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3783:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3784:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_, .Ltmp3784-_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp3785:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv, .Ltmp3785-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp3786:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_, .Ltmp3786-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3789:
	.cfi_def_cfa_offset 16
.Ltmp3790:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3791:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3792:
	.size	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E, .Ltmp3792-_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3795:
	.cfi_def_cfa_offset 16
.Ltmp3796:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3797:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB482_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m
.LBB482_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3798:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m, .Ltmp3798-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3801:
	.cfi_def_cfa_offset 16
.Ltmp3802:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3803:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3804:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m, .Ltmp3804-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_,@function
_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_: # @_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3807:
	.cfi_def_cfa_offset 16
.Ltmp3808:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3809:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3810:
	.size	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_, .Ltmp3810-_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp3811:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_, .Ltmp3811-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3814:
	.cfi_def_cfa_offset 16
.Ltmp3815:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3816:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3817:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E, .Ltmp3817-_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_: # @_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3820:
	.cfi_def_cfa_offset 16
.Ltmp3821:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3822:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3823:
	.size	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_, .Ltmp3823-_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3826:
	.cfi_def_cfa_offset 16
.Ltmp3827:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3828:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3829:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_, .Ltmp3829-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_: # @_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3832:
	.cfi_def_cfa_offset 16
.Ltmp3833:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3834:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3835:
	.size	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_, .Ltmp3835-_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3838:
	.cfi_def_cfa_offset 16
.Ltmp3839:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3840:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3841:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_, .Ltmp3841-_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,@function
_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_: # @_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3844:
	.cfi_def_cfa_offset 16
.Ltmp3845:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3846:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3847:
	.size	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_, .Ltmp3847-_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_,@function
_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_: # @_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp3848:
	.size	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_, .Ltmp3848-_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3851:
	.cfi_def_cfa_offset 16
.Ltmp3852:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3853:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3854:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_, .Ltmp3854-_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,@function
_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_: # @_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3857:
	.cfi_def_cfa_offset 16
.Ltmp3858:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3859:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3860:
	.size	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_, .Ltmp3860-_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3863:
	.cfi_def_cfa_offset 16
.Ltmp3864:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3865:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB495_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB495_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3866:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_, .Ltmp3866-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3869:
	.cfi_def_cfa_offset 16
.Ltmp3870:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3871:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB496_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB496_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3872:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv, .Ltmp3872-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3873:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv, .Ltmp3873-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3876:
	.cfi_def_cfa_offset 16
.Ltmp3877:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3878:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3879:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv, .Ltmp3879-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp3880:
	.size	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv, .Ltmp3880-_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3883:
	.cfi_def_cfa_offset 16
.Ltmp3884:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3885:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3886:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_, .Ltmp3886-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3889:
	.cfi_def_cfa_offset 16
.Ltmp3890:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3891:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3892:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_, .Ltmp3892-_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3895:
	.cfi_def_cfa_offset 16
.Ltmp3896:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3897:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB502_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB502_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3898:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_, .Ltmp3898-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3901:
	.cfi_def_cfa_offset 16
.Ltmp3902:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3903:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3904:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp3904-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin504:
	.cfi_lsda 3, .Lexception504
# BB#0:
	pushq	%rbp
.Ltmp3913:
	.cfi_def_cfa_offset 16
.Ltmp3914:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3915:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp3905:
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev
.Ltmp3906:
	jmp	.LBB504_1
.LBB504_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB504_2:
.Ltmp3907:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp3908:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp3909:
	jmp	.LBB504_3
.LBB504_3:
	jmp	.LBB504_4
.LBB504_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB504_5:
.Ltmp3910:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3916:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE, .Ltmp3916-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end504:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table504:
.Lexception504:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1002 = .Leh_func_begin504-.Leh_func_begin504 # >> Call Site 1 <<
	.long	.Lset1002
.Lset1003 = .Ltmp3905-.Leh_func_begin504 #   Call between .Leh_func_begin504 and .Ltmp3905
	.long	.Lset1003
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1004 = .Ltmp3905-.Leh_func_begin504 # >> Call Site 2 <<
	.long	.Lset1004
.Lset1005 = .Ltmp3906-.Ltmp3905         #   Call between .Ltmp3905 and .Ltmp3906
	.long	.Lset1005
.Lset1006 = .Ltmp3907-.Leh_func_begin504 #     jumps to .Ltmp3907
	.long	.Lset1006
	.byte	0                       #   On action: cleanup
.Lset1007 = .Ltmp3908-.Leh_func_begin504 # >> Call Site 3 <<
	.long	.Lset1007
.Lset1008 = .Ltmp3909-.Ltmp3908         #   Call between .Ltmp3908 and .Ltmp3909
	.long	.Lset1008
.Lset1009 = .Ltmp3910-.Leh_func_begin504 #     jumps to .Ltmp3910
	.long	.Lset1009
	.byte	1                       #   On action: 1
.Lset1010 = .Ltmp3909-.Leh_func_begin504 # >> Call Site 4 <<
	.long	.Lset1010
.Lset1011 = .Leh_func_end504-.Ltmp3909  #   Call between .Ltmp3909 and .Leh_func_end504
	.long	.Lset1011
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str32, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3917:
	.size	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp3917-_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3920:
	.cfi_def_cfa_offset 16
.Ltmp3921:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3922:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3923:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp3923-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin507:
	.cfi_lsda 3, .Lexception507
# BB#0:
	pushq	%rbp
.Ltmp3929:
	.cfi_def_cfa_offset 16
.Ltmp3930:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3931:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp3924:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp3925:
	jmp	.LBB507_1
.LBB507_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB507_2:
.Ltmp3926:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3932:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp3932-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end507:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table507:
.Lexception507:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1012 = .Ltmp3924-.Leh_func_begin507 # >> Call Site 1 <<
	.long	.Lset1012
.Lset1013 = .Ltmp3925-.Ltmp3924         #   Call between .Ltmp3924 and .Ltmp3925
	.long	.Lset1013
.Lset1014 = .Ltmp3926-.Leh_func_begin507 #     jumps to .Ltmp3926
	.long	.Lset1014
	.byte	0                       #   On action: cleanup
.Lset1015 = .Ltmp3925-.Leh_func_begin507 # >> Call Site 2 <<
	.long	.Lset1015
.Lset1016 = .Leh_func_end507-.Ltmp3925  #   Call between .Ltmp3925 and .Leh_func_end507
	.long	.Lset1016
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3935:
	.cfi_def_cfa_offset 16
.Ltmp3936:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3937:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3938:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp3938-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin509:
	.cfi_lsda 3, .Lexception509
# BB#0:
	pushq	%rbp
.Ltmp3947:
	.cfi_def_cfa_offset 16
.Ltmp3948:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3949:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp3939:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev
.Ltmp3940:
	jmp	.LBB509_1
.LBB509_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB509_2:
.Ltmp3941:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp3942:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp3943:
	jmp	.LBB509_3
.LBB509_3:
	jmp	.LBB509_4
.LBB509_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB509_5:
.Ltmp3944:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3950:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev, .Ltmp3950-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	.cfi_endproc
.Leh_func_end509:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table509:
.Lexception509:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1017 = .Ltmp3939-.Leh_func_begin509 # >> Call Site 1 <<
	.long	.Lset1017
.Lset1018 = .Ltmp3940-.Ltmp3939         #   Call between .Ltmp3939 and .Ltmp3940
	.long	.Lset1018
.Lset1019 = .Ltmp3941-.Leh_func_begin509 #     jumps to .Ltmp3941
	.long	.Lset1019
	.byte	0                       #   On action: cleanup
.Lset1020 = .Ltmp3940-.Leh_func_begin509 # >> Call Site 2 <<
	.long	.Lset1020
.Lset1021 = .Ltmp3942-.Ltmp3940         #   Call between .Ltmp3940 and .Ltmp3942
	.long	.Lset1021
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1022 = .Ltmp3942-.Leh_func_begin509 # >> Call Site 3 <<
	.long	.Lset1022
.Lset1023 = .Ltmp3943-.Ltmp3942         #   Call between .Ltmp3942 and .Ltmp3943
	.long	.Lset1023
.Lset1024 = .Ltmp3944-.Leh_func_begin509 #     jumps to .Ltmp3944
	.long	.Lset1024
	.byte	1                       #   On action: 1
.Lset1025 = .Ltmp3943-.Leh_func_begin509 # >> Call Site 4 <<
	.long	.Lset1025
.Lset1026 = .Leh_func_end509-.Ltmp3943  #   Call between .Ltmp3943 and .Leh_func_end509
	.long	.Lset1026
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3953:
	.cfi_def_cfa_offset 16
.Ltmp3954:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3955:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3956:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev, .Ltmp3956-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3959:
	.cfi_def_cfa_offset 16
.Ltmp3960:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3961:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3962:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev, .Ltmp3962-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin512:
	.cfi_lsda 3, .Lexception512
# BB#0:
	pushq	%rbp
.Ltmp3968:
	.cfi_def_cfa_offset 16
.Ltmp3969:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3970:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp3963:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
.Ltmp3964:
	jmp	.LBB512_1
.LBB512_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB512_2:
.Ltmp3965:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3971:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev, .Ltmp3971-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev
	.cfi_endproc
.Leh_func_end512:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table512:
.Lexception512:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1027 = .Ltmp3963-.Leh_func_begin512 # >> Call Site 1 <<
	.long	.Lset1027
.Lset1028 = .Ltmp3964-.Ltmp3963         #   Call between .Ltmp3963 and .Ltmp3964
	.long	.Lset1028
.Lset1029 = .Ltmp3965-.Leh_func_begin512 #     jumps to .Ltmp3965
	.long	.Lset1029
	.byte	0                       #   On action: cleanup
.Lset1030 = .Ltmp3964-.Leh_func_begin512 # >> Call Site 2 <<
	.long	.Lset1030
.Lset1031 = .Leh_func_end512-.Ltmp3964  #   Call between .Ltmp3964 and .Leh_func_end512
	.long	.Lset1031
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin513:
	.cfi_lsda 3, .Lexception513
# BB#0:
	pushq	%rbp
.Ltmp3982:
	.cfi_def_cfa_offset 16
.Ltmp3983:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3984:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp3972:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp3973:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB513_1
.LBB513_1:
.Ltmp3974:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
.Ltmp3975:
	jmp	.LBB513_2
.LBB513_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB513_3:
.Ltmp3976:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp3977:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
.Ltmp3978:
	jmp	.LBB513_4
.LBB513_4:
	jmp	.LBB513_5
.LBB513_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB513_6:
.Ltmp3979:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3985:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev, .Ltmp3985-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.cfi_endproc
.Leh_func_end513:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table513:
.Lexception513:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1032 = .Ltmp3972-.Leh_func_begin513 # >> Call Site 1 <<
	.long	.Lset1032
.Lset1033 = .Ltmp3975-.Ltmp3972         #   Call between .Ltmp3972 and .Ltmp3975
	.long	.Lset1033
.Lset1034 = .Ltmp3976-.Leh_func_begin513 #     jumps to .Ltmp3976
	.long	.Lset1034
	.byte	0                       #   On action: cleanup
.Lset1035 = .Ltmp3975-.Leh_func_begin513 # >> Call Site 2 <<
	.long	.Lset1035
.Lset1036 = .Ltmp3977-.Ltmp3975         #   Call between .Ltmp3975 and .Ltmp3977
	.long	.Lset1036
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1037 = .Ltmp3977-.Leh_func_begin513 # >> Call Site 3 <<
	.long	.Lset1037
.Lset1038 = .Ltmp3978-.Ltmp3977         #   Call between .Ltmp3977 and .Ltmp3978
	.long	.Lset1038
.Lset1039 = .Ltmp3979-.Leh_func_begin513 #     jumps to .Ltmp3979
	.long	.Lset1039
	.byte	1                       #   On action: 1
.Lset1040 = .Ltmp3978-.Leh_func_begin513 # >> Call Site 4 <<
	.long	.Lset1040
.Lset1041 = .Leh_func_end513-.Ltmp3978  #   Call between .Ltmp3978 and .Leh_func_end513
	.long	.Lset1041
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin514:
	.cfi_lsda 3, .Lexception514
# BB#0:
	pushq	%rbp
.Ltmp3991:
	.cfi_def_cfa_offset 16
.Ltmp3992:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3993:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp3986:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
.Ltmp3987:
	jmp	.LBB514_1
.LBB514_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB514_2:
.Ltmp3988:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3994:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev, .Ltmp3994-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.cfi_endproc
.Leh_func_end514:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table514:
.Lexception514:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1042 = .Ltmp3986-.Leh_func_begin514 # >> Call Site 1 <<
	.long	.Lset1042
.Lset1043 = .Ltmp3987-.Ltmp3986         #   Call between .Ltmp3986 and .Ltmp3987
	.long	.Lset1043
.Lset1044 = .Ltmp3988-.Leh_func_begin514 #     jumps to .Ltmp3988
	.long	.Lset1044
	.byte	0                       #   On action: cleanup
.Lset1045 = .Ltmp3987-.Leh_func_begin514 # >> Call Site 2 <<
	.long	.Lset1045
.Lset1046 = .Leh_func_end514-.Ltmp3987  #   Call between .Ltmp3987 and .Leh_func_end514
	.long	.Lset1046
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3997:
	.cfi_def_cfa_offset 16
.Ltmp3998:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3999:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4000:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev, .Ltmp4000-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4003:
	.cfi_def_cfa_offset 16
.Ltmp4004:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4005:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4006:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev, .Ltmp4006-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,@function
_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev: # @_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4009:
	.cfi_def_cfa_offset 16
.Ltmp4010:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4011:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4012:
	.size	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev, .Ltmp4012-_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4013:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev, .Ltmp4013-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4016:
	.cfi_def_cfa_offset 16
.Ltmp4017:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4018:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4019:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev, .Ltmp4019-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4022:
	.cfi_def_cfa_offset 16
.Ltmp4023:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4024:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4025:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev, .Ltmp4025-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4028:
	.cfi_def_cfa_offset 16
.Ltmp4029:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4030:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4031:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev, .Ltmp4031-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4034:
	.cfi_def_cfa_offset 16
.Ltmp4035:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4036:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4037:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev, .Ltmp4037-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4040:
	.cfi_def_cfa_offset 16
.Ltmp4041:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4042:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4043:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev, .Ltmp4043-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,@function
_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev: # @_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4046:
	.cfi_def_cfa_offset 16
.Ltmp4047:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4048:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4049:
	.size	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev, .Ltmp4049-_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4050:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev, .Ltmp4050-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4053:
	.cfi_def_cfa_offset 16
.Ltmp4054:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4055:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev
	leaq	_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4056:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev, .Ltmp4056-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4059:
	.cfi_def_cfa_offset 16
.Ltmp4060:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4061:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	movq	$0, 144(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4062:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev, .Ltmp4062-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv,"axG",@progbits,_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv,comdat
	.weak	_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv,@function
_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv: # @_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str31, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4063:
	.size	_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv, .Ltmp4063-_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin529:
	.cfi_lsda 3, .Lexception529
# BB#0:
	pushq	%rbp
.Ltmp4069:
	.cfi_def_cfa_offset 16
.Ltmp4070:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4071:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp4064:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp4065:
	jmp	.LBB529_1
.LBB529_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB529_2:
.Ltmp4066:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp4072:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev, .Ltmp4072-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_endproc
.Leh_func_end529:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table529:
.Lexception529:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1047 = .Ltmp4064-.Leh_func_begin529 # >> Call Site 1 <<
	.long	.Lset1047
.Lset1048 = .Ltmp4065-.Ltmp4064         #   Call between .Ltmp4064 and .Ltmp4065
	.long	.Lset1048
.Lset1049 = .Ltmp4066-.Leh_func_begin529 #     jumps to .Ltmp4066
	.long	.Lset1049
	.byte	0                       #   On action: cleanup
.Lset1050 = .Ltmp4065-.Leh_func_begin529 # >> Call Site 2 <<
	.long	.Lset1050
.Lset1051 = .Leh_func_end529-.Ltmp4065  #   Call between .Ltmp4065 and .Leh_func_end529
	.long	.Lset1051
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4075:
	.cfi_def_cfa_offset 16
.Ltmp4076:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4077:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4078:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp4078-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin531:
	.cfi_lsda 3, .Lexception531
# BB#0:
	pushq	%rbp
.Ltmp4087:
	.cfi_def_cfa_offset 16
.Ltmp4088:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4089:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp4079:
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
.Ltmp4080:
	jmp	.LBB531_1
.LBB531_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB531_2:
.Ltmp4081:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp4082:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp4083:
	jmp	.LBB531_3
.LBB531_3:
	jmp	.LBB531_4
.LBB531_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB531_5:
.Ltmp4084:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4090:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE, .Ltmp4090-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end531:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table531:
.Lexception531:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1052 = .Leh_func_begin531-.Leh_func_begin531 # >> Call Site 1 <<
	.long	.Lset1052
.Lset1053 = .Ltmp4079-.Leh_func_begin531 #   Call between .Leh_func_begin531 and .Ltmp4079
	.long	.Lset1053
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1054 = .Ltmp4079-.Leh_func_begin531 # >> Call Site 2 <<
	.long	.Lset1054
.Lset1055 = .Ltmp4080-.Ltmp4079         #   Call between .Ltmp4079 and .Ltmp4080
	.long	.Lset1055
.Lset1056 = .Ltmp4081-.Leh_func_begin531 #     jumps to .Ltmp4081
	.long	.Lset1056
	.byte	0                       #   On action: cleanup
.Lset1057 = .Ltmp4082-.Leh_func_begin531 # >> Call Site 3 <<
	.long	.Lset1057
.Lset1058 = .Ltmp4083-.Ltmp4082         #   Call between .Ltmp4082 and .Ltmp4083
	.long	.Lset1058
.Lset1059 = .Ltmp4084-.Leh_func_begin531 #     jumps to .Ltmp4084
	.long	.Lset1059
	.byte	1                       #   On action: 1
.Lset1060 = .Ltmp4083-.Leh_func_begin531 # >> Call Site 4 <<
	.long	.Lset1060
.Lset1061 = .Leh_func_end531-.Ltmp4083  #   Call between .Ltmp4083 and .Leh_func_end531
	.long	.Lset1061
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str32, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4091:
	.size	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp4091-_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4094:
	.cfi_def_cfa_offset 16
.Ltmp4095:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4096:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4097:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp4097-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin534:
	.cfi_lsda 3, .Lexception534
# BB#0:
	pushq	%rbp
.Ltmp4103:
	.cfi_def_cfa_offset 16
.Ltmp4104:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4105:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp4098:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp4099:
	jmp	.LBB534_1
.LBB534_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB534_2:
.Ltmp4100:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp4106:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp4106-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end534:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table534:
.Lexception534:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1062 = .Ltmp4098-.Leh_func_begin534 # >> Call Site 1 <<
	.long	.Lset1062
.Lset1063 = .Ltmp4099-.Ltmp4098         #   Call between .Ltmp4098 and .Ltmp4099
	.long	.Lset1063
.Lset1064 = .Ltmp4100-.Leh_func_begin534 #     jumps to .Ltmp4100
	.long	.Lset1064
	.byte	0                       #   On action: cleanup
.Lset1065 = .Ltmp4099-.Leh_func_begin534 # >> Call Site 2 <<
	.long	.Lset1065
.Lset1066 = .Leh_func_end534-.Ltmp4099  #   Call between .Ltmp4099 and .Leh_func_end534
	.long	.Lset1066
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4109:
	.cfi_def_cfa_offset 16
.Ltmp4110:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4111:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4112:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev, .Ltmp4112-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4115:
	.cfi_def_cfa_offset 16
.Ltmp4116:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4117:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4118:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev, .Ltmp4118-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4121:
	.cfi_def_cfa_offset 16
.Ltmp4122:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4123:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4124:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev, .Ltmp4124-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4127:
	.cfi_def_cfa_offset 16
.Ltmp4128:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4129:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4130:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev, .Ltmp4130-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4133:
	.cfi_def_cfa_offset 16
.Ltmp4134:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4135:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4136:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev, .Ltmp4136-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,@function
_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev: # @_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4139:
	.cfi_def_cfa_offset 16
.Ltmp4140:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4141:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4142:
	.size	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev, .Ltmp4142-_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4143:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev, .Ltmp4143-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4146:
	.cfi_def_cfa_offset 16
.Ltmp4147:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4148:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4149:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev, .Ltmp4149-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4152:
	.cfi_def_cfa_offset 16
.Ltmp4153:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4154:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4155:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp4155-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin544:
	.cfi_lsda 3, .Lexception544
# BB#0:
	pushq	%rbp
.Ltmp4164:
	.cfi_def_cfa_offset 16
.Ltmp4165:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4166:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp4156:
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev
.Ltmp4157:
	jmp	.LBB544_1
.LBB544_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB544_2:
.Ltmp4158:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp4159:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp4160:
	jmp	.LBB544_3
.LBB544_3:
	jmp	.LBB544_4
.LBB544_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB544_5:
.Ltmp4161:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4167:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE, .Ltmp4167-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end544:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table544:
.Lexception544:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1067 = .Leh_func_begin544-.Leh_func_begin544 # >> Call Site 1 <<
	.long	.Lset1067
.Lset1068 = .Ltmp4156-.Leh_func_begin544 #   Call between .Leh_func_begin544 and .Ltmp4156
	.long	.Lset1068
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1069 = .Ltmp4156-.Leh_func_begin544 # >> Call Site 2 <<
	.long	.Lset1069
.Lset1070 = .Ltmp4157-.Ltmp4156         #   Call between .Ltmp4156 and .Ltmp4157
	.long	.Lset1070
.Lset1071 = .Ltmp4158-.Leh_func_begin544 #     jumps to .Ltmp4158
	.long	.Lset1071
	.byte	0                       #   On action: cleanup
.Lset1072 = .Ltmp4159-.Leh_func_begin544 # >> Call Site 3 <<
	.long	.Lset1072
.Lset1073 = .Ltmp4160-.Ltmp4159         #   Call between .Ltmp4159 and .Ltmp4160
	.long	.Lset1073
.Lset1074 = .Ltmp4161-.Leh_func_begin544 #     jumps to .Ltmp4161
	.long	.Lset1074
	.byte	1                       #   On action: 1
.Lset1075 = .Ltmp4160-.Leh_func_begin544 # >> Call Site 4 <<
	.long	.Lset1075
.Lset1076 = .Leh_func_end544-.Ltmp4160  #   Call between .Ltmp4160 and .Leh_func_end544
	.long	.Lset1076
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str32, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4168:
	.size	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp4168-_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4171:
	.cfi_def_cfa_offset 16
.Ltmp4172:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4173:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4174:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp4174-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin547:
	.cfi_lsda 3, .Lexception547
# BB#0:
	pushq	%rbp
.Ltmp4180:
	.cfi_def_cfa_offset 16
.Ltmp4181:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4182:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp4175:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp4176:
	jmp	.LBB547_1
.LBB547_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB547_2:
.Ltmp4177:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp4183:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp4183-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end547:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table547:
.Lexception547:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1077 = .Ltmp4175-.Leh_func_begin547 # >> Call Site 1 <<
	.long	.Lset1077
.Lset1078 = .Ltmp4176-.Ltmp4175         #   Call between .Ltmp4175 and .Ltmp4176
	.long	.Lset1078
.Lset1079 = .Ltmp4177-.Leh_func_begin547 #     jumps to .Ltmp4177
	.long	.Lset1079
	.byte	0                       #   On action: cleanup
.Lset1080 = .Ltmp4176-.Leh_func_begin547 # >> Call Site 2 <<
	.long	.Lset1080
.Lset1081 = .Leh_func_end547-.Ltmp4176  #   Call between .Ltmp4176 and .Leh_func_end547
	.long	.Lset1081
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4186:
	.cfi_def_cfa_offset 16
.Ltmp4187:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4188:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4189:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev, .Ltmp4189-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4192:
	.cfi_def_cfa_offset 16
.Ltmp4193:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4194:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4195:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev, .Ltmp4195-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4198:
	.cfi_def_cfa_offset 16
.Ltmp4199:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4200:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4201:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev, .Ltmp4201-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4204:
	.cfi_def_cfa_offset 16
.Ltmp4205:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4206:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4207:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev, .Ltmp4207-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4210:
	.cfi_def_cfa_offset 16
.Ltmp4211:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4212:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4213:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev, .Ltmp4213-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4216:
	.cfi_def_cfa_offset 16
.Ltmp4217:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4218:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4219:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev, .Ltmp4219-_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4220:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev, .Ltmp4220-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4223:
	.cfi_def_cfa_offset 16
.Ltmp4224:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4225:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4226:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev, .Ltmp4226-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4229:
	.cfi_def_cfa_offset 16
.Ltmp4230:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4231:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4232:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp4232-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin557:
	.cfi_lsda 3, .Lexception557
# BB#0:
	pushq	%rbp
.Ltmp4241:
	.cfi_def_cfa_offset 16
.Ltmp4242:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4243:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp4233:
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
.Ltmp4234:
	jmp	.LBB557_1
.LBB557_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB557_2:
.Ltmp4235:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp4236:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp4237:
	jmp	.LBB557_3
.LBB557_3:
	jmp	.LBB557_4
.LBB557_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB557_5:
.Ltmp4238:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4244:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE, .Ltmp4244-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end557:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table557:
.Lexception557:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1082 = .Leh_func_begin557-.Leh_func_begin557 # >> Call Site 1 <<
	.long	.Lset1082
.Lset1083 = .Ltmp4233-.Leh_func_begin557 #   Call between .Leh_func_begin557 and .Ltmp4233
	.long	.Lset1083
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1084 = .Ltmp4233-.Leh_func_begin557 # >> Call Site 2 <<
	.long	.Lset1084
.Lset1085 = .Ltmp4234-.Ltmp4233         #   Call between .Ltmp4233 and .Ltmp4234
	.long	.Lset1085
.Lset1086 = .Ltmp4235-.Leh_func_begin557 #     jumps to .Ltmp4235
	.long	.Lset1086
	.byte	0                       #   On action: cleanup
.Lset1087 = .Ltmp4236-.Leh_func_begin557 # >> Call Site 3 <<
	.long	.Lset1087
.Lset1088 = .Ltmp4237-.Ltmp4236         #   Call between .Ltmp4236 and .Ltmp4237
	.long	.Lset1088
.Lset1089 = .Ltmp4238-.Leh_func_begin557 #     jumps to .Ltmp4238
	.long	.Lset1089
	.byte	1                       #   On action: 1
.Lset1090 = .Ltmp4237-.Leh_func_begin557 # >> Call Site 4 <<
	.long	.Lset1090
.Lset1091 = .Leh_func_end557-.Ltmp4237  #   Call between .Ltmp4237 and .Leh_func_end557
	.long	.Lset1091
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str32, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4245:
	.size	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp4245-_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4248:
	.cfi_def_cfa_offset 16
.Ltmp4249:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4250:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4251:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp4251-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin560:
	.cfi_lsda 3, .Lexception560
# BB#0:
	pushq	%rbp
.Ltmp4257:
	.cfi_def_cfa_offset 16
.Ltmp4258:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4259:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp4252:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp4253:
	jmp	.LBB560_1
.LBB560_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB560_2:
.Ltmp4254:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp4260:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp4260-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end560:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table560:
.Lexception560:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1092 = .Ltmp4252-.Leh_func_begin560 # >> Call Site 1 <<
	.long	.Lset1092
.Lset1093 = .Ltmp4253-.Ltmp4252         #   Call between .Ltmp4252 and .Ltmp4253
	.long	.Lset1093
.Lset1094 = .Ltmp4254-.Leh_func_begin560 #     jumps to .Ltmp4254
	.long	.Lset1094
	.byte	0                       #   On action: cleanup
.Lset1095 = .Ltmp4253-.Leh_func_begin560 # >> Call Site 2 <<
	.long	.Lset1095
.Lset1096 = .Leh_func_end560-.Ltmp4253  #   Call between .Ltmp4253 and .Leh_func_end560
	.long	.Lset1096
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4263:
	.cfi_def_cfa_offset 16
.Ltmp4264:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4265:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4266:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev, .Ltmp4266-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4269:
	.cfi_def_cfa_offset 16
.Ltmp4270:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4271:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4272:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev, .Ltmp4272-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4275:
	.cfi_def_cfa_offset 16
.Ltmp4276:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4277:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4278:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev, .Ltmp4278-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4281:
	.cfi_def_cfa_offset 16
.Ltmp4282:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4283:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4284:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev, .Ltmp4284-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4287:
	.cfi_def_cfa_offset 16
.Ltmp4288:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4289:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4290:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev, .Ltmp4290-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4293:
	.cfi_def_cfa_offset 16
.Ltmp4294:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4295:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4296:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev, .Ltmp4296-_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4297:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev, .Ltmp4297-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi3EEC2EPKc,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EEC2EPKc,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EEC2EPKc
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EEC2EPKc,@function
_ZN5sc_dt7sc_uintILi3EEC2EPKc:          # @_ZN5sc_dt7sc_uintILi3EEC2EPKc
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin568:
	.cfi_lsda 3, .Lexception568
# BB#0:
	pushq	%rbp
.Ltmp4306:
	.cfi_def_cfa_offset 16
.Ltmp4307:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4308:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movl	$3, %eax
	movq	%rsi, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movl	%eax, %esi
	callq	_ZN5sc_dt12sc_uint_baseC2Ei
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt7sc_uintILi3EEE+16, (%rdi)
	movq	-16(%rbp), %rsi
.Ltmp4298:
	callq	_ZN5sc_dt12sc_uint_baseaSEPKc
.Ltmp4299:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB568_1
.LBB568_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB568_2:
.Ltmp4300:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp4301:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
.Ltmp4302:
	jmp	.LBB568_3
.LBB568_3:
	jmp	.LBB568_4
.LBB568_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB568_5:
.Ltmp4303:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4309:
	.size	_ZN5sc_dt7sc_uintILi3EEC2EPKc, .Ltmp4309-_ZN5sc_dt7sc_uintILi3EEC2EPKc
	.cfi_endproc
.Leh_func_end568:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table568:
.Lexception568:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1097 = .Leh_func_begin568-.Leh_func_begin568 # >> Call Site 1 <<
	.long	.Lset1097
.Lset1098 = .Ltmp4298-.Leh_func_begin568 #   Call between .Leh_func_begin568 and .Ltmp4298
	.long	.Lset1098
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1099 = .Ltmp4298-.Leh_func_begin568 # >> Call Site 2 <<
	.long	.Lset1099
.Lset1100 = .Ltmp4299-.Ltmp4298         #   Call between .Ltmp4298 and .Ltmp4299
	.long	.Lset1100
.Lset1101 = .Ltmp4300-.Leh_func_begin568 #     jumps to .Ltmp4300
	.long	.Lset1101
	.byte	0                       #   On action: cleanup
.Lset1102 = .Ltmp4301-.Leh_func_begin568 # >> Call Site 3 <<
	.long	.Lset1102
.Lset1103 = .Ltmp4302-.Ltmp4301         #   Call between .Ltmp4301 and .Ltmp4302
	.long	.Lset1103
.Lset1104 = .Ltmp4303-.Leh_func_begin568 #     jumps to .Ltmp4303
	.long	.Lset1104
	.byte	1                       #   On action: 1
.Lset1105 = .Ltmp4302-.Leh_func_begin568 # >> Call Site 4 <<
	.long	.Lset1105
.Lset1106 = .Leh_func_end568-.Ltmp4302  #   Call between .Ltmp4302 and .Leh_func_end568
	.long	.Lset1106
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt7sc_uintILi3EED0Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EED0Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EED0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EED0Ev,@function
_ZN5sc_dt7sc_uintILi3EED0Ev:            # @_ZN5sc_dt7sc_uintILi3EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin569:
	.cfi_lsda 3, .Lexception569
# BB#0:
	pushq	%rbp
.Ltmp4315:
	.cfi_def_cfa_offset 16
.Ltmp4316:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4317:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp4310:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp4311:
	jmp	.LBB569_1
.LBB569_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB569_2:
.Ltmp4312:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp4318:
	.size	_ZN5sc_dt7sc_uintILi3EED0Ev, .Ltmp4318-_ZN5sc_dt7sc_uintILi3EED0Ev
	.cfi_endproc
.Leh_func_end569:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table569:
.Lexception569:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1107 = .Ltmp4310-.Leh_func_begin569 # >> Call Site 1 <<
	.long	.Lset1107
.Lset1108 = .Ltmp4311-.Ltmp4310         #   Call between .Ltmp4310 and .Ltmp4311
	.long	.Lset1108
.Lset1109 = .Ltmp4312-.Leh_func_begin569 #     jumps to .Ltmp4312
	.long	.Lset1109
	.byte	0                       #   On action: cleanup
.Lset1110 = .Ltmp4311-.Leh_func_begin569 # >> Call Site 2 <<
	.long	.Lset1110
.Lset1111 = .Leh_func_end569-.Ltmp4311  #   Call between .Ltmp4311 and .Leh_func_end569
	.long	.Lset1111
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core18sc_process_monitorD2Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD2Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD2Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD2Ev,@function
_ZN7sc_core18sc_process_monitorD2Ev:    # @_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4319:
	.size	_ZN7sc_core18sc_process_monitorD2Ev, .Ltmp4319-_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observerD2Ev,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observerD2Ev,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observerD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observerD2Ev,@function
_ZN5sc_dt22sc_fxnum_fast_observerD2Ev:  # @_ZN5sc_dt22sc_fxnum_fast_observerD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4320:
	.size	_ZN5sc_dt22sc_fxnum_fast_observerD2Ev, .Ltmp4320-_ZN5sc_dt22sc_fxnum_fast_observerD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observerD2Ev,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observerD2Ev,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observerD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observerD2Ev,@function
_ZN5sc_dt17sc_fxnum_observerD2Ev:       # @_ZN5sc_dt17sc_fxnum_observerD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4321:
	.size	_ZN5sc_dt17sc_fxnum_observerD2Ev, .Ltmp4321-_ZN5sc_dt17sc_fxnum_observerD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observerD2Ev,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observerD2Ev,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observerD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observerD2Ev,@function
_ZN5sc_dt22sc_fxval_fast_observerD2Ev:  # @_ZN5sc_dt22sc_fxval_fast_observerD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4322:
	.size	_ZN5sc_dt22sc_fxval_fast_observerD2Ev, .Ltmp4322-_ZN5sc_dt22sc_fxval_fast_observerD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observerD2Ev,"axG",@progbits,_ZN5sc_dt17sc_fxval_observerD2Ev,comdat
	.weak	_ZN5sc_dt17sc_fxval_observerD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observerD2Ev,@function
_ZN5sc_dt17sc_fxval_observerD2Ev:       # @_ZN5sc_dt17sc_fxval_observerD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4323:
	.size	_ZN5sc_dt17sc_fxval_observerD2Ev, .Ltmp4323-_ZN5sc_dt17sc_fxval_observerD2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_object10simcontextEv,"axG",@progbits,_ZNK7sc_core9sc_object10simcontextEv,comdat
	.weak	_ZNK7sc_core9sc_object10simcontextEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_object10simcontextEv,@function
_ZNK7sc_core9sc_object10simcontextEv:   # @_ZNK7sc_core9sc_object10simcontextEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	80(%rdi), %rax
	ret
.Ltmp4324:
	.size	_ZNK7sc_core9sc_object10simcontextEv, .Ltmp4324-_ZNK7sc_core9sc_object10simcontextEv
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE,"axG",@progbits,_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE,comdat
	.weak	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE,@function
_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE:    # @_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4327:
	.cfi_def_cfa_offset 16
.Ltmp4328:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4329:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt8sc_fxvalC2EPNS_8scfx_repE
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4330:
	.size	_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE, .Ltmp4330-_ZN5sc_dt8sc_fxvalC1EPNS_8scfx_repE
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxvalC2EPNS_8scfx_repE,"axG",@progbits,_ZN5sc_dt8sc_fxvalC2EPNS_8scfx_repE,comdat
	.weak	_ZN5sc_dt8sc_fxvalC2EPNS_8scfx_repE
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxvalC2EPNS_8scfx_repE,@function
_ZN5sc_dt8sc_fxvalC2EPNS_8scfx_repE:    # @_ZN5sc_dt8sc_fxvalC2EPNS_8scfx_repE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin577:
	.cfi_lsda 3, .Lexception577
# BB#0:
	pushq	%rbp
.Ltmp4339:
	.cfi_def_cfa_offset 16
.Ltmp4340:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4341:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movb	$0, -25(%rbp)
	cmpq	$0, %rdi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	je	.LBB577_2
# BB#1:
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB577_4
.LBB577_2:
	movl	$40, %edi
	callq	_ZN5sc_dt8scfx_repnwEm
	movq	%rax, -24(%rbp)
	movq	%rax, %rdi
	movb	$1, -25(%rbp)
.Ltmp4331:
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt8scfx_repC1Ev
.Ltmp4332:
	jmp	.LBB577_3
.LBB577_3:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB577_4
.LBB577_4:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	$0, 8(%rcx)
	addq	$96, %rsp
	popq	%rbp
	ret
.LBB577_5:
.Ltmp4333:
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
	testb	$1, -25(%rbp)
	jne	.LBB577_6
	jmp	.LBB577_8
.LBB577_6:
	movq	-24(%rbp), %rdi
.Ltmp4334:
	movl	$40, %esi
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp4335:
	jmp	.LBB577_7
.LBB577_7:
	jmp	.LBB577_8
.LBB577_8:
	jmp	.LBB577_9
.LBB577_9:
	movq	-40(%rbp), %rdi
	callq	_Unwind_Resume
.LBB577_10:
.Ltmp4336:
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4342:
	.size	_ZN5sc_dt8sc_fxvalC2EPNS_8scfx_repE, .Ltmp4342-_ZN5sc_dt8sc_fxvalC2EPNS_8scfx_repE
	.cfi_endproc
.Leh_func_end577:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table577:
.Lexception577:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1112 = .Leh_func_begin577-.Leh_func_begin577 # >> Call Site 1 <<
	.long	.Lset1112
.Lset1113 = .Ltmp4331-.Leh_func_begin577 #   Call between .Leh_func_begin577 and .Ltmp4331
	.long	.Lset1113
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1114 = .Ltmp4331-.Leh_func_begin577 # >> Call Site 2 <<
	.long	.Lset1114
.Lset1115 = .Ltmp4332-.Ltmp4331         #   Call between .Ltmp4331 and .Ltmp4332
	.long	.Lset1115
.Lset1116 = .Ltmp4333-.Leh_func_begin577 #     jumps to .Ltmp4333
	.long	.Lset1116
	.byte	0                       #   On action: cleanup
.Lset1117 = .Ltmp4334-.Leh_func_begin577 # >> Call Site 3 <<
	.long	.Lset1117
.Lset1118 = .Ltmp4335-.Ltmp4334         #   Call between .Ltmp4334 and .Ltmp4335
	.long	.Lset1118
.Lset1119 = .Ltmp4336-.Leh_func_begin577 #     jumps to .Ltmp4336
	.long	.Lset1119
	.byte	1                       #   On action: 1
.Lset1120 = .Ltmp4335-.Leh_func_begin577 # >> Call Site 4 <<
	.long	.Lset1120
.Lset1121 = .Leh_func_end577-.Ltmp4335  #   Call between .Ltmp4335 and .Leh_func_end577
	.long	.Lset1121
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4345:
	.cfi_def_cfa_offset 16
.Ltmp4346:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4347:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB578_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str18, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB578_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4348:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv, .Ltmp4348-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4351:
	.cfi_def_cfa_offset 16
.Ltmp4352:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4353:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB579_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str18, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB579_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4354:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv, .Ltmp4354-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EED2Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EED2Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EED2Ev,@function
_ZN5sc_dt7sc_uintILi32EED2Ev:           # @_ZN5sc_dt7sc_uintILi32EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4357:
	.cfi_def_cfa_offset 16
.Ltmp4358:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4359:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4360:
	.size	_ZN5sc_dt7sc_uintILi32EED2Ev, .Ltmp4360-_ZN5sc_dt7sc_uintILi32EED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i,"axG",@progbits,_ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i,comdat
	.weak	_ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i
	.align	16, 0x90
	.type	_ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i,@function
_ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i: # @_ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin581:
	.cfi_lsda 3, .Lexception581
# BB#0:
	pushq	%rbp
.Ltmp4369:
	.cfi_def_cfa_offset 16
.Ltmp4370:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4371:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	$40, %edi
	callq	_ZN5sc_dt8scfx_repnwEm
	movq	%rax, %rsi
	movq	%rax, %rdi
.Ltmp4361:
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt8scfx_repC1Ev
.Ltmp4362:
	jmp	.LBB581_1
.LBB581_1:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	callq	_ZN5sc_dt8multiplyERNS_8scfx_repERKS0_S3_i
	movq	-32(%rbp), %rax
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB581_2:
.Ltmp4363:
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
.Ltmp4364:
	movl	$40, %esi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp4365:
	jmp	.LBB581_3
.LBB581_3:
	jmp	.LBB581_4
.LBB581_4:
	movq	-40(%rbp), %rdi
	callq	_Unwind_Resume
.LBB581_5:
.Ltmp4366:
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4372:
	.size	_ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i, .Ltmp4372-_ZN5sc_dt13mult_scfx_repERKNS_8scfx_repES2_i
	.cfi_endproc
.Leh_func_end581:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table581:
.Lexception581:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset1122 = .Leh_func_begin581-.Leh_func_begin581 # >> Call Site 1 <<
	.long	.Lset1122
.Lset1123 = .Ltmp4361-.Leh_func_begin581 #   Call between .Leh_func_begin581 and .Ltmp4361
	.long	.Lset1123
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1124 = .Ltmp4361-.Leh_func_begin581 # >> Call Site 2 <<
	.long	.Lset1124
.Lset1125 = .Ltmp4362-.Ltmp4361         #   Call between .Ltmp4361 and .Ltmp4362
	.long	.Lset1125
.Lset1126 = .Ltmp4363-.Leh_func_begin581 #     jumps to .Ltmp4363
	.long	.Lset1126
	.byte	0                       #   On action: cleanup
.Lset1127 = .Ltmp4362-.Leh_func_begin581 # >> Call Site 3 <<
	.long	.Lset1127
.Lset1128 = .Ltmp4364-.Ltmp4362         #   Call between .Ltmp4362 and .Ltmp4364
	.long	.Lset1128
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1129 = .Ltmp4364-.Leh_func_begin581 # >> Call Site 4 <<
	.long	.Lset1129
.Lset1130 = .Ltmp4365-.Ltmp4364         #   Call between .Ltmp4364 and .Ltmp4365
	.long	.Lset1130
.Lset1131 = .Ltmp4366-.Leh_func_begin581 #     jumps to .Ltmp4366
	.long	.Lset1131
	.byte	1                       #   On action: 1
.Lset1132 = .Ltmp4365-.Leh_func_begin581 # >> Call Site 5 <<
	.long	.Lset1132
.Lset1133 = .Leh_func_end581-.Ltmp4365  #   Call between .Ltmp4365 and .Leh_func_end581
	.long	.Lset1133
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fxvalD2Ev,"axG",@progbits,_ZN5sc_dt8sc_fxvalD2Ev,comdat
	.weak	_ZN5sc_dt8sc_fxvalD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxvalD2Ev,@function
_ZN5sc_dt8sc_fxvalD2Ev:                 # @_ZN5sc_dt8sc_fxvalD2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin582:
	.cfi_lsda 3, .Lexception582
# BB#0:
	pushq	%rbp
.Ltmp4381:
	.cfi_def_cfa_offset 16
.Ltmp4382:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4383:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	je	.LBB582_3
# BB#1:
.Ltmp4373:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repD1Ev
.Ltmp4374:
	jmp	.LBB582_2
.LBB582_2:
	movabsq	$40, %rsi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN5sc_dt8scfx_repdlEPvm
.LBB582_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB582_4:
.Ltmp4375:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp4376:
	movl	$40, %esi
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp4377:
	jmp	.LBB582_5
.LBB582_5:
	jmp	.LBB582_6
.LBB582_6:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB582_7:
.Ltmp4378:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4384:
	.size	_ZN5sc_dt8sc_fxvalD2Ev, .Ltmp4384-_ZN5sc_dt8sc_fxvalD2Ev
	.cfi_endproc
.Leh_func_end582:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table582:
.Lexception582:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1134 = .Ltmp4373-.Leh_func_begin582 # >> Call Site 1 <<
	.long	.Lset1134
.Lset1135 = .Ltmp4374-.Ltmp4373         #   Call between .Ltmp4373 and .Ltmp4374
	.long	.Lset1135
.Lset1136 = .Ltmp4375-.Leh_func_begin582 #     jumps to .Ltmp4375
	.long	.Lset1136
	.byte	0                       #   On action: cleanup
.Lset1137 = .Ltmp4374-.Leh_func_begin582 # >> Call Site 2 <<
	.long	.Lset1137
.Lset1138 = .Ltmp4376-.Ltmp4374         #   Call between .Ltmp4374 and .Ltmp4376
	.long	.Lset1138
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1139 = .Ltmp4376-.Leh_func_begin582 # >> Call Site 3 <<
	.long	.Lset1139
.Lset1140 = .Ltmp4377-.Ltmp4376         #   Call between .Ltmp4376 and .Ltmp4377
	.long	.Lset1140
.Lset1141 = .Ltmp4378-.Leh_func_begin582 #     jumps to .Ltmp4378
	.long	.Lset1141
	.byte	1                       #   On action: 1
.Lset1142 = .Ltmp4377-.Leh_func_begin582 # >> Call Site 4 <<
	.long	.Lset1142
.Lset1143 = .Leh_func_end582-.Ltmp4377  #   Call between .Ltmp4377 and .Leh_func_end582
	.long	.Lset1143
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev,"axG",@progbits,_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev,comdat
	.weak	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev,@function
_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev: # @_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4387:
	.cfi_def_cfa_offset 16
.Ltmp4388:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4389:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt6sc_fixD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4390:
	.size	_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev, .Ltmp4390-_ZN5sc_dt8sc_fixedILi32ELi16ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt6sc_fixD2Ev,"axG",@progbits,_ZN5sc_dt6sc_fixD2Ev,comdat
	.weak	_ZN5sc_dt6sc_fixD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt6sc_fixD2Ev,@function
_ZN5sc_dt6sc_fixD2Ev:                   # @_ZN5sc_dt6sc_fixD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4393:
	.cfi_def_cfa_offset 16
.Ltmp4394:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4395:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt8sc_fxnumD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4396:
	.size	_ZN5sc_dt6sc_fixD2Ev, .Ltmp4396-_ZN5sc_dt6sc_fixD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fxnumD2Ev,"axG",@progbits,_ZN5sc_dt8sc_fxnumD2Ev,comdat
	.weak	_ZN5sc_dt8sc_fxnumD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fxnumD2Ev,@function
_ZN5sc_dt8sc_fxnumD2Ev:                 # @_ZN5sc_dt8sc_fxnumD2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin585:
	.cfi_lsda 3, .Lexception585
# BB#0:
	pushq	%rbp
.Ltmp4405:
	.cfi_def_cfa_offset 16
.Ltmp4406:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4407:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	je	.LBB585_3
# BB#1:
.Ltmp4397:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repD1Ev
.Ltmp4398:
	jmp	.LBB585_2
.LBB585_2:
	movabsq	$40, %rsi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN5sc_dt8scfx_repdlEPvm
.LBB585_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB585_4:
.Ltmp4399:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp4400:
	movl	$40, %esi
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt8scfx_repdlEPvm
.Ltmp4401:
	jmp	.LBB585_5
.LBB585_5:
	jmp	.LBB585_6
.LBB585_6:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB585_7:
.Ltmp4402:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4408:
	.size	_ZN5sc_dt8sc_fxnumD2Ev, .Ltmp4408-_ZN5sc_dt8sc_fxnumD2Ev
	.cfi_endproc
.Leh_func_end585:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table585:
.Lexception585:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1144 = .Ltmp4397-.Leh_func_begin585 # >> Call Site 1 <<
	.long	.Lset1144
.Lset1145 = .Ltmp4398-.Ltmp4397         #   Call between .Ltmp4397 and .Ltmp4398
	.long	.Lset1145
.Lset1146 = .Ltmp4399-.Leh_func_begin585 #     jumps to .Ltmp4399
	.long	.Lset1146
	.byte	0                       #   On action: cleanup
.Lset1147 = .Ltmp4398-.Leh_func_begin585 # >> Call Site 2 <<
	.long	.Lset1147
.Lset1148 = .Ltmp4400-.Ltmp4398         #   Call between .Ltmp4398 and .Ltmp4400
	.long	.Lset1148
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1149 = .Ltmp4400-.Leh_func_begin585 # >> Call Site 3 <<
	.long	.Lset1149
.Lset1150 = .Ltmp4401-.Ltmp4400         #   Call between .Ltmp4400 and .Ltmp4401
	.long	.Lset1150
.Lset1151 = .Ltmp4402-.Leh_func_begin585 #     jumps to .Ltmp4402
	.long	.Lset1151
	.byte	1                       #   On action: 1
.Lset1152 = .Ltmp4401-.Leh_func_begin585 # >> Call Site 4 <<
	.long	.Lset1152
.Lset1153 = .Leh_func_end585-.Ltmp4401  #   Call between .Ltmp4401 and .Leh_func_end585
	.long	.Lset1153
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN7sc_core5sc_inIbED2Ev,"axG",@progbits,_ZN7sc_core5sc_inIbED2Ev,comdat
	.weak	_ZN7sc_core5sc_inIbED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIbED2Ev,@function
_ZN7sc_core5sc_inIbED2Ev:               # @_ZN7sc_core5sc_inIbED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin586:
	.cfi_lsda 3, .Lexception586
# BB#0:
	pushq	%rbp
.Ltmp4423:
	.cfi_def_cfa_offset 16
.Ltmp4424:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4425:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core5sc_inIbEE+16, (%rdi)
	movq	%rdi, %rax
.Ltmp4409:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNK7sc_core5sc_inIbE13remove_tracesEv
.Ltmp4410:
	jmp	.LBB586_1
.LBB586_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	je	.LBB586_4
# BB#2:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp4411:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp4412:
	jmp	.LBB586_3
.LBB586_3:
	jmp	.LBB586_4
.LBB586_4:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	144(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	je	.LBB586_7
# BB#5:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp4413:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp4414:
	jmp	.LBB586_6
.LBB586_6:
	jmp	.LBB586_7
.LBB586_7:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	152(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	je	.LBB586_10
# BB#8:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp4415:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp4416:
	jmp	.LBB586_9
.LBB586_9:
	jmp	.LBB586_10
.LBB586_10:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB586_11:
.Ltmp4417:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp4418:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
.Ltmp4419:
	jmp	.LBB586_12
.LBB586_12:
	jmp	.LBB586_13
.LBB586_13:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB586_14:
.Ltmp4420:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4426:
	.size	_ZN7sc_core5sc_inIbED2Ev, .Ltmp4426-_ZN7sc_core5sc_inIbED2Ev
	.cfi_endproc
.Leh_func_end586:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table586:
.Lexception586:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1154 = .Ltmp4409-.Leh_func_begin586 # >> Call Site 1 <<
	.long	.Lset1154
.Lset1155 = .Ltmp4416-.Ltmp4409         #   Call between .Ltmp4409 and .Ltmp4416
	.long	.Lset1155
.Lset1156 = .Ltmp4417-.Leh_func_begin586 #     jumps to .Ltmp4417
	.long	.Lset1156
	.byte	0                       #   On action: cleanup
.Lset1157 = .Ltmp4416-.Leh_func_begin586 # >> Call Site 2 <<
	.long	.Lset1157
.Lset1158 = .Ltmp4418-.Ltmp4416         #   Call between .Ltmp4416 and .Ltmp4418
	.long	.Lset1158
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1159 = .Ltmp4418-.Leh_func_begin586 # >> Call Site 3 <<
	.long	.Lset1159
.Lset1160 = .Ltmp4419-.Ltmp4418         #   Call between .Ltmp4418 and .Ltmp4419
	.long	.Lset1160
.Lset1161 = .Ltmp4420-.Leh_func_begin586 #     jumps to .Ltmp4420
	.long	.Lset1161
	.byte	1                       #   On action: 1
.Lset1162 = .Ltmp4419-.Leh_func_begin586 # >> Call Site 4 <<
	.long	.Lset1162
.Lset1163 = .Leh_func_end586-.Ltmp4419  #   Call between .Ltmp4419 and .Leh_func_end586
	.long	.Lset1163
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4429:
	.cfi_def_cfa_offset 16
.Ltmp4430:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4431:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4432:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp4432-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin588:
	.cfi_lsda 3, .Lexception588
# BB#0:
	pushq	%rbp
.Ltmp4441:
	.cfi_def_cfa_offset 16
.Ltmp4442:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4443:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp4433:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev
.Ltmp4434:
	jmp	.LBB588_1
.LBB588_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB588_2:
.Ltmp4435:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp4436:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp4437:
	jmp	.LBB588_3
.LBB588_3:
	jmp	.LBB588_4
.LBB588_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB588_5:
.Ltmp4438:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4444:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev, .Ltmp4444-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	.cfi_endproc
.Leh_func_end588:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table588:
.Lexception588:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1164 = .Ltmp4433-.Leh_func_begin588 # >> Call Site 1 <<
	.long	.Lset1164
.Lset1165 = .Ltmp4434-.Ltmp4433         #   Call between .Ltmp4433 and .Ltmp4434
	.long	.Lset1165
.Lset1166 = .Ltmp4435-.Leh_func_begin588 #     jumps to .Ltmp4435
	.long	.Lset1166
	.byte	0                       #   On action: cleanup
.Lset1167 = .Ltmp4434-.Leh_func_begin588 # >> Call Site 2 <<
	.long	.Lset1167
.Lset1168 = .Ltmp4436-.Ltmp4434         #   Call between .Ltmp4434 and .Ltmp4436
	.long	.Lset1168
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1169 = .Ltmp4436-.Leh_func_begin588 # >> Call Site 3 <<
	.long	.Lset1169
.Lset1170 = .Ltmp4437-.Ltmp4436         #   Call between .Ltmp4436 and .Ltmp4437
	.long	.Lset1170
.Lset1171 = .Ltmp4438-.Leh_func_begin588 #     jumps to .Ltmp4438
	.long	.Lset1171
	.byte	1                       #   On action: 1
.Lset1172 = .Ltmp4437-.Leh_func_begin588 # >> Call Site 4 <<
	.long	.Lset1172
.Lset1173 = .Leh_func_end588-.Ltmp4437  #   Call between .Ltmp4437 and .Leh_func_end588
	.long	.Lset1173
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4447:
	.cfi_def_cfa_offset 16
.Ltmp4448:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4449:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4450:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev, .Ltmp4450-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4453:
	.cfi_def_cfa_offset 16
.Ltmp4454:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4455:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4456:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev, .Ltmp4456-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin591:
	.cfi_lsda 3, .Lexception591
# BB#0:
	pushq	%rbp
.Ltmp4462:
	.cfi_def_cfa_offset 16
.Ltmp4463:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4464:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp4457:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
.Ltmp4458:
	jmp	.LBB591_1
.LBB591_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB591_2:
.Ltmp4459:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp4465:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev, .Ltmp4465-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev
	.cfi_endproc
.Leh_func_end591:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table591:
.Lexception591:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1174 = .Ltmp4457-.Leh_func_begin591 # >> Call Site 1 <<
	.long	.Lset1174
.Lset1175 = .Ltmp4458-.Ltmp4457         #   Call between .Ltmp4457 and .Ltmp4458
	.long	.Lset1175
.Lset1176 = .Ltmp4459-.Leh_func_begin591 #     jumps to .Ltmp4459
	.long	.Lset1176
	.byte	0                       #   On action: cleanup
.Lset1177 = .Ltmp4458-.Leh_func_begin591 # >> Call Site 2 <<
	.long	.Lset1177
.Lset1178 = .Leh_func_end591-.Ltmp4458  #   Call between .Ltmp4458 and .Leh_func_end591
	.long	.Lset1178
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB592_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB592_3
.LBB592_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB592_3
.LBB592_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp4466:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv, .Ltmp4466-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB593_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB593_3
.LBB593_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB593_3
.LBB593_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp4467:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv, .Ltmp4467-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4470:
	.cfi_def_cfa_offset 16
.Ltmp4471:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4472:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB594_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB594_3
.LBB594_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB594_3
.LBB594_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB594_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB594_6
.LBB594_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB594_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp4473:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE, .Ltmp4473-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4476:
	.cfi_def_cfa_offset 16
.Ltmp4477:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4478:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB595_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB595_3
.LBB595_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB595_3
.LBB595_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB595_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB595_6
.LBB595_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB595_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp4479:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE, .Ltmp4479-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4482:
	.cfi_def_cfa_offset 16
.Ltmp4483:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4484:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB596_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB596_3
.LBB596_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB596_3
.LBB596_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB596_5
# BB#4:
	jmp	.LBB596_6
.LBB596_5:
	leaq	.L.str25, %rdi
	leaq	.L.str24, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB596_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB596_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB596_12
# BB#8:                                 #   in Loop: Header=BB596_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB596_10
# BB#9:                                 #   in Loop: Header=BB596_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str26, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB596_10:                             #   in Loop: Header=BB596_7 Depth=1
	jmp	.LBB596_11
.LBB596_11:                             #   in Loop: Header=BB596_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB596_7
.LBB596_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp4485:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp4485-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4488:
	.cfi_def_cfa_offset 16
.Ltmp4489:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4490:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4491:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv, .Ltmp4491-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4494:
	.cfi_def_cfa_offset 16
.Ltmp4495:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4496:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4497:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv, .Ltmp4497-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4500:
	.cfi_def_cfa_offset 16
.Ltmp4501:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4502:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB599_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB599_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB599_8
# BB#3:                                 #   in Loop: Header=BB599_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB599_5
# BB#4:                                 #   in Loop: Header=BB599_2 Depth=1
	jmp	.LBB599_6
.LBB599_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB599_6:                              #   in Loop: Header=BB599_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB599_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB599_2
.LBB599_8:
	jmp	.LBB599_10
.LBB599_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB599_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp4503:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp4503-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4506:
	.cfi_def_cfa_offset 16
.Ltmp4507:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4508:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB600_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB600_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB600_8
# BB#3:                                 #   in Loop: Header=BB600_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB600_5
# BB#4:                                 #   in Loop: Header=BB600_2 Depth=1
	jmp	.LBB600_6
.LBB600_5:
	leaq	.L.str23, %rdi
	leaq	.L.str24, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB600_6:                              #   in Loop: Header=BB600_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB600_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB600_2
.LBB600_8:
	jmp	.LBB600_10
.LBB600_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB600_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp4509:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp4509-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4512:
	.cfi_def_cfa_offset 16
.Ltmp4513:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4514:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4515:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_, .Ltmp4515-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4518:
	.cfi_def_cfa_offset 16
.Ltmp4519:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4520:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4521:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_, .Ltmp4521-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp4522:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv, .Ltmp4522-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp4523:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm, .Ltmp4523-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp4524:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm, .Ltmp4524-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4527:
	.cfi_def_cfa_offset 16
.Ltmp4528:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4529:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB606_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB606_3
.LBB606_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
.LBB606_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp4530:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_, .Ltmp4530-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB607_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB607_2:
	ret
.Ltmp4531:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_, .Ltmp4531-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin608:
	.cfi_lsda 3, .Lexception608
# BB#0:
	pushq	%rbp
.Ltmp4563:
	.cfi_def_cfa_offset 16
.Ltmp4564:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4565:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB608_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB608_22
.LBB608_2:
	movl	$1, %esi
	movl	$.L.str27, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp4532:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
.Ltmp4533:
	jmp	.LBB608_3
.LBB608_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp4534:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
.Ltmp4535:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB608_4
.LBB608_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp4536:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp4537:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB608_5
.LBB608_5:
.Ltmp4538:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
.Ltmp4539:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB608_6
.LBB608_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp4540:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
.Ltmp4541:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB608_7
.LBB608_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp4542:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp4543:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB608_8
.LBB608_8:
.Ltmp4544:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
.Ltmp4545:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB608_9
.LBB608_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB608_21
.LBB608_10:
.Ltmp4546:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB608_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp4547:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_
.Ltmp4548:
	jmp	.LBB608_13
.LBB608_13:
	jmp	.LBB608_18
.LBB608_14:
.Ltmp4557:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp4558:
	callq	__cxa_end_catch
.Ltmp4559:
	jmp	.LBB608_20
.LBB608_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp4549:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp4550:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB608_16
.LBB608_16:
.Ltmp4551:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
.Ltmp4552:
	jmp	.LBB608_17
.LBB608_17:
	jmp	.LBB608_18
.LBB608_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp4553:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
.Ltmp4554:
	jmp	.LBB608_19
.LBB608_19:
.Ltmp4555:
	callq	__cxa_rethrow
.Ltmp4556:
	jmp	.LBB608_25
.LBB608_20:
	jmp	.LBB608_23
.LBB608_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB608_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB608_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB608_24:
.Ltmp4560:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB608_25:
.Ltmp4566:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_, .Ltmp4566-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.cfi_endproc
.Leh_func_end608:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table608:
.Lexception608:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset1179 = .Leh_func_begin608-.Leh_func_begin608 # >> Call Site 1 <<
	.long	.Lset1179
.Lset1180 = .Ltmp4532-.Leh_func_begin608 #   Call between .Leh_func_begin608 and .Ltmp4532
	.long	.Lset1180
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1181 = .Ltmp4532-.Leh_func_begin608 # >> Call Site 2 <<
	.long	.Lset1181
.Lset1182 = .Ltmp4545-.Ltmp4532         #   Call between .Ltmp4532 and .Ltmp4545
	.long	.Lset1182
.Lset1183 = .Ltmp4546-.Leh_func_begin608 #     jumps to .Ltmp4546
	.long	.Lset1183
	.byte	1                       #   On action: 1
.Lset1184 = .Ltmp4545-.Leh_func_begin608 # >> Call Site 3 <<
	.long	.Lset1184
.Lset1185 = .Ltmp4547-.Ltmp4545         #   Call between .Ltmp4545 and .Ltmp4547
	.long	.Lset1185
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1186 = .Ltmp4547-.Leh_func_begin608 # >> Call Site 4 <<
	.long	.Lset1186
.Lset1187 = .Ltmp4548-.Ltmp4547         #   Call between .Ltmp4547 and .Ltmp4548
	.long	.Lset1187
.Lset1188 = .Ltmp4557-.Leh_func_begin608 #     jumps to .Ltmp4557
	.long	.Lset1188
	.byte	0                       #   On action: cleanup
.Lset1189 = .Ltmp4558-.Leh_func_begin608 # >> Call Site 5 <<
	.long	.Lset1189
.Lset1190 = .Ltmp4559-.Ltmp4558         #   Call between .Ltmp4558 and .Ltmp4559
	.long	.Lset1190
.Lset1191 = .Ltmp4560-.Leh_func_begin608 #     jumps to .Ltmp4560
	.long	.Lset1191
	.byte	1                       #   On action: 1
.Lset1192 = .Ltmp4549-.Leh_func_begin608 # >> Call Site 6 <<
	.long	.Lset1192
.Lset1193 = .Ltmp4556-.Ltmp4549         #   Call between .Ltmp4549 and .Ltmp4556
	.long	.Lset1193
.Lset1194 = .Ltmp4557-.Leh_func_begin608 #     jumps to .Ltmp4557
	.long	.Lset1194
	.byte	0                       #   On action: cleanup
.Lset1195 = .Ltmp4556-.Leh_func_begin608 # >> Call Site 7 <<
	.long	.Lset1195
.Lset1196 = .Leh_func_end608-.Ltmp4556  #   Call between .Ltmp4556 and .Leh_func_end608
	.long	.Lset1196
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4569:
	.cfi_def_cfa_offset 16
.Ltmp4570:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4571:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4572:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv, .Ltmp4572-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4575:
	.cfi_def_cfa_offset 16
.Ltmp4576:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4577:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4578:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_, .Ltmp4578-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp4579:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_, .Ltmp4579-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_: # @_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4582:
	.cfi_def_cfa_offset 16
.Ltmp4583:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4584:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4585:
	.size	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_, .Ltmp4585-_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp4586:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv, .Ltmp4586-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp4587:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv, .Ltmp4587-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4590:
	.cfi_def_cfa_offset 16
.Ltmp4591:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4592:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB615_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB615_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB615_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB615_5
.LBB615_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB615_6
.LBB615_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB615_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp4593:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc, .Ltmp4593-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,@function
_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_: # @_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4596:
	.cfi_def_cfa_offset 16
.Ltmp4597:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4598:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4599:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_, .Ltmp4599-_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4602:
	.cfi_def_cfa_offset 16
.Ltmp4603:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4604:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4605:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv, .Ltmp4605-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4608:
	.cfi_def_cfa_offset 16
.Ltmp4609:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4610:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB618_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB618_3
.LBB618_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB618_3
.LBB618_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4611:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm, .Ltmp4611-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4614:
	.cfi_def_cfa_offset 16
.Ltmp4615:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4616:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4617:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_, .Ltmp4617-_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp4618:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv, .Ltmp4618-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp4619:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_, .Ltmp4619-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4622:
	.cfi_def_cfa_offset 16
.Ltmp4623:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4624:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4625:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E, .Ltmp4625-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4628:
	.cfi_def_cfa_offset 16
.Ltmp4629:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4630:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB623_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m
.LBB623_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4631:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m, .Ltmp4631-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4634:
	.cfi_def_cfa_offset 16
.Ltmp4635:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4636:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4637:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m, .Ltmp4637-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4640:
	.cfi_def_cfa_offset 16
.Ltmp4641:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4642:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4643:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_, .Ltmp4643-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp4644:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_, .Ltmp4644-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4647:
	.cfi_def_cfa_offset 16
.Ltmp4648:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4649:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4650:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E, .Ltmp4650-_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_: # @_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4653:
	.cfi_def_cfa_offset 16
.Ltmp4654:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4655:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4656:
	.size	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_, .Ltmp4656-_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4659:
	.cfi_def_cfa_offset 16
.Ltmp4660:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4661:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4662:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_, .Ltmp4662-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_: # @_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4665:
	.cfi_def_cfa_offset 16
.Ltmp4666:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4667:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4668:
	.size	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_, .Ltmp4668-_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4671:
	.cfi_def_cfa_offset 16
.Ltmp4672:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4673:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp4674:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_, .Ltmp4674-_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,@function
_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_: # @_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4677:
	.cfi_def_cfa_offset 16
.Ltmp4678:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4679:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4680:
	.size	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_, .Ltmp4680-_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_,@function
_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_: # @_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp4681:
	.size	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_, .Ltmp4681-_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4684:
	.cfi_def_cfa_offset 16
.Ltmp4685:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4686:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4687:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_, .Ltmp4687-_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,@function
_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_: # @_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4690:
	.cfi_def_cfa_offset 16
.Ltmp4691:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4692:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4693:
	.size	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_, .Ltmp4693-_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4696:
	.cfi_def_cfa_offset 16
.Ltmp4697:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4698:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB636_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB636_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4699:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_, .Ltmp4699-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4702:
	.cfi_def_cfa_offset 16
.Ltmp4703:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4704:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB637_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB637_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4705:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv, .Ltmp4705-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4706:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv, .Ltmp4706-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4709:
	.cfi_def_cfa_offset 16
.Ltmp4710:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4711:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4712:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv, .Ltmp4712-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp4713:
	.size	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv, .Ltmp4713-_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4716:
	.cfi_def_cfa_offset 16
.Ltmp4717:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4718:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp4719:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_, .Ltmp4719-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4722:
	.cfi_def_cfa_offset 16
.Ltmp4723:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4724:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4725:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_, .Ltmp4725-_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4728:
	.cfi_def_cfa_offset 16
.Ltmp4729:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4730:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB643_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB643_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4731:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_, .Ltmp4731-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin644:
	.cfi_lsda 3, .Lexception644
# BB#0:
	pushq	%rbp
.Ltmp4742:
	.cfi_def_cfa_offset 16
.Ltmp4743:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4744:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp4732:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp4733:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB644_1
.LBB644_1:
.Ltmp4734:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
.Ltmp4735:
	jmp	.LBB644_2
.LBB644_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB644_3:
.Ltmp4736:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp4737:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
.Ltmp4738:
	jmp	.LBB644_4
.LBB644_4:
	jmp	.LBB644_5
.LBB644_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB644_6:
.Ltmp4739:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4745:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev, .Ltmp4745-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.cfi_endproc
.Leh_func_end644:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table644:
.Lexception644:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1197 = .Ltmp4732-.Leh_func_begin644 # >> Call Site 1 <<
	.long	.Lset1197
.Lset1198 = .Ltmp4735-.Ltmp4732         #   Call between .Ltmp4732 and .Ltmp4735
	.long	.Lset1198
.Lset1199 = .Ltmp4736-.Leh_func_begin644 #     jumps to .Ltmp4736
	.long	.Lset1199
	.byte	0                       #   On action: cleanup
.Lset1200 = .Ltmp4735-.Leh_func_begin644 # >> Call Site 2 <<
	.long	.Lset1200
.Lset1201 = .Ltmp4737-.Ltmp4735         #   Call between .Ltmp4735 and .Ltmp4737
	.long	.Lset1201
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1202 = .Ltmp4737-.Leh_func_begin644 # >> Call Site 3 <<
	.long	.Lset1202
.Lset1203 = .Ltmp4738-.Ltmp4737         #   Call between .Ltmp4737 and .Ltmp4738
	.long	.Lset1203
.Lset1204 = .Ltmp4739-.Leh_func_begin644 #     jumps to .Ltmp4739
	.long	.Lset1204
	.byte	1                       #   On action: 1
.Lset1205 = .Ltmp4738-.Leh_func_begin644 # >> Call Site 4 <<
	.long	.Lset1205
.Lset1206 = .Leh_func_end644-.Ltmp4738  #   Call between .Ltmp4738 and .Leh_func_end644
	.long	.Lset1206
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin645:
	.cfi_lsda 3, .Lexception645
# BB#0:
	pushq	%rbp
.Ltmp4751:
	.cfi_def_cfa_offset 16
.Ltmp4752:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4753:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp4746:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
.Ltmp4747:
	jmp	.LBB645_1
.LBB645_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB645_2:
.Ltmp4748:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp4754:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev, .Ltmp4754-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.cfi_endproc
.Leh_func_end645:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table645:
.Lexception645:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1207 = .Ltmp4746-.Leh_func_begin645 # >> Call Site 1 <<
	.long	.Lset1207
.Lset1208 = .Ltmp4747-.Ltmp4746         #   Call between .Ltmp4746 and .Ltmp4747
	.long	.Lset1208
.Lset1209 = .Ltmp4748-.Leh_func_begin645 #     jumps to .Ltmp4748
	.long	.Lset1209
	.byte	0                       #   On action: cleanup
.Lset1210 = .Ltmp4747-.Leh_func_begin645 # >> Call Site 2 <<
	.long	.Lset1210
.Lset1211 = .Leh_func_end645-.Ltmp4747  #   Call between .Ltmp4747 and .Leh_func_end645
	.long	.Lset1211
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4757:
	.cfi_def_cfa_offset 16
.Ltmp4758:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4759:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4760:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev, .Ltmp4760-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4763:
	.cfi_def_cfa_offset 16
.Ltmp4764:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4765:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4766:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev, .Ltmp4766-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4769:
	.cfi_def_cfa_offset 16
.Ltmp4770:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4771:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4772:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev, .Ltmp4772-_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4773:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev, .Ltmp4773-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev,"axG",@progbits,_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev,comdat
	.weak	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev,@function
_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev: # @_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4776:
	.cfi_def_cfa_offset 16
.Ltmp4777:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4778:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt6sc_fixD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4779:
	.size	_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev, .Ltmp4779-_ZN5sc_dt8sc_fixedILi21ELi5ELNS_9sc_q_modeE4ELNS_9sc_o_modeE2ELi0EED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EED2Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EED2Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EED2Ev,@function
_ZN5sc_dt7sc_uintILi1EED2Ev:            # @_ZN5sc_dt7sc_uintILi1EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4782:
	.cfi_def_cfa_offset 16
.Ltmp4783:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4784:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4785:
	.size	_ZN5sc_dt7sc_uintILi1EED2Ev, .Ltmp4785-_ZN5sc_dt7sc_uintILi1EED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi3EED2Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EED2Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EED2Ev,@function
_ZN5sc_dt7sc_uintILi3EED2Ev:            # @_ZN5sc_dt7sc_uintILi3EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4788:
	.cfi_def_cfa_offset 16
.Ltmp4789:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4790:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4791:
	.size	_ZN5sc_dt7sc_uintILi3EED2Ev, .Ltmp4791-_ZN5sc_dt7sc_uintILi3EED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_process_handleD2Ev,"axG",@progbits,_ZN7sc_core17sc_process_handleD2Ev,comdat
	.weak	_ZN7sc_core17sc_process_handleD2Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_process_handleD2Ev,@function
_ZN7sc_core17sc_process_handleD2Ev:     # @_ZN7sc_core17sc_process_handleD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4794:
	.cfi_def_cfa_offset 16
.Ltmp4795:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4796:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, (%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	je	.LBB653_2
# BB#1:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	callq	_ZN7sc_core12sc_process_b19reference_decrementEv
.LBB653_2:
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4797:
	.size	_ZN7sc_core17sc_process_handleD2Ev, .Ltmp4797-_ZN7sc_core17sc_process_handleD2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core12sc_process_b19reference_decrementEv,"axG",@progbits,_ZN7sc_core12sc_process_b19reference_decrementEv,comdat
	.weak	_ZN7sc_core12sc_process_b19reference_decrementEv
	.align	16, 0x90
	.type	_ZN7sc_core12sc_process_b19reference_decrementEv,@function
_ZN7sc_core12sc_process_b19reference_decrementEv: # @_ZN7sc_core12sc_process_b19reference_decrementEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4800:
	.cfi_def_cfa_offset 16
.Ltmp4801:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4802:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	180(%rdi), %eax
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, 180(%rdi)
	cmpl	$0, 180(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB654_2
# BB#1:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_process_b14delete_processEv
.LBB654_2:
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4803:
	.size	_ZN7sc_core12sc_process_b19reference_decrementEv, .Ltmp4803-_ZN7sc_core12sc_process_b19reference_decrementEv
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4806:
	.cfi_def_cfa_offset 16
.Ltmp4807:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4808:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-32(%rbp), %rdx
	movq	%rcx, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-8(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rcx
	callq	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp4809:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE, .Ltmp4809-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4812:
	.cfi_def_cfa_offset 16
.Ltmp4813:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4814:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-32(%rbp), %rdx
	movq	%rcx, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core15sc_event_finderC2ERKNS_12sc_port_baseE
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	$_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE+16, (%rcx)
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	%rsi, 24(%rcx)
	movq	%rdx, 16(%rcx)
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp4815:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE, .Ltmp4815-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4818:
	.cfi_def_cfa_offset 16
.Ltmp4819:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4820:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4821:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev, .Ltmp4821-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin658:
	.cfi_lsda 3, .Lexception658
# BB#0:
	pushq	%rbp
.Ltmp4827:
	.cfi_def_cfa_offset 16
.Ltmp4828:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4829:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp4822:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
.Ltmp4823:
	jmp	.LBB658_1
.LBB658_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB658_2:
.Ltmp4824:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp4830:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev, .Ltmp4830-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev
	.cfi_endproc
.Leh_func_end658:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table658:
.Lexception658:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1212 = .Ltmp4822-.Leh_func_begin658 # >> Call Site 1 <<
	.long	.Lset1212
.Lset1213 = .Ltmp4823-.Ltmp4822         #   Call between .Ltmp4822 and .Ltmp4823
	.long	.Lset1213
.Lset1214 = .Ltmp4824-.Leh_func_begin658 #     jumps to .Ltmp4824
	.long	.Lset1214
	.byte	0                       #   On action: cleanup
.Lset1215 = .Ltmp4823-.Leh_func_begin658 # >> Call Site 2 <<
	.long	.Lset1215
.Lset1216 = .Leh_func_end658-.Ltmp4823  #   Call between .Ltmp4823 and .Leh_func_end658
	.long	.Lset1216
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE,"axG",@progbits,_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE,comdat
	.weak	_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE,@function
_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE: # @_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4833:
	.cfi_def_cfa_offset 16
.Ltmp4834:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4835:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB659_5
# BB#1:
	movq	-16(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	je	.LBB659_3
# BB#2:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-48(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB659_4
.LBB659_3:
	movabsq	$0, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB659_4
.LBB659_4:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB659_9
.LBB659_5:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core15sc_event_finder4portEv
	movq	(%rax), %rdi
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-72(%rbp), %rax         # 8-byte Reload
	callq	*120(%rax)
	cmpq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	je	.LBB659_7
# BB#6:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-88(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB659_8
.LBB659_7:
	movabsq	$0, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB659_8
.LBB659_8:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB659_9:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB659_11
# BB#10:
	leaq	_ZN7sc_core17SC_ID_FIND_EVENT_E, %rsi
	leaq	.L.str18, %rdx
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core15sc_event_finder12report_errorEPKcS2_
.LBB659_11:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	16(%rax), %rcx
	movq	24(%rax), %rdx
	movq	-24(%rbp), %rsi
	addq	%rdx, %rsi
	movq	%rcx, %rdx
	andq	$1, %rdx
	cmpq	$0, %rdx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%rsi, -112(%rbp)        # 8-byte Spill
	je	.LBB659_13
# BB#12:
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	-104(%rbp), %rdx        # 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	jmp	.LBB659_14
.LBB659_13:
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB659_14:
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-112(%rbp), %rdi        # 8-byte Reload
	callq	*%rax
	addq	$128, %rsp
	popq	%rbp
	ret
.Ltmp4836:
	.size	_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE, .Ltmp4836-_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZNK7sc_core15sc_event_finder4portEv,"axG",@progbits,_ZNK7sc_core15sc_event_finder4portEv,comdat
	.weak	_ZNK7sc_core15sc_event_finder4portEv
	.align	16, 0x90
	.type	_ZNK7sc_core15sc_event_finder4portEv,@function
_ZNK7sc_core15sc_event_finder4portEv:   # @_ZNK7sc_core15sc_event_finder4portEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp4837:
	.size	_ZNK7sc_core15sc_event_finder4portEv, .Ltmp4837-_ZNK7sc_core15sc_event_finder4portEv
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4840:
	.cfi_def_cfa_offset 16
.Ltmp4841:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4842:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core15sc_event_finderD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4843:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev, .Ltmp4843-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIbEC2Ev,"axG",@progbits,_ZN7sc_core5sc_inIbEC2Ev,comdat
	.weak	_ZN7sc_core5sc_inIbEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIbEC2Ev,@function
_ZN7sc_core5sc_inIbEC2Ev:               # @_ZN7sc_core5sc_inIbEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4846:
	.cfi_def_cfa_offset 16
.Ltmp4847:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4848:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core5sc_inIbEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	movq	$0, 144(%rdi)
	movq	$0, 152(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4849:
	.size	_ZN7sc_core5sc_inIbEC2Ev, .Ltmp4849-_ZN7sc_core5sc_inIbEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4852:
	.cfi_def_cfa_offset 16
.Ltmp4853:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4854:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp4855:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp4855-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin664:
	.cfi_lsda 3, .Lexception664
# BB#0:
	pushq	%rbp
.Ltmp4864:
	.cfi_def_cfa_offset 16
.Ltmp4865:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4866:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp4856:
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev
.Ltmp4857:
	jmp	.LBB664_1
.LBB664_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB664_2:
.Ltmp4858:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp4859:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp4860:
	jmp	.LBB664_3
.LBB664_3:
	jmp	.LBB664_4
.LBB664_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB664_5:
.Ltmp4861:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp4867:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE, .Ltmp4867-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end664:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table664:
.Lexception664:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset1217 = .Leh_func_begin664-.Leh_func_begin664 # >> Call Site 1 <<
	.long	.Lset1217
.Lset1218 = .Ltmp4856-.Leh_func_begin664 #   Call between .Leh_func_begin664 and .Ltmp4856
	.long	.Lset1218
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset1219 = .Ltmp4856-.Leh_func_begin664 # >> Call Site 2 <<
	.long	.Lset1219
.Lset1220 = .Ltmp4857-.Ltmp4856         #   Call between .Ltmp4856 and .Ltmp4857
	.long	.Lset1220
.Lset1221 = .Ltmp4858-.Leh_func_begin664 #     jumps to .Ltmp4858
	.long	.Lset1221
	.byte	0                       #   On action: cleanup
.Lset1222 = .Ltmp4859-.Leh_func_begin664 # >> Call Site 3 <<
	.long	.Lset1222
.Lset1223 = .Ltmp4860-.Ltmp4859         #   Call between .Ltmp4859 and .Ltmp4860
	.long	.Lset1223
.Lset1224 = .Ltmp4861-.Leh_func_begin664 #     jumps to .Ltmp4861
	.long	.Lset1224
	.byte	1                       #   On action: 1
.Lset1225 = .Ltmp4860-.Leh_func_begin664 # >> Call Site 4 <<
	.long	.Lset1225
.Lset1226 = .Leh_func_end664-.Ltmp4860  #   Call between .Ltmp4860 and .Leh_func_end664
	.long	.Lset1226
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str32, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4868:
	.size	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp4868-_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4871:
	.cfi_def_cfa_offset 16
.Ltmp4872:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4873:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4874:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp4874-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin667:
	.cfi_lsda 3, .Lexception667
# BB#0:
	pushq	%rbp
.Ltmp4880:
	.cfi_def_cfa_offset 16
.Ltmp4881:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4882:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp4875:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp4876:
	jmp	.LBB667_1
.LBB667_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB667_2:
.Ltmp4877:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp4883:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp4883-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end667:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table667:
.Lexception667:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset1227 = .Ltmp4875-.Leh_func_begin667 # >> Call Site 1 <<
	.long	.Lset1227
.Lset1228 = .Ltmp4876-.Ltmp4875         #   Call between .Ltmp4875 and .Ltmp4876
	.long	.Lset1228
.Lset1229 = .Ltmp4877-.Leh_func_begin667 #     jumps to .Ltmp4877
	.long	.Lset1229
	.byte	0                       #   On action: cleanup
.Lset1230 = .Ltmp4876-.Leh_func_begin667 # >> Call Site 2 <<
	.long	.Lset1230
.Lset1231 = .Leh_func_end667-.Ltmp4876  #   Call between .Ltmp4876 and .Leh_func_end667
	.long	.Lset1231
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4886:
	.cfi_def_cfa_offset 16
.Ltmp4887:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4888:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4889:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev, .Ltmp4889-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4892:
	.cfi_def_cfa_offset 16
.Ltmp4893:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4894:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4895:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev, .Ltmp4895-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4898:
	.cfi_def_cfa_offset 16
.Ltmp4899:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4900:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4901:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev, .Ltmp4901-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4904:
	.cfi_def_cfa_offset 16
.Ltmp4905:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4906:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4907:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev, .Ltmp4907-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4910:
	.cfi_def_cfa_offset 16
.Ltmp4911:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4912:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4913:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev, .Ltmp4913-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4916:
	.cfi_def_cfa_offset 16
.Ltmp4917:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4918:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp4919:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev, .Ltmp4919-_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp4920:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev, .Ltmp4920-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	_GLOBAL__I_a,@function
_GLOBAL__I_a:                           # @_GLOBAL__I_a
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp4923:
	.cfi_def_cfa_offset 16
.Ltmp4924:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4925:
	.cfi_def_cfa_register %rbp
	callq	__cxx_global_var_init
	callq	__cxx_global_var_init1
	popq	%rbp
	ret
.Ltmp4926:
	.size	_GLOBAL__I_a, .Ltmp4926-_GLOBAL__I_a
	.cfi_endproc

	.type	_ZStL8__ioinit,@object  # @_ZStL8__ioinit
	.local	_ZStL8__ioinit
	.comm	_ZStL8__ioinit,1,1
	.type	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE,@object # @_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE
	.section	.rodata,"a",@progbits
_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE:
	.byte	1                       # 0x1
	.size	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE, 1

	.type	_ZN7sc_coreL17api_version_checkE,@object # @_ZN7sc_coreL17api_version_checkE
	.local	_ZN7sc_coreL17api_version_checkE
	.comm	_ZN7sc_coreL17api_version_checkE,1,1
	.type	_ZTV7WBSlave,@object    # @_ZTV7WBSlave
	.section	.rodata._ZTV7WBSlave,"aG",@progbits,_ZTV7WBSlave,comdat
	.weak	_ZTV7WBSlave
	.align	16
_ZTV7WBSlave:
	.quad	0
	.quad	_ZTI7WBSlave
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core9sc_module4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_module17get_child_objectsEv
	.quad	_ZN7WBSlaveD1Ev
	.quad	_ZN7WBSlaveD0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_module25before_end_of_elaborationEv
	.quad	_ZN7sc_core9sc_module18end_of_elaborationEv
	.quad	_ZN7sc_core9sc_module19start_of_simulationEv
	.quad	_ZN7sc_core9sc_module17end_of_simulationEv
	.quad	-88
	.quad	_ZTI7WBSlave
	.quad	_ZThn88_N7WBSlaveD1Ev
	.quad	_ZThn88_N7WBSlaveD0Ev
	.size	_ZTV7WBSlave, 192

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	 "000"
	.size	.L.str, 4

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	 "001"
	.size	.L.str2, 4

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	 "010"
	.size	.L.str3, 4

	.type	.L.str4,@object         # @.str4
.L.str4:
	.asciz	 "011"
	.size	.L.str4, 4

	.type	.L.str5,@object         # @.str5
.L.str5:
	.asciz	 "100"
	.size	.L.str5, 4

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	 "101"
	.size	.L.str6, 4

	.type	.L.str7,@object         # @.str7
.L.str7:
	.asciz	 "110"
	.size	.L.str7, 4

	.type	.L.str8,@object         # @.str8
.L.str8:
	.asciz	 "111"
	.size	.L.str8, 4

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	 "processBus"
	.size	.L.str9, 11

	.type	.L.str10,@object        # @.str10
.L.str10:
	.asciz	 "processSlave"
	.size	.L.str10, 13

	.type	.L.str11,@object        # @.str11
.L.str11:
	.asciz	 "getLog"
	.size	.L.str11, 7

	.type	_ZZN7WBSlave6getLogEvE9offsetLUT,@object # @_ZZN7WBSlave6getLogEvE9offsetLUT
	.local	_ZZN7WBSlave6getLogEvE9offsetLUT
	.comm	_ZZN7WBSlave6getLogEvE9offsetLUT,1440,16
	.type	_ZGVZN7WBSlave6getLogEvE9offsetLUT,@object # @_ZGVZN7WBSlave6getLogEvE9offsetLUT
	.local	_ZGVZN7WBSlave6getLogEvE9offsetLUT
	.comm	_ZGVZN7WBSlave6getLogEvE9offsetLUT,8,8
	.type	_ZZN7WBSlave6getLogEvE11gradientLUT,@object # @_ZZN7WBSlave6getLogEvE11gradientLUT
	.local	_ZZN7WBSlave6getLogEvE11gradientLUT
	.comm	_ZZN7WBSlave6getLogEvE11gradientLUT,1440,16
	.type	_ZGVZN7WBSlave6getLogEvE11gradientLUT,@object # @_ZGVZN7WBSlave6getLogEvE11gradientLUT
	.local	_ZGVZN7WBSlave6getLogEvE11gradientLUT
	.comm	_ZGVZN7WBSlave6getLogEvE11gradientLUT,8,8
	.type	_ZZN7WBSlave6getLogEvE6logLUT,@object # @_ZZN7WBSlave6getLogEvE6logLUT
	.local	_ZZN7WBSlave6getLogEvE6logLUT
	.comm	_ZZN7WBSlave6getLogEvE6logLUT,1440,16
	.type	_ZGVZN7WBSlave6getLogEvE6logLUT,@object # @_ZGVZN7WBSlave6getLogEvE6logLUT
	.local	_ZGVZN7WBSlave6getLogEvE6logLUT
	.comm	_ZGVZN7WBSlave6getLogEvE6logLUT,8,8
	.type	_ZZN7WBSlave6getLogEvE8inputLUT,@object # @_ZZN7WBSlave6getLogEvE8inputLUT
	.local	_ZZN7WBSlave6getLogEvE8inputLUT
	.comm	_ZZN7WBSlave6getLogEvE8inputLUT,1440,16
	.type	_ZGVZN7WBSlave6getLogEvE8inputLUT,@object # @_ZGVZN7WBSlave6getLogEvE8inputLUT
	.local	_ZGVZN7WBSlave6getLogEvE8inputLUT
	.comm	_ZGVZN7WBSlave6getLogEvE8inputLUT,8,8
	.type	.L.str15,@object        # @.str15
.L.str15:
	.asciz	 "Threshold is found to be "
	.size	.L.str15, 26

	.type	.L.str16,@object        # @.str16
.L.str16:
	.asciz	 "\n"
	.size	.L.str16, 2

	.type	_ZTVN5sc_dt17sc_fxval_observerE,@object # @_ZTVN5sc_dt17sc_fxval_observerE
	.section	.rodata._ZTVN5sc_dt17sc_fxval_observerE,"aG",@progbits,_ZTVN5sc_dt17sc_fxval_observerE,comdat
	.weak	_ZTVN5sc_dt17sc_fxval_observerE
	.align	16
_ZTVN5sc_dt17sc_fxval_observerE:
	.quad	0
	.quad	_ZTIN5sc_dt17sc_fxval_observerE
	.quad	_ZN5sc_dt17sc_fxval_observerD1Ev
	.quad	_ZN5sc_dt17sc_fxval_observerD0Ev
	.quad	_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE
	.quad	_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE
	.quad	_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE
	.quad	_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE
	.size	_ZTVN5sc_dt17sc_fxval_observerE, 64

	.type	_ZTSN5sc_dt17sc_fxval_observerE,@object # @_ZTSN5sc_dt17sc_fxval_observerE
	.section	.rodata._ZTSN5sc_dt17sc_fxval_observerE,"aG",@progbits,_ZTSN5sc_dt17sc_fxval_observerE,comdat
	.weak	_ZTSN5sc_dt17sc_fxval_observerE
	.align	16
_ZTSN5sc_dt17sc_fxval_observerE:
	.asciz	 "N5sc_dt17sc_fxval_observerE"
	.size	_ZTSN5sc_dt17sc_fxval_observerE, 28

	.type	_ZTIN5sc_dt17sc_fxval_observerE,@object # @_ZTIN5sc_dt17sc_fxval_observerE
	.section	.rodata._ZTIN5sc_dt17sc_fxval_observerE,"aG",@progbits,_ZTIN5sc_dt17sc_fxval_observerE,comdat
	.weak	_ZTIN5sc_dt17sc_fxval_observerE
	.align	8
_ZTIN5sc_dt17sc_fxval_observerE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN5sc_dt17sc_fxval_observerE
	.size	_ZTIN5sc_dt17sc_fxval_observerE, 16

	.type	_ZTVN5sc_dt22sc_fxval_fast_observerE,@object # @_ZTVN5sc_dt22sc_fxval_fast_observerE
	.section	.rodata._ZTVN5sc_dt22sc_fxval_fast_observerE,"aG",@progbits,_ZTVN5sc_dt22sc_fxval_fast_observerE,comdat
	.weak	_ZTVN5sc_dt22sc_fxval_fast_observerE
	.align	16
_ZTVN5sc_dt22sc_fxval_fast_observerE:
	.quad	0
	.quad	_ZTIN5sc_dt22sc_fxval_fast_observerE
	.quad	_ZN5sc_dt22sc_fxval_fast_observerD1Ev
	.quad	_ZN5sc_dt22sc_fxval_fast_observerD0Ev
	.quad	_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE
	.quad	_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE
	.quad	_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE
	.quad	_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE
	.size	_ZTVN5sc_dt22sc_fxval_fast_observerE, 64

	.type	_ZTSN5sc_dt22sc_fxval_fast_observerE,@object # @_ZTSN5sc_dt22sc_fxval_fast_observerE
	.section	.rodata._ZTSN5sc_dt22sc_fxval_fast_observerE,"aG",@progbits,_ZTSN5sc_dt22sc_fxval_fast_observerE,comdat
	.weak	_ZTSN5sc_dt22sc_fxval_fast_observerE
	.align	16
_ZTSN5sc_dt22sc_fxval_fast_observerE:
	.asciz	 "N5sc_dt22sc_fxval_fast_observerE"
	.size	_ZTSN5sc_dt22sc_fxval_fast_observerE, 33

	.type	_ZTIN5sc_dt22sc_fxval_fast_observerE,@object # @_ZTIN5sc_dt22sc_fxval_fast_observerE
	.section	.rodata._ZTIN5sc_dt22sc_fxval_fast_observerE,"aG",@progbits,_ZTIN5sc_dt22sc_fxval_fast_observerE,comdat
	.weak	_ZTIN5sc_dt22sc_fxval_fast_observerE
	.align	8
_ZTIN5sc_dt22sc_fxval_fast_observerE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN5sc_dt22sc_fxval_fast_observerE
	.size	_ZTIN5sc_dt22sc_fxval_fast_observerE, 16

	.type	_ZTVN5sc_dt17sc_fxnum_observerE,@object # @_ZTVN5sc_dt17sc_fxnum_observerE
	.section	.rodata._ZTVN5sc_dt17sc_fxnum_observerE,"aG",@progbits,_ZTVN5sc_dt17sc_fxnum_observerE,comdat
	.weak	_ZTVN5sc_dt17sc_fxnum_observerE
	.align	16
_ZTVN5sc_dt17sc_fxnum_observerE:
	.quad	0
	.quad	_ZTIN5sc_dt17sc_fxnum_observerE
	.quad	_ZN5sc_dt17sc_fxnum_observerD1Ev
	.quad	_ZN5sc_dt17sc_fxnum_observerD0Ev
	.quad	_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE
	.quad	_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE
	.quad	_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE
	.quad	_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE
	.size	_ZTVN5sc_dt17sc_fxnum_observerE, 64

	.type	_ZTSN5sc_dt17sc_fxnum_observerE,@object # @_ZTSN5sc_dt17sc_fxnum_observerE
	.section	.rodata._ZTSN5sc_dt17sc_fxnum_observerE,"aG",@progbits,_ZTSN5sc_dt17sc_fxnum_observerE,comdat
	.weak	_ZTSN5sc_dt17sc_fxnum_observerE
	.align	16
_ZTSN5sc_dt17sc_fxnum_observerE:
	.asciz	 "N5sc_dt17sc_fxnum_observerE"
	.size	_ZTSN5sc_dt17sc_fxnum_observerE, 28

	.type	_ZTIN5sc_dt17sc_fxnum_observerE,@object # @_ZTIN5sc_dt17sc_fxnum_observerE
	.section	.rodata._ZTIN5sc_dt17sc_fxnum_observerE,"aG",@progbits,_ZTIN5sc_dt17sc_fxnum_observerE,comdat
	.weak	_ZTIN5sc_dt17sc_fxnum_observerE
	.align	8
_ZTIN5sc_dt17sc_fxnum_observerE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN5sc_dt17sc_fxnum_observerE
	.size	_ZTIN5sc_dt17sc_fxnum_observerE, 16

	.type	_ZTVN5sc_dt22sc_fxnum_fast_observerE,@object # @_ZTVN5sc_dt22sc_fxnum_fast_observerE
	.section	.rodata._ZTVN5sc_dt22sc_fxnum_fast_observerE,"aG",@progbits,_ZTVN5sc_dt22sc_fxnum_fast_observerE,comdat
	.weak	_ZTVN5sc_dt22sc_fxnum_fast_observerE
	.align	16
_ZTVN5sc_dt22sc_fxnum_fast_observerE:
	.quad	0
	.quad	_ZTIN5sc_dt22sc_fxnum_fast_observerE
	.quad	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
	.quad	_ZN5sc_dt22sc_fxnum_fast_observerD0Ev
	.quad	_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE
	.quad	_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE
	.quad	_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE
	.quad	_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE
	.size	_ZTVN5sc_dt22sc_fxnum_fast_observerE, 64

	.type	_ZTSN5sc_dt22sc_fxnum_fast_observerE,@object # @_ZTSN5sc_dt22sc_fxnum_fast_observerE
	.section	.rodata._ZTSN5sc_dt22sc_fxnum_fast_observerE,"aG",@progbits,_ZTSN5sc_dt22sc_fxnum_fast_observerE,comdat
	.weak	_ZTSN5sc_dt22sc_fxnum_fast_observerE
	.align	16
_ZTSN5sc_dt22sc_fxnum_fast_observerE:
	.asciz	 "N5sc_dt22sc_fxnum_fast_observerE"
	.size	_ZTSN5sc_dt22sc_fxnum_fast_observerE, 33

	.type	_ZTIN5sc_dt22sc_fxnum_fast_observerE,@object # @_ZTIN5sc_dt22sc_fxnum_fast_observerE
	.section	.rodata._ZTIN5sc_dt22sc_fxnum_fast_observerE,"aG",@progbits,_ZTIN5sc_dt22sc_fxnum_fast_observerE,comdat
	.weak	_ZTIN5sc_dt22sc_fxnum_fast_observerE
	.align	8
_ZTIN5sc_dt22sc_fxnum_fast_observerE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN5sc_dt22sc_fxnum_fast_observerE
	.size	_ZTIN5sc_dt22sc_fxnum_fast_observerE, 16

	.type	_ZTVN7sc_core18sc_process_monitorE,@object # @_ZTVN7sc_core18sc_process_monitorE
	.section	.rodata._ZTVN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTVN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTVN7sc_core18sc_process_monitorE
	.align	16
_ZTVN7sc_core18sc_process_monitorE:
	.quad	0
	.quad	_ZTIN7sc_core18sc_process_monitorE
	.quad	_ZN7sc_core18sc_process_monitorD1Ev
	.quad	_ZN7sc_core18sc_process_monitorD0Ev
	.quad	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.size	_ZTVN7sc_core18sc_process_monitorE, 40

	.type	_ZTSN7sc_core18sc_process_monitorE,@object # @_ZTSN7sc_core18sc_process_monitorE
	.section	.rodata._ZTSN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTSN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTSN7sc_core18sc_process_monitorE
	.align	16
_ZTSN7sc_core18sc_process_monitorE:
	.asciz	 "N7sc_core18sc_process_monitorE"
	.size	_ZTSN7sc_core18sc_process_monitorE, 31

	.type	_ZTIN7sc_core18sc_process_monitorE,@object # @_ZTIN7sc_core18sc_process_monitorE
	.section	.rodata._ZTIN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTIN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTIN7sc_core18sc_process_monitorE
	.align	8
_ZTIN7sc_core18sc_process_monitorE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_process_monitorE
	.size	_ZTIN7sc_core18sc_process_monitorE, 16

	.type	_ZTS7WBSlave,@object    # @_ZTS7WBSlave
	.section	.rodata._ZTS7WBSlave,"aG",@progbits,_ZTS7WBSlave,comdat
	.weak	_ZTS7WBSlave
_ZTS7WBSlave:
	.asciz	 "7WBSlave"
	.size	_ZTS7WBSlave, 9

	.type	_ZTI7WBSlave,@object    # @_ZTI7WBSlave
	.section	.rodata._ZTI7WBSlave,"aG",@progbits,_ZTI7WBSlave,comdat
	.weak	_ZTI7WBSlave
	.align	16
_ZTI7WBSlave:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTS7WBSlave
	.quad	_ZTIN7sc_core9sc_moduleE
	.size	_ZTI7WBSlave, 24

	.type	.L.str17,@object        # @.str17
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str17:
	.asciz	 "sc_module"
	.size	.L.str17, 10

	.type	.L.str18,@object        # @.str18
.L.str18:
	.asciz	 "port is not bound"
	.size	.L.str18, 18

	.type	_ZTVN5sc_dt7sc_uintILi32EEE,@object # @_ZTVN5sc_dt7sc_uintILi32EEE
	.section	.rodata._ZTVN5sc_dt7sc_uintILi32EEE,"aG",@progbits,_ZTVN5sc_dt7sc_uintILi32EEE,comdat
	.weak	_ZTVN5sc_dt7sc_uintILi32EEE
	.align	16
_ZTVN5sc_dt7sc_uintILi32EEE:
	.quad	0
	.quad	_ZTIN5sc_dt7sc_uintILi32EEE
	.quad	_ZN5sc_dt13sc_value_base17concat_clear_dataEb
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_ctrlEPji
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_dataEPji
	.quad	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.quad	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.quad	_ZN5sc_dt12sc_uint_base10concat_setExi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_9sc_signedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_11sc_unsignedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setEyi
	.quad	_ZN5sc_dt7sc_uintILi32EED1Ev
	.quad	_ZN5sc_dt7sc_uintILi32EED0Ev
	.size	_ZTVN5sc_dt7sc_uintILi32EEE, 104

	.type	_ZTSN5sc_dt7sc_uintILi32EEE,@object # @_ZTSN5sc_dt7sc_uintILi32EEE
	.section	.rodata._ZTSN5sc_dt7sc_uintILi32EEE,"aG",@progbits,_ZTSN5sc_dt7sc_uintILi32EEE,comdat
	.weak	_ZTSN5sc_dt7sc_uintILi32EEE
	.align	16
_ZTSN5sc_dt7sc_uintILi32EEE:
	.asciz	 "N5sc_dt7sc_uintILi32EEE"
	.size	_ZTSN5sc_dt7sc_uintILi32EEE, 24

	.type	_ZTIN5sc_dt7sc_uintILi32EEE,@object # @_ZTIN5sc_dt7sc_uintILi32EEE
	.section	.rodata._ZTIN5sc_dt7sc_uintILi32EEE,"aG",@progbits,_ZTIN5sc_dt7sc_uintILi32EEE,comdat
	.weak	_ZTIN5sc_dt7sc_uintILi32EEE
	.align	16
_ZTIN5sc_dt7sc_uintILi32EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN5sc_dt7sc_uintILi32EEE
	.quad	_ZTIN5sc_dt12sc_uint_baseE
	.size	_ZTIN5sc_dt7sc_uintILi32EEE, 24

	.type	.L.str19,@object        # @.str19
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str19:
	.asciz	 "/opt/eds/Xilinx/Vivado_HLS/2014.4/lnx64/tools/systemc/include/sysc/datatypes/fx/sc_fxnum.h"
	.size	.L.str19, 91

	.type	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE,@object # @_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE
	.section	.bss._ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE,"aGw",@nobits,_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE,comdat
	.weak	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE
	.align	8
_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE:
	.quad	0
	.size	_ZN5sc_dt9sc_globalINS_16sc_fxcast_switchEE10m_instanceE, 8

	.type	.L.str20,@object        # @.str20
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str20:
	.asciz	 "/opt/eds/Xilinx/Vivado_HLS/2014.4/lnx64/tools/systemc/include/sysc/datatypes/fx/sc_fxtype_params.h"
	.size	.L.str20, 99

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	 "SC_WRAP_SM not defined for unsigned numbers"
	.size	.L.str21, 44

	.type	.L.str22,@object        # @.str22
.L.str22:
	.asciz	 "/opt/eds/Xilinx/Vivado_HLS/2014.4/lnx64/tools/systemc/include/sysc/datatypes/fx/scfx_params.h"
	.size	.L.str22, 94

	.type	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE:
	.quad	0
	.quad	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
	.quad	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, 248

	.type	_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, 45

	.type	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 97

	.type	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE, 72

	.type	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE, 24

	.type	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.size	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, 24

	.type	.L.str23,@object        # @.str23
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str23:
	.asciz	 "iface_p != 0"
	.size	.L.str23, 13

	.type	.L.str24,@object        # @.str24
.L.str24:
	.asciz	 "/opt/eds/Xilinx/Vivado_HLS/2014.4/lnx64/tools/systemc/include/sysc/communication/sc_port.h"
	.size	.L.str24, 91

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> > >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 207

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> > >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 207

	.type	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, 53

	.type	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, 40

	.type	_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, 56

	.type	_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE, 56

	.type	_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE, 40

	.type	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.long	2                       # 0x2
	.long	2                       # 0x2
	.quad	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.quad	2                       # 0x2
	.quad	_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.quad	2050                    # 0x802
	.size	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, 56

	.type	.L.str25,@object        # @.str25
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str25:
	.asciz	 "iface != 0"
	.size	.L.str25, 11

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> > >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, 179

	.type	.L.str26,@object        # @.str26
.L.str26:
	.asciz	 "interface already bound to port"
	.size	.L.str26, 32

	.type	.L.str27,@object        # @.str27
.L.str27:
	.asciz	 "vector::_M_insert_aux"
	.size	.L.str27, 22

	.type	.L.str28,@object        # @.str28
.L.str28:
	.asciz	 "sc_inout"
	.size	.L.str28, 9

	.type	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE, 248

	.type	.L.str29,@object        # @.str29
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str29:
	.asciz	 "sc_port_base"
	.size	.L.str29, 13

	.type	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE:
	.quad	0
	.quad	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE, 272

	.type	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE:
	.asciz	 "N7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE"
	.size	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE, 41

	.type	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 93

	.type	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE, 68

	.type	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE, 24

	.type	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.size	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE, 24

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<4> > >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<4> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 199

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<4> > >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<4> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 199

	.type	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE:
	.asciz	 "N7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE"
	.size	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, 52

	.type	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, 40

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<4> > >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<4> >]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE, 171

	.type	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 96

	.type	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE, 71

	.type	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE, 24

	.type	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.size	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	.L.str30,@object        # @.str30
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str30:
	.asciz	 "sc_in"
	.size	.L.str30, 6

	.type	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.size	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE, 248

	.type	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE:
	.quad	0
	.quad	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE, 272

	.type	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE, 42

	.type	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 94

	.type	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE, 69

	.type	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE, 24

	.type	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.size	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE, 24

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<32> > >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 201

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<32> > >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 201

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<32> > >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, 173

	.type	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE, 248

	.type	_ZTVN5sc_dt7sc_uintILi1EEE,@object # @_ZTVN5sc_dt7sc_uintILi1EEE
	.section	.rodata._ZTVN5sc_dt7sc_uintILi1EEE,"aG",@progbits,_ZTVN5sc_dt7sc_uintILi1EEE,comdat
	.weak	_ZTVN5sc_dt7sc_uintILi1EEE
	.align	16
_ZTVN5sc_dt7sc_uintILi1EEE:
	.quad	0
	.quad	_ZTIN5sc_dt7sc_uintILi1EEE
	.quad	_ZN5sc_dt13sc_value_base17concat_clear_dataEb
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_ctrlEPji
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_dataEPji
	.quad	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.quad	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.quad	_ZN5sc_dt12sc_uint_base10concat_setExi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_9sc_signedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_11sc_unsignedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setEyi
	.quad	_ZN5sc_dt7sc_uintILi1EED1Ev
	.quad	_ZN5sc_dt7sc_uintILi1EED0Ev
	.size	_ZTVN5sc_dt7sc_uintILi1EEE, 104

	.type	_ZTSN5sc_dt7sc_uintILi1EEE,@object # @_ZTSN5sc_dt7sc_uintILi1EEE
	.section	.rodata._ZTSN5sc_dt7sc_uintILi1EEE,"aG",@progbits,_ZTSN5sc_dt7sc_uintILi1EEE,comdat
	.weak	_ZTSN5sc_dt7sc_uintILi1EEE
	.align	16
_ZTSN5sc_dt7sc_uintILi1EEE:
	.asciz	 "N5sc_dt7sc_uintILi1EEE"
	.size	_ZTSN5sc_dt7sc_uintILi1EEE, 23

	.type	_ZTIN5sc_dt7sc_uintILi1EEE,@object # @_ZTIN5sc_dt7sc_uintILi1EEE
	.section	.rodata._ZTIN5sc_dt7sc_uintILi1EEE,"aG",@progbits,_ZTIN5sc_dt7sc_uintILi1EEE,comdat
	.weak	_ZTIN5sc_dt7sc_uintILi1EEE
	.align	16
_ZTIN5sc_dt7sc_uintILi1EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN5sc_dt7sc_uintILi1EEE
	.quad	_ZTIN5sc_dt12sc_uint_baseE
	.size	_ZTIN5sc_dt7sc_uintILi1EEE, 24

	.type	_ZTVN7sc_core6sc_outIbEE,@object # @_ZTVN7sc_core6sc_outIbEE
	.section	.rodata._ZTVN7sc_core6sc_outIbEE,"aG",@progbits,_ZTVN7sc_core6sc_outIbEE,comdat
	.weak	_ZTVN7sc_core6sc_outIbEE
	.align	16
_ZTVN7sc_core6sc_outIbEE:
	.quad	0
	.quad	_ZTIN7sc_core6sc_outIbEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core6sc_outIbE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core6sc_outIbED1Ev
	.quad	_ZN7sc_core6sc_outIbED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core8sc_inoutIbE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core6sc_outIbEE, 248

	.type	_ZTSN7sc_core6sc_outIbEE,@object # @_ZTSN7sc_core6sc_outIbEE
	.section	.rodata._ZTSN7sc_core6sc_outIbEE,"aG",@progbits,_ZTSN7sc_core6sc_outIbEE,comdat
	.weak	_ZTSN7sc_core6sc_outIbEE
	.align	16
_ZTSN7sc_core6sc_outIbEE:
	.asciz	 "N7sc_core6sc_outIbEE"
	.size	_ZTSN7sc_core6sc_outIbEE, 21

	.type	_ZTIN7sc_core6sc_outIbEE,@object # @_ZTIN7sc_core6sc_outIbEE
	.section	.rodata._ZTIN7sc_core6sc_outIbEE,"aG",@progbits,_ZTIN7sc_core6sc_outIbEE,comdat
	.weak	_ZTIN7sc_core6sc_outIbEE
	.align	16
_ZTIN7sc_core6sc_outIbEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core6sc_outIbEE
	.quad	_ZTIN7sc_core8sc_inoutIbEE
	.size	_ZTIN7sc_core6sc_outIbEE, 24

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool> >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_inout_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 177

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool> >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_inout_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 177

	.type	_ZTSN7sc_core18sc_signal_inout_ifIbEE,@object # @_ZTSN7sc_core18sc_signal_inout_ifIbEE
	.section	.rodata._ZTSN7sc_core18sc_signal_inout_ifIbEE,"aG",@progbits,_ZTSN7sc_core18sc_signal_inout_ifIbEE,comdat
	.weak	_ZTSN7sc_core18sc_signal_inout_ifIbEE
	.align	16
_ZTSN7sc_core18sc_signal_inout_ifIbEE:
	.asciz	 "N7sc_core18sc_signal_inout_ifIbEE"
	.size	_ZTSN7sc_core18sc_signal_inout_ifIbEE, 34

	.type	_ZTSN7sc_core15sc_signal_in_ifIbEE,@object # @_ZTSN7sc_core15sc_signal_in_ifIbEE
	.section	.rodata._ZTSN7sc_core15sc_signal_in_ifIbEE,"aG",@progbits,_ZTSN7sc_core15sc_signal_in_ifIbEE,comdat
	.weak	_ZTSN7sc_core15sc_signal_in_ifIbEE
	.align	16
_ZTSN7sc_core15sc_signal_in_ifIbEE:
	.asciz	 "N7sc_core15sc_signal_in_ifIbEE"
	.size	_ZTSN7sc_core15sc_signal_in_ifIbEE, 31

	.type	_ZTIN7sc_core15sc_signal_in_ifIbEE,@object # @_ZTIN7sc_core15sc_signal_in_ifIbEE
	.section	.rodata._ZTIN7sc_core15sc_signal_in_ifIbEE,"aG",@progbits,_ZTIN7sc_core15sc_signal_in_ifIbEE,comdat
	.weak	_ZTIN7sc_core15sc_signal_in_ifIbEE
	.align	16
_ZTIN7sc_core15sc_signal_in_ifIbEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core15sc_signal_in_ifIbEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core15sc_signal_in_ifIbEE, 40

	.type	_ZTSN7sc_core18sc_signal_write_ifIbEE,@object # @_ZTSN7sc_core18sc_signal_write_ifIbEE
	.section	.rodata._ZTSN7sc_core18sc_signal_write_ifIbEE,"aG",@progbits,_ZTSN7sc_core18sc_signal_write_ifIbEE,comdat
	.weak	_ZTSN7sc_core18sc_signal_write_ifIbEE
	.align	16
_ZTSN7sc_core18sc_signal_write_ifIbEE:
	.asciz	 "N7sc_core18sc_signal_write_ifIbEE"
	.size	_ZTSN7sc_core18sc_signal_write_ifIbEE, 34

	.type	_ZTIN7sc_core18sc_signal_write_ifIbEE,@object # @_ZTIN7sc_core18sc_signal_write_ifIbEE
	.section	.rodata._ZTIN7sc_core18sc_signal_write_ifIbEE,"aG",@progbits,_ZTIN7sc_core18sc_signal_write_ifIbEE,comdat
	.weak	_ZTIN7sc_core18sc_signal_write_ifIbEE
	.align	16
_ZTIN7sc_core18sc_signal_write_ifIbEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_signal_write_ifIbEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core18sc_signal_write_ifIbEE, 40

	.type	_ZTIN7sc_core18sc_signal_inout_ifIbEE,@object # @_ZTIN7sc_core18sc_signal_inout_ifIbEE
	.section	.rodata._ZTIN7sc_core18sc_signal_inout_ifIbEE,"aG",@progbits,_ZTIN7sc_core18sc_signal_inout_ifIbEE,comdat
	.weak	_ZTIN7sc_core18sc_signal_inout_ifIbEE
	.align	16
_ZTIN7sc_core18sc_signal_inout_ifIbEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_signal_inout_ifIbEE
	.long	2                       # 0x2
	.long	2                       # 0x2
	.quad	_ZTIN7sc_core15sc_signal_in_ifIbEE
	.quad	2                       # 0x2
	.quad	_ZTIN7sc_core18sc_signal_write_ifIbEE
	.quad	2050                    # 0x802
	.size	_ZTIN7sc_core18sc_signal_inout_ifIbEE, 56

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool> >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_inout_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, 149

	.type	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE, 50

	.type	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE, 24

	.type	.L.str31,@object        # @.str31
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str31:
	.asciz	 "sc_out"
	.size	.L.str31, 7

	.type	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE, 75

	.type	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.size	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE, 248

	.type	.L.str32,@object        # @.str32
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str32:
	.asciz	 "sc_port"
	.size	.L.str32, 8

	.type	_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE:
	.quad	0
	.quad	_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
	.quad	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE, 248

	.type	_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE, 43

	.type	_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.size	_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE, 24

	.type	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.size	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTVN5sc_dt7sc_uintILi3EEE,@object # @_ZTVN5sc_dt7sc_uintILi3EEE
	.section	.rodata._ZTVN5sc_dt7sc_uintILi3EEE,"aG",@progbits,_ZTVN5sc_dt7sc_uintILi3EEE,comdat
	.weak	_ZTVN5sc_dt7sc_uintILi3EEE
	.align	16
_ZTVN5sc_dt7sc_uintILi3EEE:
	.quad	0
	.quad	_ZTIN5sc_dt7sc_uintILi3EEE
	.quad	_ZN5sc_dt13sc_value_base17concat_clear_dataEb
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_ctrlEPji
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_dataEPji
	.quad	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.quad	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.quad	_ZN5sc_dt12sc_uint_base10concat_setExi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_9sc_signedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_11sc_unsignedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setEyi
	.quad	_ZN5sc_dt7sc_uintILi3EED1Ev
	.quad	_ZN5sc_dt7sc_uintILi3EED0Ev
	.size	_ZTVN5sc_dt7sc_uintILi3EEE, 104

	.type	_ZTSN5sc_dt7sc_uintILi3EEE,@object # @_ZTSN5sc_dt7sc_uintILi3EEE
	.section	.rodata._ZTSN5sc_dt7sc_uintILi3EEE,"aG",@progbits,_ZTSN5sc_dt7sc_uintILi3EEE,comdat
	.weak	_ZTSN5sc_dt7sc_uintILi3EEE
	.align	16
_ZTSN5sc_dt7sc_uintILi3EEE:
	.asciz	 "N5sc_dt7sc_uintILi3EEE"
	.size	_ZTSN5sc_dt7sc_uintILi3EEE, 23

	.type	_ZTIN5sc_dt7sc_uintILi3EEE,@object # @_ZTIN5sc_dt7sc_uintILi3EEE
	.section	.rodata._ZTIN5sc_dt7sc_uintILi3EEE,"aG",@progbits,_ZTIN5sc_dt7sc_uintILi3EEE,comdat
	.weak	_ZTIN5sc_dt7sc_uintILi3EEE
	.align	16
_ZTIN5sc_dt7sc_uintILi3EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN5sc_dt7sc_uintILi3EEE
	.quad	_ZTIN5sc_dt12sc_uint_baseE
	.size	_ZTIN5sc_dt7sc_uintILi3EEE, 24

	.type	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE, 248

	.type	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE, 47

	.type	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE, 24

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<bool> >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 171

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<bool> >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 171

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<bool> >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_in_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, 143

	.type	_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,@object # @_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE:
	.quad	0
	.quad	_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.quad	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
	.quad	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev
	.quad	_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE
	.size	_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE, 40

	.type	_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,@object # @_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE:
	.asciz	 "N7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE"
	.size	_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE, 56

	.type	_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,@object # @_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.quad	_ZTIN7sc_core15sc_event_finderE
	.size	_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE, 24

	.type	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE, 72

	.type	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.size	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE, 24

	.section	.ctors,"aw",@progbits
	.align	8
	.quad	_GLOBAL__I_a

	.globl	_ZN7WBSlaveC1EN7sc_core14sc_module_nameE
_ZN7WBSlaveC1EN7sc_core14sc_module_nameE = _ZN7WBSlaveC2EN7sc_core14sc_module_nameE
	.section	".note.GNU-stack","",@progbits

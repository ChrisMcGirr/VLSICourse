-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity WBSlave_getLog is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    WBSlave_log_in_V : IN STD_LOGIC_VECTOR (20 downto 0);
    WBSlave_log_out_V : OUT STD_LOGIC_VECTOR (20 downto 0);
    WBSlave_log_out_V_ap_vld : OUT STD_LOGIC;
    WBSlave_log_start_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    WBSlave_log_start_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    WBSlave_log_start_V_o_ap_vld : OUT STD_LOGIC;
    WBSlave_log_done_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    WBSlave_log_done_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of WBSlave_getLog is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (96 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (96 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (96 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (96 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (96 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (96 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (96 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st95_fsm_94 : STD_LOGIC_VECTOR (96 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st96_fsm_95 : STD_LOGIC_VECTOR (96 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st97_fsm_96 : STD_LOGIC_VECTOR (96 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv21_10000 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv64_3FB999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7F0 : STD_LOGIC_VECTOR (10 downto 0) := "11111110000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv22_3F0000 : STD_LOGIC_VECTOR (21 downto 0) := "1111110000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv21_FFFFF : STD_LOGIC_VECTOR (20 downto 0) := "011111111111111111111";
    constant ap_const_lv21_100001 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv49_1000000000000 : STD_LOGIC_VECTOR (48 downto 0) := "1000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv47_0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000000";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv20_FFFFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal inputLUT_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal inputLUT_V_ce0 : STD_LOGIC;
    signal inputLUT_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal logLUT_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal logLUT_V_ce0 : STD_LOGIC;
    signal logLUT_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal gradientLUT_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal gradientLUT_V_ce0 : STD_LOGIC;
    signal gradientLUT_V_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal offsetLUT_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal offsetLUT_V_ce0 : STD_LOGIC;
    signal offsetLUT_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal grp_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dp_s_reg_1573 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_158 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_167 : BOOLEAN;
    signal tmp_118_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_reg_1583 : STD_LOGIC_VECTOR (0 downto 0);
    signal OP2_V_cast_fu_478_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal OP2_V_cast_reg_1588 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_178 : BOOLEAN;
    signal OP2_V_fu_597_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal OP2_V_reg_1593 : STD_LOGIC_VECTOR (41 downto 0);
    signal brmerge_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_reg_1598 : STD_LOGIC_VECTOR (0 downto 0);
    signal WBSlave_log_start_V_read_read_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal WBSlave_log_start_V_read_reg_1602 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_191 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_204 : BOOLEAN;
    signal exitcond_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_reg_1620 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_218 : BOOLEAN;
    signal p_Val2_14_reg_1626 : STD_LOGIC_VECTOR (20 downto 0);
    signal qbit_5_reg_1631 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_fu_664_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_179_reg_1636 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_180_reg_1641 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_181_reg_1646 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_183_reg_1651 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_43_reg_1656 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_1_reg_1661 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_15_fu_731_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_15_reg_1667 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_243 : BOOLEAN;
    signal newsignbit_11_fu_736_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_11_reg_1673 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_770_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_reg_1679 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_789_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_reg_1684 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i2_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i2_reg_1689 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_134_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_134_reg_1694 : STD_LOGIC_VECTOR (0 downto 0);
    signal power_V_fu_897_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal power_V_reg_1699 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_262 : BOOLEAN;
    signal grp_fu_632_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_reg_1705 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_271 : BOOLEAN;
    signal ap_sig_cseq_ST_st65_fsm_64 : STD_LOGIC;
    signal ap_sig_bdd_280 : BOOLEAN;
    signal tmp_174_cast_fu_925_p1 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp_174_cast_reg_1720 : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_sig_cseq_ST_st73_fsm_72 : STD_LOGIC;
    signal ap_sig_bdd_291 : BOOLEAN;
    signal tmp_175_cast_fu_929_p1 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp_175_cast_reg_1726 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp_185_fu_933_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_185_reg_1732 : STD_LOGIC_VECTOR (0 downto 0);
    signal qbit_7_reg_1736 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_188_fu_945_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_188_reg_1741 : STD_LOGIC_VECTOR (46 downto 0);
    signal signbit_4_reg_1746 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st74_fsm_73 : STD_LOGIC;
    signal ap_sig_bdd_311 : BOOLEAN;
    signal p_Val2_41_reg_1755 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_196_reg_1760 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_reg_1766 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_42_fu_1020_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_42_reg_1771 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st75_fsm_74 : STD_LOGIC;
    signal ap_sig_bdd_326 : BOOLEAN;
    signal overflow_11_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_11_reg_1777 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_8_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_8_reg_1783 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_1161_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st76_fsm_75 : STD_LOGIC;
    signal ap_sig_bdd_339 : BOOLEAN;
    signal signbit_5_reg_1798 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st77_fsm_76 : STD_LOGIC;
    signal ap_sig_bdd_348 : BOOLEAN;
    signal p_Val2_39_fu_1225_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_39_reg_1807 : STD_LOGIC_VECTOR (20 downto 0);
    signal newsignbit_13_fu_1231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_13_reg_1813 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_6_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_6_reg_1820 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_55_not_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_55_not_reg_1825 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_192_fu_1257_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_192_reg_1830 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_41_mux_fu_1352_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st78_fsm_77 : STD_LOGIC;
    signal ap_sig_bdd_367 : BOOLEAN;
    signal p_Val2_8_fu_1359_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal brmerge9_fu_1346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_126_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st80_fsm_79 : STD_LOGIC;
    signal ap_sig_bdd_381 : BOOLEAN;
    signal i_11_fu_1372_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_11_reg_1852 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_127_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_127_reg_1858 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st81_fsm_80 : STD_LOGIC;
    signal ap_sig_bdd_399 : BOOLEAN;
    signal tmp_137_fu_1392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_137_reg_1874 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st82_fsm_81 : STD_LOGIC;
    signal ap_sig_bdd_422 : BOOLEAN;
    signal tmp_145_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gradientLUT_V_load_reg_1901 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st83_fsm_82 : STD_LOGIC;
    signal ap_sig_bdd_439 : BOOLEAN;
    signal p_Val2_47_reg_1906 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st84_fsm_83 : STD_LOGIC;
    signal ap_sig_bdd_449 : BOOLEAN;
    signal p_Val2_44_reg_1916 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st90_fsm_89 : STD_LOGIC;
    signal ap_sig_bdd_458 : BOOLEAN;
    signal qbit_reg_1921 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_201_reg_1926 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_154_reg_1931 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_46_fu_1502_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_46_reg_1936 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st91_fsm_90 : STD_LOGIC;
    signal ap_sig_bdd_473 : BOOLEAN;
    signal sum_V_phi_fu_383_p8 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_36_reg_343 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_484 : BOOLEAN;
    signal power_reg_356 : STD_LOGIC_VECTOR (20 downto 0);
    signal i_op_assign_reg_367 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_7_fu_1154_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum_V_reg_379 : STD_LOGIC_VECTOR (20 downto 0);
    signal brmerge8_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_59_mux_fu_1146_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal i_reg_394 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_144_fu_1397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st93_fsm_92 : STD_LOGIC;
    signal ap_sig_bdd_522 : BOOLEAN;
    signal ap_sig_cseq_ST_st95_fsm_94 : STD_LOGIC;
    signal ap_sig_bdd_530 : BOOLEAN;
    signal ap_sig_cseq_ST_st97_fsm_96 : STD_LOGIC;
    signal ap_sig_bdd_538 : BOOLEAN;
    signal tmp_156_fu_1551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_1_fu_1542_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_cseq_ST_st92_fsm_91 : STD_LOGIC;
    signal ap_sig_bdd_551 : BOOLEAN;
    signal grp_fu_406_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_411_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal res_V_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_V_fu_418_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal exp_V_s_fu_428_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_s_fu_434_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_172_fu_451_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_486_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_34_fu_489_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal isneg_fu_495_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_trg_10_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_176_fu_533_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_124_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_123_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_6_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_8_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_31_not_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_35_fu_503_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal brmerge6_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_44_mux_fu_573_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_s_41_fu_581_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal x_V_fu_589_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_s_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_623_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_623_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_632_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_632_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_623_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i3_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_s_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_129_fu_727_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_130_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_4_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_131_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i2_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_184_fu_803_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_not_i3_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i4_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_133_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i2_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_i2_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_135_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_132_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_7_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_9_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_32_not_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i8_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge7_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_50_mux_fu_883_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_6_fu_890_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_911_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_911_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_136_fu_917_p3 : STD_LOGIC_VECTOR (68 downto 0);
    signal grp_fu_911_p2 : STD_LOGIC_VECTOR (68 downto 0);
    signal p_Val2_40_fu_949_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp_195_fu_979_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_197_fu_997_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_5_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i_i_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qbit_6_fu_971_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_fu_1017_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal newsignbit_12_fu_1025_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_149_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_52_not_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_carry_5_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_5_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_4_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i9_fu_1082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_150_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_i_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_199_fu_1105_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_152_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_i_i_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_153_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_33_not_fu_1136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i3_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_37_fu_1167_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal tmp_190_fu_1202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_6_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i_i2_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_38_fu_1179_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_138_fu_1221_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_189_fu_1194_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_carry_6_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i2_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_5_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i2_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_i2_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_i_i2_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_fu_1317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_141_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_1323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_9_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_10_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_34_not_fu_1340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i4_fu_1334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputLUT_V_load_cast_fu_1383_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal inputLUT_V_load_1_cast_fu_1401_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1413_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1413_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1413_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_147_fu_1454_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_45_fu_1457_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal newsignbit_fu_1466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_fu_1474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_not_fu_1485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_1490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_1480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_202_fu_1462_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_68_cast_fu_1510_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_48_fu_1513_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_205_fu_1526_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal isneg_6_fu_1518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_155_fu_1530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_406_ce : STD_LOGIC;
    signal grp_fu_406_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_411_ce : STD_LOGIC;
    signal grp_fu_623_ce : STD_LOGIC;
    signal WBSlave_udiv_49s_5ns_49_53_seq_U4_ap_start : STD_LOGIC;
    signal grp_fu_632_ce : STD_LOGIC;
    signal grp_fu_911_ce : STD_LOGIC;
    signal grp_fu_1413_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (96 downto 0);
    signal grp_fu_1413_p00 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_632_p10 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_911_p00 : STD_LOGIC_VECTOR (68 downto 0);
    signal ap_sig_bdd_1503 : BOOLEAN;

    component WBSlave_dcmp_64ns_64ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component WBSlave_sitodp_21ns_64_5 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WBSlave_mul_21s_21s_42_7 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component WBSlave_udiv_49s_5ns_49_53_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (48 downto 0) );
    end component;


    component WBSlave_mul_49ns_21s_69_9 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (68 downto 0) );
    end component;


    component WBSlave_mul_31ns_21ns_44_7 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component WBSlave_getLog_inputLUT_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component WBSlave_getLog_logLUT_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component WBSlave_getLog_gradientLUT_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component WBSlave_getLog_offsetLUT_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;



begin
    inputLUT_V_U : component WBSlave_getLog_inputLUT_V
    generic map (
        DataWidth => 13,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputLUT_V_address0,
        ce0 => inputLUT_V_ce0,
        q0 => inputLUT_V_q0);

    logLUT_V_U : component WBSlave_getLog_logLUT_V
    generic map (
        DataWidth => 21,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => logLUT_V_address0,
        ce0 => logLUT_V_ce0,
        q0 => logLUT_V_q0);

    gradientLUT_V_U : component WBSlave_getLog_gradientLUT_V
    generic map (
        DataWidth => 31,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradientLUT_V_address0,
        ce0 => gradientLUT_V_ce0,
        q0 => gradientLUT_V_q0);

    offsetLUT_V_U : component WBSlave_getLog_offsetLUT_V
    generic map (
        DataWidth => 21,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => offsetLUT_V_address0,
        ce0 => offsetLUT_V_ce0,
        q0 => offsetLUT_V_q0);

    WBSlave_dcmp_64ns_64ns_1_3_U1 : component WBSlave_dcmp_64ns_64ns_1_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_406_p0,
        din1 => grp_fu_406_p1,
        ce => grp_fu_406_ce,
        opcode => grp_fu_406_opcode,
        dout => grp_fu_406_p2);

    WBSlave_sitodp_21ns_64_5_U2 : component WBSlave_sitodp_21ns_64_5
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 21,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_411_p0,
        ce => grp_fu_411_ce,
        dout => grp_fu_411_p1);

    WBSlave_mul_21s_21s_42_7_U3 : component WBSlave_mul_21s_21s_42_7
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_623_p0,
        din1 => grp_fu_623_p1,
        ce => grp_fu_623_ce,
        dout => grp_fu_623_p2);

    WBSlave_udiv_49s_5ns_49_53_seq_U4 : component WBSlave_udiv_49s_5ns_49_53_seq
    generic map (
        ID => 1,
        NUM_STAGE => 53,
        din0_WIDTH => 49,
        din1_WIDTH => 5,
        dout_WIDTH => 49)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => WBSlave_udiv_49s_5ns_49_53_seq_U4_ap_start,
        din0 => grp_fu_632_p0,
        din1 => grp_fu_632_p1,
        ce => grp_fu_632_ce,
        dout => grp_fu_632_p2);

    WBSlave_mul_49ns_21s_69_9_U5 : component WBSlave_mul_49ns_21s_69_9
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 49,
        din1_WIDTH => 21,
        dout_WIDTH => 69)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_911_p0,
        din1 => grp_fu_911_p1,
        ce => grp_fu_911_ce,
        dout => grp_fu_911_p2);

    WBSlave_mul_31ns_21ns_44_7_U6 : component WBSlave_mul_31ns_21ns_44_7
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 31,
        din1_WIDTH => 21,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1413_p0,
        din1 => grp_fu_1413_p1,
        ce => grp_fu_1413_ce,
        dout => grp_fu_1413_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st2_fsm_1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_op_assign_reg_367 assign process. --
    i_op_assign_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (brmerge_reg_1598 = ap_const_lv1_0))) then 
                i_op_assign_reg_367 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75)) then 
                i_op_assign_reg_367 <= i_12_fu_1161_p2;
            end if; 
        end if;
    end process;

    -- i_reg_394 assign process. --
    i_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((brmerge_reg_1598 = ap_const_lv1_0)))) then 
                i_reg_394 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81) and ((ap_const_lv1_0 = tmp_137_reg_1874) or (ap_const_lv1_0 = tmp_145_fu_1405_p2)))) then 
                i_reg_394 <= i_11_reg_1852;
            end if; 
        end if;
    end process;

    -- p_Val2_36_reg_343 assign process. --
    p_Val2_36_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (brmerge_reg_1598 = ap_const_lv1_0))) then 
                p_Val2_36_reg_343 <= ap_const_lv21_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75)) then 
                p_Val2_36_reg_343 <= sum_V_phi_fu_383_p8;
            end if; 
        end if;
    end process;

    -- power_reg_356 assign process. --
    power_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (brmerge_reg_1598 = ap_const_lv1_0))) then 
                power_reg_356 <= ap_const_lv21_10000;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75)) then 
                power_reg_356 <= power_V_reg_1699;
            end if; 
        end if;
    end process;

    -- sum_V_reg_379 assign process. --
    sum_V_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77) and not((ap_const_lv1_0 = brmerge9_fu_1346_p2)))) then 
                sum_V_reg_379 <= p_Val2_41_mux_fu_1352_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77) and (ap_const_lv1_0 = brmerge9_fu_1346_p2))) then 
                sum_V_reg_379 <= p_Val2_8_fu_1359_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75) and (ap_const_lv1_0 = tmp_185_reg_1732) and not((ap_const_lv1_0 = brmerge8_fu_1141_p2)))) then 
                sum_V_reg_379 <= p_Val2_59_mux_fu_1146_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75) and (ap_const_lv1_0 = tmp_185_reg_1732) and (ap_const_lv1_0 = brmerge8_fu_1141_p2))) then 
                sum_V_reg_379 <= p_Val2_7_fu_1154_p3;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                OP2_V_cast_reg_1588(0) <= OP2_V_cast_fu_478_p1(0);
    OP2_V_cast_reg_1588(1) <= OP2_V_cast_fu_478_p1(1);
    OP2_V_cast_reg_1588(2) <= OP2_V_cast_fu_478_p1(2);
    OP2_V_cast_reg_1588(3) <= OP2_V_cast_fu_478_p1(3);
    OP2_V_cast_reg_1588(4) <= OP2_V_cast_fu_478_p1(4);
    OP2_V_cast_reg_1588(5) <= OP2_V_cast_fu_478_p1(5);
    OP2_V_cast_reg_1588(6) <= OP2_V_cast_fu_478_p1(6);
    OP2_V_cast_reg_1588(7) <= OP2_V_cast_fu_478_p1(7);
    OP2_V_cast_reg_1588(8) <= OP2_V_cast_fu_478_p1(8);
    OP2_V_cast_reg_1588(9) <= OP2_V_cast_fu_478_p1(9);
    OP2_V_cast_reg_1588(10) <= OP2_V_cast_fu_478_p1(10);
    OP2_V_cast_reg_1588(11) <= OP2_V_cast_fu_478_p1(11);
    OP2_V_cast_reg_1588(12) <= OP2_V_cast_fu_478_p1(12);
    OP2_V_cast_reg_1588(13) <= OP2_V_cast_fu_478_p1(13);
    OP2_V_cast_reg_1588(14) <= OP2_V_cast_fu_478_p1(14);
    OP2_V_cast_reg_1588(15) <= OP2_V_cast_fu_478_p1(15);
    OP2_V_cast_reg_1588(16) <= OP2_V_cast_fu_478_p1(16);
    OP2_V_cast_reg_1588(17) <= OP2_V_cast_fu_478_p1(17);
    OP2_V_cast_reg_1588(18) <= OP2_V_cast_fu_478_p1(18);
    OP2_V_cast_reg_1588(19) <= OP2_V_cast_fu_478_p1(19);
    OP2_V_cast_reg_1588(20) <= OP2_V_cast_fu_478_p1(20);
                OP2_V_reg_1593 <= OP2_V_fu_597_p1;
                brmerge_reg_1598 <= brmerge_fu_601_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((WBSlave_log_start_V_read_read_fu_272_p2 = ap_const_lv1_0)))) then
                WBSlave_log_start_V_read_reg_1602 <= WBSlave_log_start_V_i;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76)) then
                carry_6_reg_1820 <= carry_6_fu_1245_p2;
                newsignbit_13_reg_1813 <= p_Val2_39_fu_1225_p2(20 downto 20);
                p_Result_55_not_reg_1825 <= p_Result_55_not_fu_1251_p2;
                p_Val2_39_reg_1807 <= p_Val2_39_fu_1225_p2;
                signbit_5_reg_1798 <= p_Val2_37_fu_1167_p2(69 downto 69);
                tmp_192_reg_1830 <= tmp_192_fu_1257_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                deleted_ones_reg_1684 <= deleted_ones_fu_789_p3;
                deleted_zeros_reg_1679 <= deleted_zeros_fu_770_p3;
                newsignbit_11_reg_1673 <= p_Val2_15_fu_731_p2(20 downto 20);
                p_38_i2_reg_1689 <= p_38_i2_fu_797_p2;
                p_Val2_15_reg_1667 <= p_Val2_15_fu_731_p2;
                tmp_134_reg_1694 <= tmp_134_fu_807_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                dp_s_reg_1573 <= grp_fu_411_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st83_fsm_82)) then
                gradientLUT_V_load_reg_1901 <= gradientLUT_V_q0;
                p_Val2_47_reg_1906 <= offsetLUT_V_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79)) then
                i_11_reg_1852 <= i_11_fu_1372_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74)) then
                overflow_11_reg_1777 <= overflow_11_fu_1088_p2;
                p_Val2_42_reg_1771 <= p_Val2_42_fu_1020_p2;
                underflow_8_reg_1783 <= underflow_8_fu_1127_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                p_Result_1_reg_1661 <= grp_fu_623_p2(41 downto 37);
                p_Result_s_43_reg_1656 <= grp_fu_623_p2(41 downto 38);
                p_Val2_14_reg_1626 <= grp_fu_623_p2(36 downto 16);
                qbit_5_reg_1631 <= grp_fu_623_p2(15 downto 15);
                signbit_reg_1620 <= grp_fu_623_p2(41 downto 41);
                tmp_179_reg_1636 <= tmp_179_fu_664_p1;
                tmp_180_reg_1641 <= grp_fu_623_p2(36 downto 36);
                tmp_181_reg_1646 <= grp_fu_623_p2(16 downto 16);
                tmp_183_reg_1651 <= grp_fu_623_p2(37 downto 37);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73)) then
                p_Val2_41_reg_1755 <= p_Val2_40_fu_949_p2(68 downto 48);
                qb_assign_2_reg_1766 <= qb_assign_2_fu_1011_p2;
                signbit_4_reg_1746 <= p_Val2_40_fu_949_p2(69 downto 69);
                tmp_196_reg_1760 <= p_Val2_40_fu_949_p2(68 downto 68);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st90_fsm_89)) then
                p_Val2_44_reg_1916 <= grp_fu_1413_p2(36 downto 16);
                qbit_reg_1921 <= grp_fu_1413_p2(15 downto 15);
                tmp_154_reg_1931 <= grp_fu_1413_p2(43 downto 37);
                tmp_201_reg_1926 <= grp_fu_1413_p2(36 downto 36);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st91_fsm_90)) then
                p_Val2_46_reg_1936 <= p_Val2_46_fu_1502_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                power_V_reg_1699 <= power_V_fu_897_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72) and not((ap_const_lv1_0 = tmp_185_fu_933_p1)))) then
                qbit_7_reg_1736 <= grp_fu_911_p2(47 downto 47);
                tmp_188_reg_1741 <= tmp_188_fu_945_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then
                r_V_reg_1705 <= grp_fu_632_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_118_reg_1583 <= tmp_118_fu_467_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79) and not((ap_const_lv1_0 = tmp_126_fu_1366_p2)))) then
                tmp_127_reg_1858(0) <= tmp_127_fu_1378_p1(0);
    tmp_127_reg_1858(1) <= tmp_127_fu_1378_p1(1);
    tmp_127_reg_1858(2) <= tmp_127_fu_1378_p1(2);
    tmp_127_reg_1858(3) <= tmp_127_fu_1378_p1(3);
    tmp_127_reg_1858(4) <= tmp_127_fu_1378_p1(4);
    tmp_127_reg_1858(5) <= tmp_127_fu_1378_p1(5);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80) and (ap_const_lv1_0 = tmp_128_fu_1387_p2))) then
                tmp_137_reg_1874 <= tmp_137_fu_1392_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72)) then
                tmp_174_cast_reg_1720(48) <= tmp_174_cast_fu_925_p1(48);
    tmp_174_cast_reg_1720(49) <= tmp_174_cast_fu_925_p1(49);
    tmp_174_cast_reg_1720(50) <= tmp_174_cast_fu_925_p1(50);
    tmp_174_cast_reg_1720(51) <= tmp_174_cast_fu_925_p1(51);
    tmp_174_cast_reg_1720(52) <= tmp_174_cast_fu_925_p1(52);
    tmp_174_cast_reg_1720(53) <= tmp_174_cast_fu_925_p1(53);
    tmp_174_cast_reg_1720(54) <= tmp_174_cast_fu_925_p1(54);
    tmp_174_cast_reg_1720(55) <= tmp_174_cast_fu_925_p1(55);
    tmp_174_cast_reg_1720(56) <= tmp_174_cast_fu_925_p1(56);
    tmp_174_cast_reg_1720(57) <= tmp_174_cast_fu_925_p1(57);
    tmp_174_cast_reg_1720(58) <= tmp_174_cast_fu_925_p1(58);
    tmp_174_cast_reg_1720(59) <= tmp_174_cast_fu_925_p1(59);
    tmp_174_cast_reg_1720(60) <= tmp_174_cast_fu_925_p1(60);
    tmp_174_cast_reg_1720(61) <= tmp_174_cast_fu_925_p1(61);
    tmp_174_cast_reg_1720(62) <= tmp_174_cast_fu_925_p1(62);
    tmp_174_cast_reg_1720(63) <= tmp_174_cast_fu_925_p1(63);
    tmp_174_cast_reg_1720(64) <= tmp_174_cast_fu_925_p1(64);
    tmp_174_cast_reg_1720(65) <= tmp_174_cast_fu_925_p1(65);
    tmp_174_cast_reg_1720(66) <= tmp_174_cast_fu_925_p1(66);
    tmp_174_cast_reg_1720(67) <= tmp_174_cast_fu_925_p1(67);
    tmp_174_cast_reg_1720(68) <= tmp_174_cast_fu_925_p1(68);
    tmp_174_cast_reg_1720(69) <= tmp_174_cast_fu_925_p1(69);
                tmp_175_cast_reg_1726 <= tmp_175_cast_fu_929_p1;
                tmp_185_reg_1732 <= tmp_185_fu_933_p1;
            end if;
        end if;
    end process;
    OP2_V_cast_reg_1588(43 downto 21) <= "00000000000000000000000";
    tmp_174_cast_reg_1720(47 downto 0) <= "000000000000000000000000000000000000000000000000";
    tmp_127_reg_1858(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, brmerge_reg_1598, WBSlave_log_start_V_read_read_fu_272_p2, exitcond_fu_613_p2, tmp_185_fu_933_p1, tmp_126_fu_1366_p2, tmp_128_fu_1387_p2, tmp_137_reg_1874, tmp_145_fu_1405_p2, tmp_156_fu_1551_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not((WBSlave_log_start_V_read_read_fu_272_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (not((brmerge_reg_1598 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st80_fsm_79;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                if (not((ap_const_lv1_0 = exitcond_fu_613_p2))) then
                    ap_NS_fsm <= ap_ST_st79_fsm_78;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                if (not((ap_const_lv1_0 = tmp_185_fu_933_p1))) then
                    ap_NS_fsm <= ap_ST_st77_fsm_76;
                else
                    ap_NS_fsm <= ap_ST_st74_fsm_73;
                end if;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st97_fsm_96;
            when ap_ST_st80_fsm_79 => 
                if ((ap_const_lv1_0 = tmp_126_fu_1366_p2)) then
                    ap_NS_fsm <= ap_ST_st94_fsm_93;
                else
                    ap_NS_fsm <= ap_ST_st81_fsm_80;
                end if;
            when ap_ST_st81_fsm_80 => 
                if ((ap_const_lv1_0 = tmp_128_fu_1387_p2)) then
                    ap_NS_fsm <= ap_ST_st82_fsm_81;
                else
                    ap_NS_fsm <= ap_ST_st95_fsm_94;
                end if;
            when ap_ST_st82_fsm_81 => 
                if (((ap_const_lv1_0 = tmp_137_reg_1874) or (ap_const_lv1_0 = tmp_145_fu_1405_p2))) then
                    ap_NS_fsm <= ap_ST_st80_fsm_79;
                else
                    ap_NS_fsm <= ap_ST_st83_fsm_82;
                end if;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                ap_NS_fsm <= ap_ST_st97_fsm_96;
            when ap_ST_st95_fsm_94 => 
                ap_NS_fsm <= ap_ST_st96_fsm_95;
            when ap_ST_st96_fsm_95 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st97_fsm_96 => 
                if (not((tmp_156_fu_1551_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st97_fsm_96;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    OP2_V_cast_fu_478_p1 <= std_logic_vector(resize(unsigned(WBSlave_log_in_V),44));
        OP2_V_fu_597_p1 <= std_logic_vector(resize(signed(x_V_fu_589_p3),42));

    Range1_all_ones_fu_760_p2 <= "1" when (p_Result_1_reg_1661 = ap_const_lv5_1F) else "0";
    Range1_all_zeros_fu_765_p2 <= "1" when (p_Result_1_reg_1661 = ap_const_lv5_0) else "0";
    Range1_all_zeros_not_fu_1485_p2 <= "0" when (tmp_154_reg_1931 = ap_const_lv7_0) else "1";
    Range2_all_ones_fu_755_p2 <= "1" when (p_Result_s_43_reg_1656 = ap_const_lv4_F) else "0";

    -- WBSlave_log_done_V assign process. --
    WBSlave_log_done_V_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, exitcond_fu_613_p2, ap_sig_cseq_ST_st93_fsm_92, ap_sig_cseq_ST_st95_fsm_94, ap_sig_cseq_ST_st97_fsm_96, tmp_156_fu_1551_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st97_fsm_96) and not((tmp_156_fu_1551_p2 = ap_const_lv1_0)))) then 
            WBSlave_log_done_V <= ap_const_lv1_0;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond_fu_613_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st93_fsm_92) or (ap_const_logic_1 = ap_sig_cseq_ST_st95_fsm_94))) then 
            WBSlave_log_done_V <= ap_const_lv1_1;
        else 
            WBSlave_log_done_V <= "X";
        end if; 
    end process;


    -- WBSlave_log_done_V_ap_vld assign process. --
    WBSlave_log_done_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, exitcond_fu_613_p2, ap_sig_cseq_ST_st93_fsm_92, ap_sig_cseq_ST_st95_fsm_94, ap_sig_cseq_ST_st97_fsm_96, tmp_156_fu_1551_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond_fu_613_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st93_fsm_92) or (ap_const_logic_1 = ap_sig_cseq_ST_st95_fsm_94) or ((ap_const_logic_1 = ap_sig_cseq_ST_st97_fsm_96) and not((tmp_156_fu_1551_p2 = ap_const_lv1_0))))) then 
            WBSlave_log_done_V_ap_vld <= ap_const_logic_1;
        else 
            WBSlave_log_done_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- WBSlave_log_out_V assign process. --
    WBSlave_log_out_V_assign_proc : process(logLUT_V_q0, ap_sig_cseq_ST_st12_fsm_11, exitcond_fu_613_p2, p_Val2_36_reg_343, ap_sig_cseq_ST_st95_fsm_94, this_assign_1_fu_1542_p3, ap_sig_cseq_ST_st92_fsm_91)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st95_fsm_94)) then 
            WBSlave_log_out_V <= logLUT_V_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st92_fsm_91)) then 
            WBSlave_log_out_V <= this_assign_1_fu_1542_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond_fu_613_p2)))) then 
            WBSlave_log_out_V <= p_Val2_36_reg_343;
        else 
            WBSlave_log_out_V <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- WBSlave_log_out_V_ap_vld assign process. --
    WBSlave_log_out_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, exitcond_fu_613_p2, ap_sig_cseq_ST_st95_fsm_94, ap_sig_cseq_ST_st92_fsm_91)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond_fu_613_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st95_fsm_94) or (ap_const_logic_1 = ap_sig_cseq_ST_st92_fsm_91))) then 
            WBSlave_log_out_V_ap_vld <= ap_const_logic_1;
        else 
            WBSlave_log_out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    WBSlave_log_start_V_o <= ap_const_lv1_0;
    WBSlave_log_start_V_o_ap_vld <= ap_const_logic_0;
    WBSlave_log_start_V_read_read_fu_272_p2 <= WBSlave_log_start_V_i;

    -- WBSlave_udiv_49s_5ns_49_53_seq_U4_ap_start assign process. --
    WBSlave_udiv_49s_5ns_49_53_seq_U4_ap_start_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, exitcond_fu_613_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = exitcond_fu_613_p2))) then 
            WBSlave_udiv_49s_5ns_49_53_seq_U4_ap_start <= ap_const_logic_1;
        else 
            WBSlave_udiv_49s_5ns_49_53_seq_U4_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_1503 assign process. --
    ap_sig_bdd_1503_assign_proc : process(tmp_185_reg_1732, ap_sig_cseq_ST_st76_fsm_75)
    begin
                ap_sig_bdd_1503 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75) and (ap_const_lv1_0 = tmp_185_reg_1732));
    end process;


    -- ap_sig_bdd_158 assign process. --
    ap_sig_bdd_158_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_158 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_167 assign process. --
    ap_sig_bdd_167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_167 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_178 assign process. --
    ap_sig_bdd_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_178 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_191 assign process. --
    ap_sig_bdd_191_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_191 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_204 assign process. --
    ap_sig_bdd_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_204 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_218 assign process. --
    ap_sig_bdd_218_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_218 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_243 assign process. --
    ap_sig_bdd_243_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_243 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_262 assign process. --
    ap_sig_bdd_262_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_262 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_271 assign process. --
    ap_sig_bdd_271_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_271 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_280 assign process. --
    ap_sig_bdd_280_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_280 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    -- ap_sig_bdd_291 assign process. --
    ap_sig_bdd_291_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_291 <= (ap_const_lv1_1 = ap_CS_fsm(72 downto 72));
    end process;


    -- ap_sig_bdd_311 assign process. --
    ap_sig_bdd_311_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_311 <= (ap_const_lv1_1 = ap_CS_fsm(73 downto 73));
    end process;


    -- ap_sig_bdd_326 assign process. --
    ap_sig_bdd_326_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_326 <= (ap_const_lv1_1 = ap_CS_fsm(74 downto 74));
    end process;


    -- ap_sig_bdd_339 assign process. --
    ap_sig_bdd_339_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_339 <= (ap_const_lv1_1 = ap_CS_fsm(75 downto 75));
    end process;


    -- ap_sig_bdd_348 assign process. --
    ap_sig_bdd_348_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_348 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    -- ap_sig_bdd_367 assign process. --
    ap_sig_bdd_367_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_367 <= (ap_const_lv1_1 = ap_CS_fsm(77 downto 77));
    end process;


    -- ap_sig_bdd_381 assign process. --
    ap_sig_bdd_381_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_381 <= (ap_const_lv1_1 = ap_CS_fsm(79 downto 79));
    end process;


    -- ap_sig_bdd_399 assign process. --
    ap_sig_bdd_399_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_399 <= (ap_const_lv1_1 = ap_CS_fsm(80 downto 80));
    end process;


    -- ap_sig_bdd_422 assign process. --
    ap_sig_bdd_422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_422 <= (ap_const_lv1_1 = ap_CS_fsm(81 downto 81));
    end process;


    -- ap_sig_bdd_439 assign process. --
    ap_sig_bdd_439_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_439 <= (ap_const_lv1_1 = ap_CS_fsm(82 downto 82));
    end process;


    -- ap_sig_bdd_449 assign process. --
    ap_sig_bdd_449_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_449 <= (ap_const_lv1_1 = ap_CS_fsm(83 downto 83));
    end process;


    -- ap_sig_bdd_458 assign process. --
    ap_sig_bdd_458_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_458 <= (ap_const_lv1_1 = ap_CS_fsm(89 downto 89));
    end process;


    -- ap_sig_bdd_473 assign process. --
    ap_sig_bdd_473_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_473 <= (ap_const_lv1_1 = ap_CS_fsm(90 downto 90));
    end process;


    -- ap_sig_bdd_484 assign process. --
    ap_sig_bdd_484_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_484 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_522 assign process. --
    ap_sig_bdd_522_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_522 <= (ap_const_lv1_1 = ap_CS_fsm(92 downto 92));
    end process;


    -- ap_sig_bdd_530 assign process. --
    ap_sig_bdd_530_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_530 <= (ap_const_lv1_1 = ap_CS_fsm(94 downto 94));
    end process;


    -- ap_sig_bdd_538 assign process. --
    ap_sig_bdd_538_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_538 <= (ap_const_lv1_1 = ap_CS_fsm(96 downto 96));
    end process;


    -- ap_sig_bdd_551 assign process. --
    ap_sig_bdd_551_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_551 <= (ap_const_lv1_1 = ap_CS_fsm(91 downto 91));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_191)
    begin
        if (ap_sig_bdd_191) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_484)
    begin
        if (ap_sig_bdd_484) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_204)
    begin
        if (ap_sig_bdd_204) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_218)
    begin
        if (ap_sig_bdd_218) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_243)
    begin
        if (ap_sig_bdd_243) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_262)
    begin
        if (ap_sig_bdd_262) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st64_fsm_63 assign process. --
    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_bdd_271)
    begin
        if (ap_sig_bdd_271) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st65_fsm_64 assign process. --
    ap_sig_cseq_ST_st65_fsm_64_assign_proc : process(ap_sig_bdd_280)
    begin
        if (ap_sig_bdd_280) then 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_158)
    begin
        if (ap_sig_bdd_158) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st73_fsm_72 assign process. --
    ap_sig_cseq_ST_st73_fsm_72_assign_proc : process(ap_sig_bdd_291)
    begin
        if (ap_sig_bdd_291) then 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st74_fsm_73 assign process. --
    ap_sig_cseq_ST_st74_fsm_73_assign_proc : process(ap_sig_bdd_311)
    begin
        if (ap_sig_bdd_311) then 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st75_fsm_74 assign process. --
    ap_sig_cseq_ST_st75_fsm_74_assign_proc : process(ap_sig_bdd_326)
    begin
        if (ap_sig_bdd_326) then 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st76_fsm_75 assign process. --
    ap_sig_cseq_ST_st76_fsm_75_assign_proc : process(ap_sig_bdd_339)
    begin
        if (ap_sig_bdd_339) then 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st77_fsm_76 assign process. --
    ap_sig_cseq_ST_st77_fsm_76_assign_proc : process(ap_sig_bdd_348)
    begin
        if (ap_sig_bdd_348) then 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st78_fsm_77 assign process. --
    ap_sig_cseq_ST_st78_fsm_77_assign_proc : process(ap_sig_bdd_367)
    begin
        if (ap_sig_bdd_367) then 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_167)
    begin
        if (ap_sig_bdd_167) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st80_fsm_79 assign process. --
    ap_sig_cseq_ST_st80_fsm_79_assign_proc : process(ap_sig_bdd_381)
    begin
        if (ap_sig_bdd_381) then 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st81_fsm_80 assign process. --
    ap_sig_cseq_ST_st81_fsm_80_assign_proc : process(ap_sig_bdd_399)
    begin
        if (ap_sig_bdd_399) then 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st82_fsm_81 assign process. --
    ap_sig_cseq_ST_st82_fsm_81_assign_proc : process(ap_sig_bdd_422)
    begin
        if (ap_sig_bdd_422) then 
            ap_sig_cseq_ST_st82_fsm_81 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st82_fsm_81 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st83_fsm_82 assign process. --
    ap_sig_cseq_ST_st83_fsm_82_assign_proc : process(ap_sig_bdd_439)
    begin
        if (ap_sig_bdd_439) then 
            ap_sig_cseq_ST_st83_fsm_82 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st83_fsm_82 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st84_fsm_83 assign process. --
    ap_sig_cseq_ST_st84_fsm_83_assign_proc : process(ap_sig_bdd_449)
    begin
        if (ap_sig_bdd_449) then 
            ap_sig_cseq_ST_st84_fsm_83 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st84_fsm_83 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st90_fsm_89 assign process. --
    ap_sig_cseq_ST_st90_fsm_89_assign_proc : process(ap_sig_bdd_458)
    begin
        if (ap_sig_bdd_458) then 
            ap_sig_cseq_ST_st90_fsm_89 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st90_fsm_89 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st91_fsm_90 assign process. --
    ap_sig_cseq_ST_st91_fsm_90_assign_proc : process(ap_sig_bdd_473)
    begin
        if (ap_sig_bdd_473) then 
            ap_sig_cseq_ST_st91_fsm_90 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st91_fsm_90 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st92_fsm_91 assign process. --
    ap_sig_cseq_ST_st92_fsm_91_assign_proc : process(ap_sig_bdd_551)
    begin
        if (ap_sig_bdd_551) then 
            ap_sig_cseq_ST_st92_fsm_91 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st92_fsm_91 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st93_fsm_92 assign process. --
    ap_sig_cseq_ST_st93_fsm_92_assign_proc : process(ap_sig_bdd_522)
    begin
        if (ap_sig_bdd_522) then 
            ap_sig_cseq_ST_st93_fsm_92 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st93_fsm_92 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st95_fsm_94 assign process. --
    ap_sig_cseq_ST_st95_fsm_94_assign_proc : process(ap_sig_bdd_530)
    begin
        if (ap_sig_bdd_530) then 
            ap_sig_cseq_ST_st95_fsm_94 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st95_fsm_94 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st97_fsm_96 assign process. --
    ap_sig_cseq_ST_st97_fsm_96_assign_proc : process(ap_sig_bdd_538)
    begin
        if (ap_sig_bdd_538) then 
            ap_sig_cseq_ST_st97_fsm_96 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st97_fsm_96 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_178)
    begin
        if (ap_sig_bdd_178) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i2_fu_839_p2 <= (newsignbit_11_reg_1673 and deleted_ones_reg_1684);
    brmerge40_demorgan_i_i2_fu_1302_p2 <= (signbit_5_reg_1798 and newsignbit_13_reg_1813);
    brmerge40_demorgan_i_i_fu_1094_p2 <= (signbit_4_reg_1746 and newsignbit_12_fu_1025_p3);
    brmerge40_i2_fu_843_p2 <= (brmerge40_demorgan_i2_fu_839_p2 xor ap_const_lv1_1);
    brmerge40_i_i2_fu_1306_p2 <= (brmerge40_demorgan_i_i2_fu_1302_p2 xor ap_const_lv1_1);
    brmerge40_i_i_fu_1099_p2 <= (brmerge40_demorgan_i_i_fu_1094_p2 xor ap_const_lv1_1);
    brmerge6_fu_567_p2 <= (overflow_8_fu_521_p2 or underflow_31_not_fu_561_p2);
    brmerge7_fu_877_p2 <= (overflow_9_fu_833_p2 or underflow_32_not_fu_871_p2);
    brmerge8_fu_1141_p2 <= (overflow_11_reg_1777 or underflow_33_not_fu_1136_p2);
    brmerge9_fu_1346_p2 <= (overflow_10_fu_1296_p2 or underflow_34_not_fu_1340_p2);
    brmerge_fu_601_p2 <= (tmp_s_fu_473_p2 or tmp_120_fu_481_p2);
    brmerge_i4_fu_823_p2 <= (newsignbit_11_reg_1673 or p_not_i3_fu_818_p2);
    brmerge_i_i1_fu_1291_p2 <= (newsignbit_13_reg_1813 or p_not_i_i2_fu_1285_p2);
    brmerge_i_i8_fu_865_p2 <= (underflow_7_fu_860_p2 or overflow_9_fu_833_p2);
    brmerge_i_i9_fu_1082_p2 <= (newsignbit_12_fu_1025_p3 or p_not_i_i_fu_1076_p2);
    brmerge_i_i_fu_555_p2 <= (underflow_6_fu_549_p2 or overflow_8_fu_521_p2);
    brmerge_i_i_i3_fu_1132_p2 <= (underflow_8_reg_1783 or overflow_11_reg_1777);
    brmerge_i_i_i4_fu_1334_p2 <= (underflow_9_fu_1329_p2 or overflow_10_fu_1296_p2);
    carry_4_fu_750_p2 <= (tmp_180_reg_1641 and tmp_130_fu_744_p2);
    carry_5_fu_1039_p2 <= (tmp_196_reg_1760 and tmp_149_fu_1033_p2);
    carry_6_fu_1245_p2 <= (tmp_189_fu_1194_p3 and tmp_139_fu_1239_p2);
    carry_fu_1480_p2 <= (tmp_201_reg_1926 and tmp_148_fu_1474_p2);
    deleted_ones_fu_789_p3 <= 
        p_41_i2_fu_783_p2 when (carry_4_fu_750_p2(0) = '1') else 
        Range1_all_ones_fu_760_p2;
    deleted_zeros_4_fu_1055_p2 <= (signbit_4_reg_1746 xor not_carry_5_fu_1049_p2);
    deleted_zeros_5_fu_1265_p2 <= (signbit_5_reg_1798 xor not_carry_6_fu_1261_p2);
    deleted_zeros_fu_770_p3 <= 
        Range1_all_ones_fu_760_p2 when (carry_4_fu_750_p2(0) = '1') else 
        Range1_all_zeros_fu_765_p2;
    exitcond_fu_613_p2 <= "1" when (i_op_assign_reg_367 = ap_const_lv5_11) else "0";
    exp_V_fu_418_p4 <= res_V_fu_415_p1(62 downto 52);
    exp_V_s_fu_428_p2 <= std_logic_vector(unsigned(exp_V_fu_418_p4) + unsigned(ap_const_lv11_7F0));
    gradientLUT_V_address0 <= tmp_127_reg_1858(6 - 1 downto 0);

    -- gradientLUT_V_ce0 assign process. --
    gradientLUT_V_ce0_assign_proc : process(ap_sig_cseq_ST_st82_fsm_81)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81)) then 
            gradientLUT_V_ce0 <= ap_const_logic_1;
        else 
            gradientLUT_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1413_ce <= ap_const_logic_1;
    grp_fu_1413_p0 <= grp_fu_1413_p00(31 - 1 downto 0);
    grp_fu_1413_p00 <= std_logic_vector(resize(unsigned(gradientLUT_V_load_reg_1901),44));
    grp_fu_1413_p1 <= OP2_V_cast_reg_1588(21 - 1 downto 0);
    grp_fu_406_ce <= ap_const_logic_1;
    grp_fu_406_opcode <= ap_const_lv5_4;
    grp_fu_406_p0 <= p_Result_s_fu_434_p5;
    grp_fu_406_p1 <= ap_const_lv64_3FB999999999999A;
    grp_fu_411_ce <= ap_const_logic_1;
    grp_fu_411_p0 <= WBSlave_log_in_V;
    grp_fu_623_ce <= ap_const_logic_1;
    grp_fu_623_p0 <= OP2_V_reg_1593(21 - 1 downto 0);
    grp_fu_623_p1 <= power_reg_356;
    grp_fu_632_ce <= ap_const_logic_1;
    grp_fu_632_p0 <= ap_const_lv49_1000000000000;
    grp_fu_632_p1 <= grp_fu_632_p10(5 - 1 downto 0);
    grp_fu_632_p10 <= std_logic_vector(resize(unsigned(i_op_assign_reg_367),49));
    grp_fu_911_ce <= ap_const_logic_1;
    grp_fu_911_p0 <= grp_fu_911_p00(49 - 1 downto 0);
    grp_fu_911_p00 <= std_logic_vector(resize(unsigned(r_V_reg_1705),69));
    grp_fu_911_p1 <= power_V_reg_1699;
    i_11_fu_1372_p2 <= std_logic_vector(unsigned(i_reg_394) + unsigned(ap_const_lv6_1));
    i_12_fu_1161_p2 <= std_logic_vector(unsigned(i_op_assign_reg_367) + unsigned(ap_const_lv5_1));

    -- inputLUT_V_address0 assign process. --
    inputLUT_V_address0_assign_proc : process(ap_sig_cseq_ST_st80_fsm_79, tmp_127_fu_1378_p1, ap_sig_cseq_ST_st81_fsm_80, tmp_144_fu_1397_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then 
            inputLUT_V_address0 <= tmp_144_fu_1397_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79)) then 
            inputLUT_V_address0 <= tmp_127_fu_1378_p1(6 - 1 downto 0);
        else 
            inputLUT_V_address0 <= "XXXXXX";
        end if; 
    end process;


    -- inputLUT_V_ce0 assign process. --
    inputLUT_V_ce0_assign_proc : process(ap_sig_cseq_ST_st80_fsm_79, ap_sig_cseq_ST_st81_fsm_80)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79) or (ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80))) then 
            inputLUT_V_ce0 <= ap_const_logic_1;
        else 
            inputLUT_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputLUT_V_load_1_cast_fu_1401_p1 <= std_logic_vector(resize(unsigned(inputLUT_V_q0),21));
    inputLUT_V_load_cast_fu_1383_p1 <= std_logic_vector(resize(unsigned(inputLUT_V_q0),21));
    isneg_6_fu_1518_p3 <= p_Val2_48_fu_1513_p2(20 downto 20);
    isneg_fu_495_p3 <= p_Val2_34_fu_489_p2(21 downto 21);
    logLUT_V_address0 <= tmp_127_reg_1858(6 - 1 downto 0);

    -- logLUT_V_ce0 assign process. --
    logLUT_V_ce0_assign_proc : process(ap_sig_cseq_ST_st81_fsm_80)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then 
            logLUT_V_ce0 <= ap_const_logic_1;
        else 
            logLUT_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neg_trg_10_fu_507_p3 <= p_Val2_34_fu_489_p2(20 downto 20);
    newsignbit_11_fu_736_p3 <= p_Val2_15_fu_731_p2(20 downto 20);
    newsignbit_12_fu_1025_p3 <= p_Val2_42_fu_1020_p2(20 downto 20);
    newsignbit_13_fu_1231_p3 <= p_Val2_39_fu_1225_p2(20 downto 20);
    newsignbit_fu_1466_p3 <= p_Val2_45_fu_1457_p2(20 downto 20);
    not_carry_5_fu_1049_p2 <= (newsignbit_12_fu_1025_p3 or p_Result_52_not_fu_1044_p2);
    not_carry_6_fu_1261_p2 <= (newsignbit_13_reg_1813 or p_Result_55_not_reg_1825);
    notlhs_fu_455_p2 <= "0" when (exp_V_s_fu_428_p2 = ap_const_lv11_7FF) else "1";
    notrhs_fu_461_p2 <= "1" when (tmp_172_fu_451_p1 = ap_const_lv52_0) else "0";
    offsetLUT_V_address0 <= tmp_127_reg_1858(6 - 1 downto 0);

    -- offsetLUT_V_ce0 assign process. --
    offsetLUT_V_ce0_assign_proc : process(ap_sig_cseq_ST_st82_fsm_81)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81)) then 
            offsetLUT_V_ce0 <= ap_const_logic_1;
        else 
            offsetLUT_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_10_fu_1296_p2 <= (brmerge_i_i1_fu_1291_p2 and tmp_140_fu_1270_p2);
    overflow_11_fu_1088_p2 <= (brmerge_i_i9_fu_1082_p2 and tmp_150_fu_1060_p2);
    overflow_8_fu_521_p2 <= (neg_trg_10_fu_507_p3 and tmp_122_fu_515_p2);
    overflow_9_fu_833_p2 <= (brmerge_i4_fu_823_p2 and tmp_133_fu_828_p2);
    overflow_fu_1496_p2 <= (tmp8_fu_1490_p2 or carry_fu_1480_p2);
    p_38_i2_fu_797_p2 <= (carry_4_fu_750_p2 and Range1_all_ones_fu_760_p2);
    p_38_i_i2_fu_1275_p2 <= (carry_6_reg_1820 and signbit_5_reg_1798);
    p_38_i_i_fu_1065_p2 <= (carry_5_fu_1039_p2 and signbit_4_reg_1746);
    p_41_i2_fu_783_p2 <= (Range2_all_ones_fu_755_p2 and tmp_131_fu_778_p2);
    p_Result_52_not_fu_1044_p2 <= (tmp_196_reg_1760 xor ap_const_lv1_1);
    p_Result_55_not_fu_1251_p2 <= (tmp_189_fu_1194_p3 xor ap_const_lv1_1);
    p_Result_s_fu_434_p5 <= (res_V_fu_415_p1(63 downto 63) & exp_V_s_fu_428_p2 & res_V_fu_415_p1(51 downto 0));
    p_Val2_15_fu_731_p2 <= std_logic_vector(unsigned(p_Val2_14_reg_1626) + unsigned(tmp_129_fu_727_p1));
    p_Val2_34_fu_489_p2 <= std_logic_vector(signed(tmp_121_fu_486_p1) + signed(ap_const_lv22_3F0000));
    p_Val2_35_fu_503_p1 <= p_Val2_34_fu_489_p2(21 - 1 downto 0);
    p_Val2_37_fu_1167_p2 <= std_logic_vector(signed(tmp_174_cast_reg_1720) + signed(tmp_175_cast_reg_1726));
    p_Val2_38_fu_1179_p4 <= p_Val2_37_fu_1167_p2(68 downto 48);
    p_Val2_39_fu_1225_p2 <= std_logic_vector(unsigned(p_Val2_38_fu_1179_p4) + unsigned(tmp_138_fu_1221_p1));
    p_Val2_40_fu_949_p2 <= std_logic_vector(signed(tmp_174_cast_reg_1720) - signed(tmp_175_cast_reg_1726));
    p_Val2_41_mux_fu_1352_p3 <= 
        ap_const_lv21_FFFFF when (brmerge_i_i_i4_fu_1334_p2(0) = '1') else 
        p_Val2_39_reg_1807;
    p_Val2_42_fu_1020_p2 <= std_logic_vector(unsigned(p_Val2_41_reg_1755) + unsigned(tmp_146_fu_1017_p1));
    p_Val2_44_mux_fu_573_p3 <= 
        ap_const_lv21_FFFFF when (brmerge_i_i_fu_555_p2(0) = '1') else 
        p_Val2_35_fu_503_p1;
    p_Val2_45_fu_1457_p2 <= std_logic_vector(unsigned(p_Val2_44_reg_1916) + unsigned(tmp_147_fu_1454_p1));
    p_Val2_46_fu_1502_p3 <= 
        ap_const_lv20_FFFFF when (overflow_fu_1496_p2(0) = '1') else 
        tmp_202_fu_1462_p1;
    p_Val2_48_fu_1513_p2 <= std_logic_vector(unsigned(p_Val2_47_reg_1906) + unsigned(p_Val2_68_cast_fu_1510_p1));
    p_Val2_50_mux_fu_883_p3 <= 
        ap_const_lv21_FFFFF when (brmerge_i_i8_fu_865_p2(0) = '1') else 
        p_Val2_15_reg_1667;
    p_Val2_59_mux_fu_1146_p3 <= 
        ap_const_lv21_FFFFF when (brmerge_i_i_i3_fu_1132_p2(0) = '1') else 
        p_Val2_42_reg_1771;
    p_Val2_68_cast_fu_1510_p1 <= std_logic_vector(resize(unsigned(p_Val2_46_reg_1936),21));
    p_Val2_6_fu_890_p3 <= 
        ap_const_lv21_100001 when (underflow_7_fu_860_p2(0) = '1') else 
        p_Val2_15_reg_1667;
    p_Val2_7_fu_1154_p3 <= 
        ap_const_lv21_100001 when (underflow_8_reg_1783(0) = '1') else 
        p_Val2_42_reg_1771;
    p_Val2_8_fu_1359_p3 <= 
        ap_const_lv21_100001 when (underflow_9_fu_1329_p2(0) = '1') else 
        p_Val2_39_reg_1807;
    p_Val2_s_41_fu_581_p3 <= 
        ap_const_lv21_100001 when (underflow_6_fu_549_p2(0) = '1') else 
        p_Val2_35_fu_503_p1;
    p_not_i3_fu_818_p2 <= (deleted_zeros_reg_1679 xor ap_const_lv1_1);
    p_not_i_i2_fu_1285_p2 <= (deleted_zeros_5_fu_1265_p2 xor ap_const_lv1_1);
    p_not_i_i_fu_1076_p2 <= (deleted_zeros_4_fu_1055_p2 xor ap_const_lv1_1);
    power_V_fu_897_p3 <= 
        p_Val2_50_mux_fu_883_p3 when (brmerge7_fu_877_p2(0) = '1') else 
        p_Val2_6_fu_890_p3;
    qb_assign_1_fu_1216_p2 <= (r_i_i_i2_fu_1210_p2 and qbit_7_reg_1736);
    qb_assign_2_fu_1011_p2 <= (r_i_i_i_fu_1005_p2 and qbit_6_fu_971_p3);
    qb_assign_s_fu_722_p2 <= (r_i_i3_fu_717_p2 and qbit_5_reg_1631);
    qbit_6_fu_971_p3 <= p_Val2_40_fu_949_p2(47 downto 47);
    r_5_fu_983_p2 <= "0" when (tmp_195_fu_979_p1 = ap_const_lv47_0) else "1";
    r_6_fu_1189_p2 <= "0" when (tmp_188_reg_1741 = ap_const_lv47_0) else "1";
    r_fu_712_p2 <= "0" when (tmp_179_reg_1636 = ap_const_lv15_0) else "1";
    r_i_i3_fu_717_p2 <= (tmp_181_reg_1646 or r_fu_712_p2);
    r_i_i_i2_fu_1210_p2 <= (tmp_190_fu_1202_p3 or r_6_fu_1189_p2);
    r_i_i_i_fu_1005_p2 <= (tmp_197_fu_997_p3 or r_5_fu_983_p2);
    res_V_fu_415_p1 <= dp_s_reg_1573;

    -- sum_V_phi_fu_383_p8 assign process. --
    sum_V_phi_fu_383_p8_assign_proc : process(p_Val2_7_fu_1154_p3, sum_V_reg_379, brmerge8_fu_1141_p2, p_Val2_59_mux_fu_1146_p3, ap_sig_bdd_1503)
    begin
        if (ap_sig_bdd_1503) then
            if (not((ap_const_lv1_0 = brmerge8_fu_1141_p2))) then 
                sum_V_phi_fu_383_p8 <= p_Val2_59_mux_fu_1146_p3;
            elsif ((ap_const_lv1_0 = brmerge8_fu_1141_p2)) then 
                sum_V_phi_fu_383_p8 <= p_Val2_7_fu_1154_p3;
            else 
                sum_V_phi_fu_383_p8 <= sum_V_reg_379;
            end if;
        else 
            sum_V_phi_fu_383_p8 <= sum_V_reg_379;
        end if; 
    end process;

    this_assign_1_fu_1542_p3 <= 
        ap_const_lv21_100001 when (underflow_fu_1536_p2(0) = '1') else 
        p_Val2_48_fu_1513_p2;
    tmp10_fu_1121_p2 <= (tmp_153_fu_1115_p2 and tmp_151_fu_1070_p2);
    tmp11_fu_1323_p2 <= (tmp_143_fu_1317_p2 and tmp_141_fu_1279_p2);
    tmp8_fu_1490_p2 <= (Range1_all_zeros_not_fu_1485_p2 or newsignbit_fu_1466_p3);
    tmp9_fu_854_p2 <= (tmp_135_fu_849_p2 and tmp_132_fu_813_p2);
    tmp_118_fu_467_p2 <= (notrhs_fu_461_p2 or notlhs_fu_455_p2);
    tmp_120_fu_481_p2 <= (tmp_118_reg_1583 and grp_fu_406_p2);
        tmp_121_fu_486_p1 <= std_logic_vector(resize(signed(WBSlave_log_in_V),22));

    tmp_122_fu_515_p2 <= (isneg_fu_495_p3 xor ap_const_lv1_1);
    tmp_123_fu_527_p2 <= (neg_trg_10_fu_507_p3 xor ap_const_lv1_1);
    tmp_124_fu_537_p2 <= "1" when (tmp_176_fu_533_p1 = ap_const_lv20_0) else "0";
    tmp_125_fu_543_p2 <= (tmp_124_fu_537_p2 or tmp_123_fu_527_p2);
    tmp_126_fu_1366_p2 <= "1" when (unsigned(i_reg_394) < unsigned(ap_const_lv6_23)) else "0";
    tmp_127_fu_1378_p1 <= std_logic_vector(resize(unsigned(i_reg_394),64));
    tmp_128_fu_1387_p2 <= "1" when (WBSlave_log_in_V = inputLUT_V_load_cast_fu_1383_p1) else "0";
    tmp_129_fu_727_p1 <= std_logic_vector(resize(unsigned(qb_assign_s_fu_722_p2),21));
    tmp_130_fu_744_p2 <= (newsignbit_11_fu_736_p3 xor ap_const_lv1_1);
    tmp_131_fu_778_p2 <= (tmp_183_reg_1651 xor ap_const_lv1_1);
    tmp_132_fu_813_p2 <= (p_38_i2_reg_1689 xor ap_const_lv1_1);
    tmp_133_fu_828_p2 <= (signbit_reg_1620 xor ap_const_lv1_1);
    tmp_134_fu_807_p2 <= "1" when (tmp_184_fu_803_p1 = ap_const_lv20_0) else "0";
    tmp_135_fu_849_p2 <= (tmp_134_reg_1694 or brmerge40_i2_fu_843_p2);
    tmp_136_fu_917_p3 <= (p_Val2_36_reg_343 & ap_const_lv48_0);
    tmp_137_fu_1392_p2 <= "1" when (signed(WBSlave_log_in_V) > signed(inputLUT_V_load_cast_fu_1383_p1)) else "0";
    tmp_138_fu_1221_p1 <= std_logic_vector(resize(unsigned(qb_assign_1_fu_1216_p2),21));
    tmp_139_fu_1239_p2 <= (newsignbit_13_fu_1231_p3 xor ap_const_lv1_1);
    tmp_140_fu_1270_p2 <= (signbit_5_reg_1798 xor ap_const_lv1_1);
    tmp_141_fu_1279_p2 <= (p_38_i_i2_fu_1275_p2 xor ap_const_lv1_1);
    tmp_142_fu_1312_p2 <= "1" when (tmp_192_reg_1830 = ap_const_lv20_0) else "0";
    tmp_143_fu_1317_p2 <= (tmp_142_fu_1312_p2 or brmerge40_i_i2_fu_1306_p2);
    tmp_144_fu_1397_p1 <= std_logic_vector(resize(unsigned(i_11_reg_1852),64));
    tmp_145_fu_1405_p2 <= "1" when (signed(WBSlave_log_in_V) < signed(inputLUT_V_load_1_cast_fu_1401_p1)) else "0";
    tmp_146_fu_1017_p1 <= std_logic_vector(resize(unsigned(qb_assign_2_reg_1766),21));
    tmp_147_fu_1454_p1 <= std_logic_vector(resize(unsigned(qbit_reg_1921),21));
    tmp_148_fu_1474_p2 <= (newsignbit_fu_1466_p3 xor ap_const_lv1_1);
    tmp_149_fu_1033_p2 <= (newsignbit_12_fu_1025_p3 xor ap_const_lv1_1);
    tmp_150_fu_1060_p2 <= (signbit_4_reg_1746 xor ap_const_lv1_1);
    tmp_151_fu_1070_p2 <= (p_38_i_i_fu_1065_p2 xor ap_const_lv1_1);
    tmp_152_fu_1109_p2 <= "1" when (tmp_199_fu_1105_p1 = ap_const_lv20_0) else "0";
    tmp_153_fu_1115_p2 <= (tmp_152_fu_1109_p2 or brmerge40_i_i_fu_1099_p2);
    tmp_155_fu_1530_p2 <= "1" when (tmp_205_fu_1526_p1 = ap_const_lv20_0) else "0";
    tmp_156_fu_1551_p2 <= (WBSlave_log_start_V_read_reg_1602 xor ap_const_lv1_1);
    tmp_172_fu_451_p1 <= res_V_fu_415_p1(52 - 1 downto 0);
        tmp_174_cast_fu_925_p1 <= std_logic_vector(resize(signed(tmp_136_fu_917_p3),70));

        tmp_175_cast_fu_929_p1 <= std_logic_vector(resize(signed(grp_fu_911_p2),70));

    tmp_176_fu_533_p1 <= p_Val2_34_fu_489_p2(20 - 1 downto 0);
    tmp_179_fu_664_p1 <= grp_fu_623_p2(15 - 1 downto 0);
    tmp_184_fu_803_p1 <= p_Val2_15_fu_731_p2(20 - 1 downto 0);
    tmp_185_fu_933_p1 <= i_op_assign_reg_367(1 - 1 downto 0);
    tmp_188_fu_945_p1 <= grp_fu_911_p2(47 - 1 downto 0);
    tmp_189_fu_1194_p3 <= p_Val2_37_fu_1167_p2(68 downto 68);
    tmp_190_fu_1202_p3 <= p_Val2_37_fu_1167_p2(48 downto 48);
    tmp_192_fu_1257_p1 <= p_Val2_39_fu_1225_p2(20 - 1 downto 0);
    tmp_195_fu_979_p1 <= p_Val2_40_fu_949_p2(47 - 1 downto 0);
    tmp_197_fu_997_p3 <= p_Val2_40_fu_949_p2(48 downto 48);
    tmp_199_fu_1105_p1 <= p_Val2_42_fu_1020_p2(20 - 1 downto 0);
    tmp_202_fu_1462_p1 <= p_Val2_45_fu_1457_p2(20 - 1 downto 0);
    tmp_205_fu_1526_p1 <= p_Val2_48_fu_1513_p2(20 - 1 downto 0);
    tmp_s_fu_473_p2 <= "1" when (WBSlave_log_in_V = ap_const_lv21_0) else "0";
    underflow_31_not_fu_561_p2 <= (underflow_6_fu_549_p2 xor ap_const_lv1_1);
    underflow_32_not_fu_871_p2 <= (underflow_7_fu_860_p2 xor ap_const_lv1_1);
    underflow_33_not_fu_1136_p2 <= (underflow_8_reg_1783 xor ap_const_lv1_1);
    underflow_34_not_fu_1340_p2 <= (underflow_9_fu_1329_p2 xor ap_const_lv1_1);
    underflow_6_fu_549_p2 <= (isneg_fu_495_p3 and tmp_125_fu_543_p2);
    underflow_7_fu_860_p2 <= (tmp9_fu_854_p2 and signbit_reg_1620);
    underflow_8_fu_1127_p2 <= (tmp10_fu_1121_p2 and signbit_4_reg_1746);
    underflow_9_fu_1329_p2 <= (tmp11_fu_1323_p2 and signbit_5_reg_1798);
    underflow_fu_1536_p2 <= (isneg_6_fu_1518_p3 and tmp_155_fu_1530_p2);
    x_V_fu_589_p3 <= 
        p_Val2_44_mux_fu_573_p3 when (brmerge6_fu_567_p2(0) = '1') else 
        p_Val2_s_41_fu_581_p3;
end behav;

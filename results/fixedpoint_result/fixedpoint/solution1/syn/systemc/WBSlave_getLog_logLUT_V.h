// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __WBSlave_getLog_logLUT_V_H__
#define __WBSlave_getLog_logLUT_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct WBSlave_getLog_logLUT_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 21;
  static const unsigned AddressRange = 36;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(WBSlave_getLog_logLUT_V_ram) {
        ram[0] = "0b101001110100011011111";
        ram[1] = "0b101011001101001010001";
        ram[2] = "0b101100100101111000011";
        ram[3] = "0b101101011001110001111";
        ram[4] = "0b101101111110100110101";
        ram[5] = "0b101110110010100000001";
        ram[6] = "0b101111010111010100111";
        ram[7] = "0b110000001011001110011";
        ram[8] = "0b110000110000000011001";
        ram[9] = "0b110001100011111100101";
        ram[10] = "0b110010001000110001011";
        ram[11] = "0b110010111100101010111";
        ram[12] = "0b110011100001011111101";
        ram[13] = "0b110100000001000101111";
        ram[14] = "0b110100010101011001010";
        ram[15] = "0b110100101100001010010";
        ram[16] = "0b110100111010001101111";
        ram[17] = "0b110101001100010101001";
        ram[18] = "0b110101101110000111100";
        ram[19] = "0b110101110001001001110";
        ram[20] = "0b110110010010111100001";
        ram[21] = "0b110110100101000011011";
        ram[22] = "0b110111000110110101110";
        ram[23] = "0b110111001001111000000";
        ram[24] = "0b110111101011101010011";
        ram[25] = "0b110111111101110001101";
        ram[26] = "0b111000011111100100000";
        ram[27] = "0b111000110100000001100";
        ram[28] = "0b111001000100011000110";
        ram[29] = "0b111001100011111111000";
        ram[30] = "0b111001111000010010010";
        ram[31] = "0b111010000000100011000";
        ram[32] = "0b111010011101000111000";
        ram[33] = "0b111010111100101101010";
        ram[34] = "0b111011010001000000100";
        ram[35] = "0b111011011001010001010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(WBSlave_getLog_logLUT_V) {


static const unsigned DataWidth = 21;
static const unsigned AddressRange = 36;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


WBSlave_getLog_logLUT_V_ram* meminst;


SC_CTOR(WBSlave_getLog_logLUT_V) {
meminst = new WBSlave_getLog_logLUT_V_ram("WBSlave_getLog_logLUT_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~WBSlave_getLog_logLUT_V() {
    delete meminst;
}


};//endmodule
#endif

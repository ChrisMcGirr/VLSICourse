// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __WBSlave_getLog_gradientLUT_V_H__
#define __WBSlave_getLog_gradientLUT_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct WBSlave_getLog_gradientLUT_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 31;
  static const unsigned AddressRange = 36;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(WBSlave_getLog_gradientLUT_V_ram) {
        ram[0] = "0b1111111111111111111111111111111";
        ram[1] = "0b1011000101110010000110000011011";
        ram[2] = "0b0101100010111001000011000001101";
        ram[3] = "0b0011101100100110000010000001001";
        ram[4] = "0b0010110001011100100001100000111";
        ram[5] = "0b0001110110010011000001000000100";
        ram[6] = "0b0001011000101110010001010001011";
        ram[7] = "0b0000111011001001100000101110111";
        ram[8] = "0b0000101100010111001000110101110";
        ram[9] = "0b0000011101100100110000100000111";
        ram[10] = "0b0000010110001011100100001010010";
        ram[11] = "0b0000001110110010011000001010100";
        ram[12] = "0b0000001011000101110010000010110";
        ram[13] = "0b0000001001001011110010010110001";
        ram[14] = "0b0000000111011001001100000010011";
        ram[15] = "0b0000000110101111001100100111110";
        ram[16] = "0b0000000101100010111001000011000";
        ram[17] = "0b0000000100110100000100001011111";
        ram[18] = "0b0000000011101100100110000001101";
        ram[19] = "0b0000000011100111000011001001000";
        ram[20] = "0b0000000010110001011100100001100";
        ram[21] = "0b0000000010011010000010000110000";
        ram[22] = "0b0000000001110110010011000001000";
        ram[23] = "0b0000000001101011000000001111100";
        ram[24] = "0b0000000001011000101110010000110";
        ram[25] = "0b0000000001001000100101110111010";
        ram[26] = "0b0000000000111011001001100000100";
        ram[27] = "0b0000000000110101001001000001110";
        ram[28] = "0b0000000000101100010111001000011";
        ram[29] = "0b0000000000100010101010000100100";
        ram[30] = "0b0000000000011101100100110000010";
        ram[31] = "0b0000000000011011101110011101010";
        ram[32] = "0b0000000000010111110011010111110";
        ram[33] = "0b0000000000010011110101011100001";
        ram[34] = "0b0000000000001100100011011111110";
        ram[35] = "0b0000000000001011111100011010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(WBSlave_getLog_gradientLUT_V) {


static const unsigned DataWidth = 31;
static const unsigned AddressRange = 36;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


WBSlave_getLog_gradientLUT_V_ram* meminst;


SC_CTOR(WBSlave_getLog_gradientLUT_V) {
meminst = new WBSlave_getLog_gradientLUT_V_ram("WBSlave_getLog_gradientLUT_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~WBSlave_getLog_gradientLUT_V() {
    delete meminst;
}


};//endmodule
#endif

// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __WBSlave_getLog_gradientLUT_H__
#define __WBSlave_getLog_gradientLUT_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct WBSlave_getLog_gradientLUT_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 36;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(WBSlave_getLog_gradientLUT_ram) {
        ram[0] = "0b01000111001100010111001000011000";
        ram[1] = "0b01000110101100010111001000011000";
        ram[2] = "0b01000110001100010111001000011000";
        ram[3] = "0b01000101111011001001100000100000";
        ram[4] = "0b01000101101100010111001000011000";
        ram[5] = "0b01000101011011001001100000100000";
        ram[6] = "0b01000101001100010111001000101001";
        ram[7] = "0b01000100111011001001100000101111";
        ram[8] = "0b01000100101100010111001000110110";
        ram[9] = "0b01000100011011001001100001000010";
        ram[10] = "0b01000100001100010111001000010101";
        ram[11] = "0b01000011111011001001100000101010";
        ram[12] = "0b01000011101100010111001000001011";
        ram[13] = "0b01000011100100101111001001011001";
        ram[14] = "0b01000011011011001001100000010011";
        ram[15] = "0b01000011010101111001100100111110";
        ram[16] = "0b01000011001100010111001000011000";
        ram[17] = "0b01000011000110100000100001011111";
        ram[18] = "0b01000010111011001001100000011010";
        ram[19] = "0b01000010111001110000110010001111";
        ram[20] = "0b01000010101100010111001000011000";
        ram[21] = "0b01000010100110100000100001011111";
        ram[22] = "0b01000010011011001001100000100000";
        ram[23] = "0b01000010010101100000000111110000";
        ram[24] = "0b01000010001100010111001000011000";
        ram[25] = "0b01000010000100010010111011100111";
        ram[26] = "0b01000001111011001001100000100000";
        ram[27] = "0b01000001110101001001000001110100";
        ram[28] = "0b01000001101100010111001000011000";
        ram[29] = "0b01000001100010101010000100100011";
        ram[30] = "0b01000001011011001001100000100000";
        ram[31] = "0b01000001010111011100111010011110";
        ram[32] = "0b01000001001111100110101111100111";
        ram[33] = "0b01000001000111101010111000001011";
        ram[34] = "0b01000000110010001101111110110011";
        ram[35] = "0b01000000101111110001101000110000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(WBSlave_getLog_gradientLUT) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 36;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


WBSlave_getLog_gradientLUT_ram* meminst;


SC_CTOR(WBSlave_getLog_gradientLUT) {
meminst = new WBSlave_getLog_gradientLUT_ram("WBSlave_getLog_gradientLUT_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~WBSlave_getLog_gradientLUT() {
    delete meminst;
}


};//endmodule
#endif

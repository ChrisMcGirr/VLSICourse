-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity WBSlave_getLog is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    WBSlave_log_in : IN STD_LOGIC_VECTOR (31 downto 0);
    WBSlave_log_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBSlave_log_out_ap_vld : OUT STD_LOGIC;
    WBSlave_log_start_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    WBSlave_log_start_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    WBSlave_log_start_V_o_ap_vld : OUT STD_LOGIC;
    WBSlave_log_done_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    WBSlave_log_done_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of WBSlave_getLog is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (65 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (65 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (65 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (65 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (65 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (65 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (65 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (65 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (65 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (65 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (65 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_3FB999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal inputLUT_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal inputLUT_ce0 : STD_LOGIC;
    signal inputLUT_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal logLUT_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal logLUT_ce0 : STD_LOGIC;
    signal logLUT_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gradientLUT_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal gradientLUT_ce0 : STD_LOGIC;
    signal gradientLUT_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal offsetLUT_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal offsetLUT_ce0 : STD_LOGIC;
    signal offsetLUT_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_117 : BOOLEAN;
    signal ap_sig_cseq_ST_st57_fsm_56 : STD_LOGIC;
    signal ap_sig_bdd_125 : BOOLEAN;
    signal WBSlave_log_start_V_read_read_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal WBSlave_log_start_V_read_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_157 : BOOLEAN;
    signal tmp_69_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal WBSlave_log_in_load_to_int_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBSlave_log_in_load_to_int_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_168 : BOOLEAN;
    signal tmp_71_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs7_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs7_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal grp_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_192 : BOOLEAN;
    signal power_1_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_209 : BOOLEAN;
    signal tmp_64_fu_447_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_2_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_219 : BOOLEAN;
    signal i_12_fu_451_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal sum_3_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_236 : BOOLEAN;
    signal tmp_s_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_245 : BOOLEAN;
    signal i_11_fu_463_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_11_reg_675 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_66_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_reg_681 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputLUT_load_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_264 : BOOLEAN;
    signal tmp_82_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_704 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_273 : BOOLEAN;
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_299 : BOOLEAN;
    signal tmp_88_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_310 : BOOLEAN;
    signal tmp_90_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_327 : BOOLEAN;
    signal offsetLUT_load_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_273 : STD_LOGIC_VECTOR (4 downto 0);
    signal power_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_phi_fu_314_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_321 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_356 : BOOLEAN;
    signal exitcond_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_bdd_367 : BOOLEAN;
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_375 : BOOLEAN;
    signal ap_sig_cseq_ST_st66_fsm_65 : STD_LOGIC;
    signal ap_sig_bdd_383 : BOOLEAN;
    signal tmp_81_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_bdd_395 : BOOLEAN;
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_408 : BOOLEAN;
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_415 : BOOLEAN;
    signal ap_sig_cseq_ST_st58_fsm_57 : STD_LOGIC;
    signal ap_sig_bdd_423 : BOOLEAN;
    signal grp_fu_340_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_432 : BOOLEAN;
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_441 : BOOLEAN;
    signal grp_fu_351_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_355_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_359_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_370_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_to_int_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_391_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_fu_401_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_431_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_74_fu_474_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal notlhs6_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputLUT_load_to_int_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_497_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_507_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputLUT_load_1_to_int_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_543_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_553_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_333_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_333_ce : STD_LOGIC;
    signal grp_fu_340_ce : STD_LOGIC;
    signal grp_fu_346_ce : STD_LOGIC;
    signal grp_fu_351_ce : STD_LOGIC;
    signal grp_fu_355_ce : STD_LOGIC;
    signal grp_fu_359_ce : STD_LOGIC;
    signal grp_fu_359_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_364_ce : STD_LOGIC;
    signal grp_fu_364_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (65 downto 0);

    component WBSlave_faddfsub_32ns_32ns_32_4_no_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WBSlave_fmul_32ns_32ns_32_7_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WBSlave_fdiv_32ns_32ns_32_10 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WBSlave_uitofp_5ns_32_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WBSlave_fpext_32ns_64_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component WBSlave_fcmp_32ns_32ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component WBSlave_dcmp_64ns_64ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component WBSlave_getLog_inputLUT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WBSlave_getLog_logLUT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WBSlave_getLog_gradientLUT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component WBSlave_getLog_offsetLUT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    inputLUT_U : component WBSlave_getLog_inputLUT
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputLUT_address0,
        ce0 => inputLUT_ce0,
        q0 => inputLUT_q0);

    logLUT_U : component WBSlave_getLog_logLUT
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => logLUT_address0,
        ce0 => logLUT_ce0,
        q0 => logLUT_q0);

    gradientLUT_U : component WBSlave_getLog_gradientLUT
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradientLUT_address0,
        ce0 => gradientLUT_ce0,
        q0 => gradientLUT_q0);

    offsetLUT_U : component WBSlave_getLog_offsetLUT
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => offsetLUT_address0,
        ce0 => offsetLUT_ce0,
        q0 => offsetLUT_q0);

    WBSlave_faddfsub_32ns_32ns_32_4_no_dsp_U1 : component WBSlave_faddfsub_32ns_32ns_32_4_no_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        din1 => grp_fu_333_p1,
        opcode => grp_fu_333_opcode,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p2);

    WBSlave_fmul_32ns_32ns_32_7_max_dsp_U2 : component WBSlave_fmul_32ns_32ns_32_7_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_340_p0,
        din1 => grp_fu_340_p1,
        ce => grp_fu_340_ce,
        dout => grp_fu_340_p2);

    WBSlave_fdiv_32ns_32ns_32_10_U3 : component WBSlave_fdiv_32ns_32ns_32_10
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        ce => grp_fu_346_ce,
        dout => grp_fu_346_p2);

    WBSlave_uitofp_5ns_32_4_U4 : component WBSlave_uitofp_5ns_32_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_351_p0,
        ce => grp_fu_351_ce,
        dout => grp_fu_351_p1);

    WBSlave_fpext_32ns_64_3_U5 : component WBSlave_fpext_32ns_64_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_355_p0,
        ce => grp_fu_355_ce,
        dout => grp_fu_355_p1);

    WBSlave_fcmp_32ns_32ns_1_3_U6 : component WBSlave_fcmp_32ns_32ns_1_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_359_p0,
        din1 => grp_fu_359_p1,
        ce => grp_fu_359_ce,
        opcode => grp_fu_359_opcode,
        dout => grp_fu_359_p2);

    WBSlave_dcmp_64ns_64ns_1_3_U7 : component WBSlave_dcmp_64ns_64ns_1_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_364_p0,
        din1 => grp_fu_364_p1,
        ce => grp_fu_364_ce,
        opcode => grp_fu_364_opcode,
        dout => grp_fu_364_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st2_fsm_1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_1_reg_273 assign process. --
    i_1_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                i_1_reg_273 <= i_12_fu_451_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                i_1_reg_273 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    -- i_reg_321 assign process. --
    i_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_71_fu_423_p2)))) then 
                i_reg_321 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) and ((ap_const_lv1_0 = tmp_86_reg_718) or (ap_const_lv1_0 = tmp_90_fu_575_p2)))) then 
                i_reg_321 <= i_11_reg_675;
            end if; 
        end if;
    end process;

    -- power_reg_285 assign process. --
    power_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                power_reg_285 <= power_1_reg_641;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                power_reg_285 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    -- sum_reg_297 assign process. --
    sum_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                sum_reg_297 <= sum_1_phi_fu_314_p4;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                sum_reg_297 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_71_fu_423_p2)))) then
                WBSlave_log_in_load_to_int_reg_618 <= WBSlave_log_in_load_to_int_fu_428_p1;
                notrhs7_reg_623 <= notrhs7_fu_435_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((WBSlave_log_start_V_read_read_fu_196_p2 = ap_const_lv1_0)))) then
                WBSlave_log_start_V_read_reg_591 <= WBSlave_log_start_V_i;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then
                i_11_reg_675 <= i_11_fu_463_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then
                inputLUT_load_reg_698 <= inputLUT_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then
                offsetLUT_load_reg_755 <= offsetLUT_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                power_1_reg_641 <= grp_fu_340_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56))) then
                reg_375 <= grp_fu_340_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then
                sum_2_reg_656 <= grp_fu_333_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then
                sum_3_reg_666 <= grp_fu_333_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                tmp_64_reg_652 <= tmp_64_fu_447_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) and not((ap_const_lv1_0 = tmp_s_fu_457_p2)))) then
                tmp_66_reg_681(0) <= tmp_66_fu_469_p1(0);
    tmp_66_reg_681(1) <= tmp_66_fu_469_p1(1);
    tmp_66_reg_681(2) <= tmp_66_fu_469_p1(2);
    tmp_66_reg_681(3) <= tmp_66_fu_469_p1(3);
    tmp_66_reg_681(4) <= tmp_66_fu_469_p1(4);
    tmp_66_reg_681(5) <= tmp_66_fu_469_p1(5);
                tmp_76_reg_693 <= tmp_76_fu_489_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_69_reg_610 <= tmp_69_fu_417_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                tmp_72_reg_636 <= grp_fu_351_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then
                tmp_73_reg_647 <= grp_fu_346_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then
                tmp_82_reg_704 <= tmp_82_fu_529_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then
                tmp_86_reg_718 <= grp_fu_370_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                tmp_88_reg_732 <= tmp_88_fu_569_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                x_reg_628 <= grp_fu_333_p2;
            end if;
        end if;
    end process;
    tmp_66_reg_681(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, WBSlave_log_start_V_read_read_fu_196_p2, tmp_71_fu_423_p2, tmp_64_fu_447_p1, tmp_s_fu_457_p2, grp_fu_370_p2, tmp_86_reg_718, tmp_90_fu_575_p2, exitcond_fu_441_p2, tmp_81_fu_580_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st2_fsm_1 => 
                if (not((WBSlave_log_start_V_read_read_fu_196_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = tmp_71_fu_423_p2))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_lv1_0 = exitcond_fu_441_p2))) then
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                if (not((ap_const_lv1_0 = tmp_64_fu_447_p1))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st42_fsm_41 => 
                if ((ap_const_lv1_0 = tmp_s_fu_457_p2)) then
                    ap_NS_fsm <= ap_ST_st63_fsm_62;
                else
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                end if;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                if (not((ap_const_lv1_0 = grp_fu_370_p2))) then
                    ap_NS_fsm <= ap_ST_st64_fsm_63;
                else
                    ap_NS_fsm <= ap_ST_st46_fsm_45;
                end if;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                if ((ap_const_lv1_0 = grp_fu_370_p2)) then
                    ap_NS_fsm <= ap_ST_st50_fsm_49;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                end if;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                if (((ap_const_lv1_0 = tmp_86_reg_718) or (ap_const_lv1_0 = tmp_90_fu_575_p2))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                else
                    ap_NS_fsm <= ap_ST_st51_fsm_50;
                end if;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st66_fsm_65 => 
                if (not((tmp_81_fu_580_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st66_fsm_65;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- WBSlave_log_done_V assign process. --
    WBSlave_log_done_V_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_441_p2, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st64_fsm_63, ap_sig_cseq_ST_st66_fsm_65, tmp_81_fu_580_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65) and not((tmp_81_fu_580_p2 = ap_const_lv1_0)))) then 
            WBSlave_log_done_V <= ap_const_lv1_0;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_441_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then 
            WBSlave_log_done_V <= ap_const_lv1_1;
        else 
            WBSlave_log_done_V <= "X";
        end if; 
    end process;


    -- WBSlave_log_done_V_ap_vld assign process. --
    WBSlave_log_done_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_441_p2, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st64_fsm_63, ap_sig_cseq_ST_st66_fsm_65, tmp_81_fu_580_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_441_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63) or ((ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65) and not((tmp_81_fu_580_p2 = ap_const_lv1_0))))) then 
            WBSlave_log_done_V_ap_vld <= ap_const_logic_1;
        else 
            WBSlave_log_done_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    WBSlave_log_in_load_to_int_fu_428_p1 <= WBSlave_log_in;

    -- WBSlave_log_out assign process. --
    WBSlave_log_out_assign_proc : process(logLUT_q0, grp_fu_333_p2, sum_reg_297, ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_441_p2, ap_sig_cseq_ST_st64_fsm_63, ap_sig_cseq_ST_st61_fsm_60)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            WBSlave_log_out <= logLUT_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then 
            WBSlave_log_out <= grp_fu_333_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_441_p2)))) then 
            WBSlave_log_out <= sum_reg_297;
        else 
            WBSlave_log_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- WBSlave_log_out_ap_vld assign process. --
    WBSlave_log_out_ap_vld_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_441_p2, ap_sig_cseq_ST_st64_fsm_63, ap_sig_cseq_ST_st61_fsm_60)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_441_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63) or (ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60))) then 
            WBSlave_log_out_ap_vld <= ap_const_logic_1;
        else 
            WBSlave_log_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    WBSlave_log_start_V_o <= ap_const_lv1_0;
    WBSlave_log_start_V_o_ap_vld <= ap_const_logic_0;
    WBSlave_log_start_V_read_read_fu_196_p2 <= WBSlave_log_start_V_i;

    -- ap_sig_bdd_117 assign process. --
    ap_sig_bdd_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_117 <= (ap_CS_fsm(30 downto 30) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_125 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_157 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_168 assign process. --
    ap_sig_bdd_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_168 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_192 assign process. --
    ap_sig_bdd_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_192 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_209 assign process. --
    ap_sig_bdd_209_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_209 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_219 assign process. --
    ap_sig_bdd_219_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_219 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_236 assign process. --
    ap_sig_bdd_236_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_236 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_245 assign process. --
    ap_sig_bdd_245_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_245 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_264 assign process. --
    ap_sig_bdd_264_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_264 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_273 assign process. --
    ap_sig_bdd_273_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_273 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_288 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    -- ap_sig_bdd_299 assign process. --
    ap_sig_bdd_299_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_299 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_310 assign process. --
    ap_sig_bdd_310_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_310 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_327 assign process. --
    ap_sig_bdd_327_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_327 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_356 assign process. --
    ap_sig_bdd_356_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_356 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_367 assign process. --
    ap_sig_bdd_367_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_367 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    -- ap_sig_bdd_375 assign process. --
    ap_sig_bdd_375_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_375 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_383 assign process. --
    ap_sig_bdd_383_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_383 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    -- ap_sig_bdd_395 assign process. --
    ap_sig_bdd_395_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_395 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    -- ap_sig_bdd_408 assign process. --
    ap_sig_bdd_408_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_408 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_415 assign process. --
    ap_sig_bdd_415_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_415 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_423 assign process. --
    ap_sig_bdd_423_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_423 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    -- ap_sig_bdd_432 assign process. --
    ap_sig_bdd_432_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_432 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_441 assign process. --
    ap_sig_bdd_441_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_441 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_356)
    begin
        if (ap_sig_bdd_356) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_192)
    begin
        if (ap_sig_bdd_192) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_441)
    begin
        if (ap_sig_bdd_441) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_209)
    begin
        if (ap_sig_bdd_209) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_432)
    begin
        if (ap_sig_bdd_432) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_117)
    begin
        if (ap_sig_bdd_117) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_408)
    begin
        if (ap_sig_bdd_408) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_219)
    begin
        if (ap_sig_bdd_219) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_415)
    begin
        if (ap_sig_bdd_415) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_236)
    begin
        if (ap_sig_bdd_236) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_245)
    begin
        if (ap_sig_bdd_245) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st43_fsm_42 assign process. --
    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_bdd_264)
    begin
        if (ap_sig_bdd_264) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_273)
    begin
        if (ap_sig_bdd_273) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st47_fsm_46 assign process. --
    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_bdd_288)
    begin
        if (ap_sig_bdd_288) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_47 assign process. --
    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_bdd_299)
    begin
        if (ap_sig_bdd_299) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_310)
    begin
        if (ap_sig_bdd_310) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_50 assign process. --
    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_bdd_327)
    begin
        if (ap_sig_bdd_327) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st57_fsm_56 assign process. --
    ap_sig_cseq_ST_st57_fsm_56_assign_proc : process(ap_sig_bdd_125)
    begin
        if (ap_sig_bdd_125) then 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st58_fsm_57 assign process. --
    ap_sig_cseq_ST_st58_fsm_57_assign_proc : process(ap_sig_bdd_423)
    begin
        if (ap_sig_bdd_423) then 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_157)
    begin
        if (ap_sig_bdd_157) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st61_fsm_60 assign process. --
    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_bdd_395)
    begin
        if (ap_sig_bdd_395) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st62_fsm_61 assign process. --
    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_bdd_367)
    begin
        if (ap_sig_bdd_367) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st64_fsm_63 assign process. --
    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_bdd_375)
    begin
        if (ap_sig_bdd_375) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st66_fsm_65 assign process. --
    ap_sig_cseq_ST_st66_fsm_65_assign_proc : process(ap_sig_bdd_383)
    begin
        if (ap_sig_bdd_383) then 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_168)
    begin
        if (ap_sig_bdd_168) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_441_p2 <= "1" when (i_1_reg_273 = ap_const_lv5_11) else "0";
    gradientLUT_address0 <= tmp_66_reg_681(6 - 1 downto 0);

    -- gradientLUT_ce0 assign process. --
    gradientLUT_ce0_assign_proc : process(ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            gradientLUT_ce0 <= ap_const_logic_1;
        else 
            gradientLUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_333_ce <= ap_const_logic_1;

    -- grp_fu_333_opcode assign process. --
    grp_fu_333_opcode_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_71_fu_423_p2, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st58_fsm_57)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            grp_fu_333_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_71_fu_423_p2)))) then 
            grp_fu_333_opcode <= ap_const_lv2_0;
        else 
            grp_fu_333_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_333_p0 assign process. --
    grp_fu_333_p0_assign_proc : process(WBSlave_log_in, reg_375, ap_sig_cseq_ST_st7_fsm_6, sum_reg_297, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st58_fsm_57)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
            grp_fu_333_p0 <= reg_375;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            grp_fu_333_p0 <= sum_reg_297;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_333_p0 <= WBSlave_log_in;
        else 
            grp_fu_333_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_333_p1 assign process. --
    grp_fu_333_p1_assign_proc : process(reg_375, ap_sig_cseq_ST_st7_fsm_6, offsetLUT_load_reg_755, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st58_fsm_57)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57)) then 
            grp_fu_333_p1 <= offsetLUT_load_reg_755;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            grp_fu_333_p1 <= reg_375;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_333_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_333_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_340_ce <= ap_const_logic_1;

    -- grp_fu_340_p0 assign process. --
    grp_fu_340_p0_assign_proc : process(gradientLUT_q0, tmp_73_reg_647, ap_sig_cseq_ST_st51_fsm_50, power_reg_285, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_fu_340_p0 <= gradientLUT_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_340_p0 <= tmp_73_reg_647;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            grp_fu_340_p0 <= power_reg_285;
        else 
            grp_fu_340_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_340_p1 assign process. --
    grp_fu_340_p1_assign_proc : process(WBSlave_log_in, x_reg_628, power_1_reg_641, ap_sig_cseq_ST_st51_fsm_50, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_fu_340_p1 <= WBSlave_log_in;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_340_p1 <= power_1_reg_641;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            grp_fu_340_p1 <= x_reg_628;
        else 
            grp_fu_340_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_346_ce <= ap_const_logic_1;
    grp_fu_346_p0 <= ap_const_lv32_3F800000;
    grp_fu_346_p1 <= tmp_72_reg_636;
    grp_fu_351_ce <= ap_const_logic_1;
    grp_fu_351_p0 <= i_1_reg_273;
    grp_fu_355_ce <= ap_const_logic_1;
    grp_fu_355_p0 <= WBSlave_log_in;
    grp_fu_359_ce <= ap_const_logic_1;

    -- grp_fu_359_opcode assign process. --
    grp_fu_359_opcode_assign_proc : process(ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st45_fsm_44, grp_fu_370_p2, ap_sig_cseq_ST_st48_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            grp_fu_359_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) and (ap_const_lv1_0 = grp_fu_370_p2))) then 
            grp_fu_359_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            grp_fu_359_opcode <= ap_const_lv5_1;
        else 
            grp_fu_359_opcode <= "XXXXX";
        end if; 
    end process;

    grp_fu_359_p0 <= WBSlave_log_in;

    -- grp_fu_359_p1 assign process. --
    grp_fu_359_p1_assign_proc : process(inputLUT_q0, inputLUT_load_reg_698, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st48_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then 
            grp_fu_359_p1 <= inputLUT_load_reg_698;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47))) then 
            grp_fu_359_p1 <= inputLUT_q0;
        else 
            grp_fu_359_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_364_ce <= ap_const_logic_1;
    grp_fu_364_opcode <= ap_const_lv5_4;
    grp_fu_364_p0 <= grp_fu_355_p1;
    grp_fu_364_p1 <= ap_const_lv64_3FB999999999999A;

    -- grp_fu_370_p0 assign process. --
    grp_fu_370_p0_assign_proc : process(tmp_82_fu_529_p2, tmp_82_reg_704, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st47_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            grp_fu_370_p0 <= tmp_82_reg_704;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then 
            grp_fu_370_p0 <= tmp_82_fu_529_p2;
        else 
            grp_fu_370_p0 <= "X";
        end if; 
    end process;

    grp_fu_370_p2 <= (grp_fu_370_p0 and grp_fu_359_p2);
    i_11_fu_463_p2 <= std_logic_vector(unsigned(i_reg_321) + unsigned(ap_const_lv6_1));
    i_12_fu_451_p2 <= std_logic_vector(unsigned(i_1_reg_273) + unsigned(ap_const_lv5_1));

    -- inputLUT_address0 assign process. --
    inputLUT_address0_assign_proc : process(ap_sig_cseq_ST_st42_fsm_41, tmp_66_fu_469_p1, ap_sig_cseq_ST_st47_fsm_46, tmp_68_fu_535_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            inputLUT_address0 <= tmp_68_fu_535_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
            inputLUT_address0 <= tmp_66_fu_469_p1(6 - 1 downto 0);
        else 
            inputLUT_address0 <= "XXXXXX";
        end if; 
    end process;


    -- inputLUT_ce0 assign process. --
    inputLUT_ce0_assign_proc : process(ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st47_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) or (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46))) then 
            inputLUT_ce0 <= ap_const_logic_1;
        else 
            inputLUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputLUT_load_1_to_int_fu_539_p1 <= inputLUT_q0;
    inputLUT_load_to_int_fu_494_p1 <= inputLUT_load_reg_698;
    logLUT_address0 <= tmp_66_reg_681(6 - 1 downto 0);

    -- logLUT_ce0 assign process. --
    logLUT_ce0_assign_proc : process(ap_sig_cseq_ST_st45_fsm_44)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then 
            logLUT_ce0 <= ap_const_logic_1;
        else 
            logLUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs1_fu_557_p2 <= "0" when (tmp_87_fu_543_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_483_p2 <= "0" when (tmp_74_fu_474_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_511_p2 <= "0" when (tmp_75_fu_497_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_405_p2 <= "0" when (tmp_67_fu_391_p4 = ap_const_lv11_7FF) else "1";
    notrhs1_fu_563_p2 <= "1" when (tmp_65_fu_553_p1 = ap_const_lv23_0) else "0";
    notrhs7_fu_435_p2 <= "1" when (tmp_62_fu_431_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_517_p2 <= "1" when (tmp_63_fu_507_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_411_p2 <= "1" when (tmp_61_fu_401_p1 = ap_const_lv52_0) else "0";
    offsetLUT_address0 <= tmp_66_reg_681(6 - 1 downto 0);

    -- offsetLUT_ce0 assign process. --
    offsetLUT_ce0_assign_proc : process(ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            offsetLUT_ce0 <= ap_const_logic_1;
        else 
            offsetLUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_1_phi_fu_314_p4 assign process. --
    sum_1_phi_fu_314_p4_assign_proc : process(tmp_64_reg_652, sum_2_reg_656, ap_sig_cseq_ST_st36_fsm_35, sum_3_reg_666)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then
            if (not((ap_const_lv1_0 = tmp_64_reg_652))) then 
                sum_1_phi_fu_314_p4 <= sum_3_reg_666;
            elsif ((ap_const_lv1_0 = tmp_64_reg_652)) then 
                sum_1_phi_fu_314_p4 <= sum_2_reg_656;
            else 
                sum_1_phi_fu_314_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            sum_1_phi_fu_314_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_61_fu_401_p1 <= tmp_to_int_fu_387_p1(52 - 1 downto 0);
    tmp_62_fu_431_p1 <= WBSlave_log_in_load_to_int_fu_428_p1(23 - 1 downto 0);
    tmp_63_fu_507_p1 <= inputLUT_load_to_int_fu_494_p1(23 - 1 downto 0);
    tmp_64_fu_447_p1 <= i_1_reg_273(1 - 1 downto 0);
    tmp_65_fu_553_p1 <= inputLUT_load_1_to_int_fu_539_p1(23 - 1 downto 0);
    tmp_66_fu_469_p1 <= std_logic_vector(resize(unsigned(i_reg_321),64));
    tmp_67_fu_391_p4 <= tmp_to_int_fu_387_p1(62 downto 52);
    tmp_68_fu_535_p1 <= std_logic_vector(resize(unsigned(i_11_reg_675),64));
    tmp_69_fu_417_p2 <= (notrhs_fu_411_p2 or notlhs_fu_405_p2);
    tmp_71_fu_423_p2 <= (tmp_69_reg_610 and grp_fu_364_p2);
    tmp_74_fu_474_p4 <= WBSlave_log_in_load_to_int_reg_618(30 downto 23);
    tmp_75_fu_497_p4 <= inputLUT_load_to_int_fu_494_p1(30 downto 23);
    tmp_76_fu_489_p2 <= (notrhs7_reg_623 or notlhs6_fu_483_p2);
    tmp_77_fu_523_p2 <= (notrhs9_fu_517_p2 or notlhs8_fu_511_p2);
    tmp_81_fu_580_p2 <= (WBSlave_log_start_V_read_reg_591 xor ap_const_lv1_1);
    tmp_82_fu_529_p2 <= (tmp_76_reg_693 and tmp_77_fu_523_p2);
    tmp_87_fu_543_p4 <= inputLUT_load_1_to_int_fu_539_p1(30 downto 23);
    tmp_88_fu_569_p2 <= (notrhs1_fu_563_p2 or notlhs1_fu_557_p2);
    tmp_90_fu_575_p2 <= (tmp_88_reg_732 and grp_fu_359_p2);
    tmp_s_fu_457_p2 <= "1" when (unsigned(i_reg_321) < unsigned(ap_const_lv6_23)) else "0";
    tmp_to_int_fu_387_p1 <= grp_fu_355_p1;
end behav;

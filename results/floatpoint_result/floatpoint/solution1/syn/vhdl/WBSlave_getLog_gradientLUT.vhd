-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity WBSlave_getLog_gradientLUT_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 36
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of WBSlave_getLog_gradientLUT_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "01000111001100010111001000011000", 
    1 => "01000110101100010111001000011000", 
    2 => "01000110001100010111001000011000", 
    3 => "01000101111011001001100000100000", 
    4 => "01000101101100010111001000011000", 
    5 => "01000101011011001001100000100000", 
    6 => "01000101001100010111001000101001", 
    7 => "01000100111011001001100000101111", 
    8 => "01000100101100010111001000110110", 
    9 => "01000100011011001001100001000010", 
    10 => "01000100001100010111001000010101", 
    11 => "01000011111011001001100000101010", 
    12 => "01000011101100010111001000001011", 
    13 => "01000011100100101111001001011001", 
    14 => "01000011011011001001100000010011", 
    15 => "01000011010101111001100100111110", 
    16 => "01000011001100010111001000011000", 
    17 => "01000011000110100000100001011111", 
    18 => "01000010111011001001100000011010", 
    19 => "01000010111001110000110010001111", 
    20 => "01000010101100010111001000011000", 
    21 => "01000010100110100000100001011111", 
    22 => "01000010011011001001100000100000", 
    23 => "01000010010101100000000111110000", 
    24 => "01000010001100010111001000011000", 
    25 => "01000010000100010010111011100111", 
    26 => "01000001111011001001100000100000", 
    27 => "01000001110101001001000001110100", 
    28 => "01000001101100010111001000011000", 
    29 => "01000001100010101010000100100011", 
    30 => "01000001011011001001100000100000", 
    31 => "01000001010111011100111010011110", 
    32 => "01000001001111100110101111100111", 
    33 => "01000001000111101010111000001011", 
    34 => "01000000110010001101111110110011", 
    35 => "01000000101111110001101000110000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity WBSlave_getLog_gradientLUT is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 36;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of WBSlave_getLog_gradientLUT is
    component WBSlave_getLog_gradientLUT_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    WBSlave_getLog_gradientLUT_rom_U :  component WBSlave_getLog_gradientLUT_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



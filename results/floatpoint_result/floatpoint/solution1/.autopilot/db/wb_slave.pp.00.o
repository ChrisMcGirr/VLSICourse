	.file	"../PJ/synth/wb_slave.cpp"
	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init,@function
__cxx_global_var_init:                  # @__cxx_global_var_init
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2:
	.cfi_def_cfa_offset 16
.Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp4:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZStL8__ioinit, %rdi
	callq	_ZNSt8ios_base4InitC1Ev
	leaq	_ZNSt8ios_base4InitD1Ev, %rdi
	leaq	_ZStL8__ioinit, %rax
	leaq	__dso_handle, %rdx
	movq	%rax, %rsi
	callq	__cxa_atexit
	movl	%eax, -4(%rbp)          # 4-byte Spill
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp5:
	.size	__cxx_global_var_init, .Ltmp5-__cxx_global_var_init
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,"axG",@progbits,_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,comdat
	.weak	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi,@function
_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi: # @_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movl	%edx, -20(%rsp)
	ret
.Ltmp6:
	.size	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi, .Ltmp6-_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	__cxx_global_var_init1,@function
__cxx_global_var_init1:                 # @__cxx_global_var_init1
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp9:
	.cfi_def_cfa_offset 16
.Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp11:
	.cfi_def_cfa_register %rbp
	leaq	_ZN7sc_coreL17api_version_checkE, %rdi
	callq	_ZN7sc_core20sc_api_version_2_3_0C1Ev
	popq	%rbp
	ret
.Ltmp12:
	.size	__cxx_global_var_init1, .Ltmp12-__cxx_global_var_init1
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE,@function
_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE: # @_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp13:
	.size	_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE, .Ltmp13-_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE,@function
_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE: # @_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp14:
	.size	_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE, .Ltmp14-_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE,@function
_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE: # @_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp15:
	.size	_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE, .Ltmp15-_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE,@function
_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE: # @_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp16:
	.size	_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE, .Ltmp16-_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE
	.cfi_endproc

	.text
	.globl	_ZN7WBSlaveC2EN7sc_core14sc_module_nameE
	.align	16, 0x90
	.type	_ZN7WBSlaveC2EN7sc_core14sc_module_nameE,@function
_ZN7WBSlaveC2EN7sc_core14sc_module_nameE: # @_ZN7WBSlaveC2EN7sc_core14sc_module_nameE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin7:
	.cfi_lsda 3, .Lexception7
# BB#0:
	pushq	%rbp
.Ltmp184:
	.cfi_def_cfa_offset 16
.Ltmp185:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp186:
	.cfi_def_cfa_register %rbp
	subq	$448, %rsp              # imm = 0x1C0
	movq	%rdi, -8(%rbp)
	movq	%rdi, -104(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core9sc_moduleC2Ev
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	$_ZTV7WBSlave+16, (%rdi)
	movq	$_ZTV7WBSlave+176, 88(%rdi)
	addq	$208, %rdi
	movq	-104(%rbp), %rax        # 8-byte Reload
.Ltmp17:
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp18:
	jmp	.LBB7_1
.LBB7_1:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp20:
	movq	%rax, %rdi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp21:
	jmp	.LBB7_2
.LBB7_2:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$528, %rax              # imm = 0x210
.Ltmp23:
	movq	%rax, %rdi
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
.Ltmp24:
	jmp	.LBB7_3
.LBB7_3:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$672, %rax              # imm = 0x2A0
.Ltmp26:
	movq	%rax, %rdi
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
.Ltmp27:
	jmp	.LBB7_4
.LBB7_4:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$816, %rax              # imm = 0x330
.Ltmp29:
	movq	%rax, %rdi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp30:
	jmp	.LBB7_5
.LBB7_5:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$976, %rax              # imm = 0x3D0
.Ltmp32:
	movq	%rax, %rdi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp33:
	jmp	.LBB7_6
.LBB7_6:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1136, %rax             # imm = 0x470
.Ltmp35:
	movq	%rax, %rdi
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIbEC1Ev
.Ltmp36:
	jmp	.LBB7_7
.LBB7_7:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1296, %rax             # imm = 0x510
.Ltmp38:
	movq	%rax, %rdi
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev
.Ltmp39:
	jmp	.LBB7_8
.LBB7_8:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1440, %rax             # imm = 0x5A0
.Ltmp41:
	movq	%rax, %rdi
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev
.Ltmp42:
	jmp	.LBB7_9
.LBB7_9:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
.Ltmp44:
	movq	%rax, %rdi
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core6sc_outIbEC1Ev
.Ltmp45:
	jmp	.LBB7_10
.LBB7_10:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
.Ltmp47:
	movq	%rax, %rdi
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core6sc_outIbEC1Ev
.Ltmp48:
	jmp	.LBB7_11
.LBB7_11:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
.Ltmp50:
	movl	$.L.str, %esi
	movq	%rax, %rdi
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp51:
	jmp	.LBB7_12
.LBB7_12:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4016, %rax             # imm = 0xFB0
.Ltmp53:
	movl	$.L.str2, %esi
	movq	%rax, %rdi
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp54:
	jmp	.LBB7_13
.LBB7_13:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4048, %rax             # imm = 0xFD0
.Ltmp56:
	movq	%rax, %rdi
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi1EEC1Ev
.Ltmp57:
	jmp	.LBB7_14
.LBB7_14:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4072, %rax             # imm = 0xFE8
.Ltmp59:
	movq	%rax, %rdi
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi1EEC1Ev
.Ltmp60:
	jmp	.LBB7_15
.LBB7_15:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4096, %rax             # imm = 0x1000
.Ltmp62:
	movl	$.L.str3, %esi
	movq	%rax, %rdi
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp63:
	jmp	.LBB7_16
.LBB7_16:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp65:
	movl	$.L.str4, %esi
	movq	%rax, %rdi
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp66:
	jmp	.LBB7_17
.LBB7_17:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp68:
	movl	$.L.str5, %esi
	movq	%rax, %rdi
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp69:
	jmp	.LBB7_18
.LBB7_18:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4168, %rax             # imm = 0x1048
.Ltmp71:
	movl	$.L.str6, %esi
	movq	%rax, %rdi
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp72:
	jmp	.LBB7_19
.LBB7_19:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4192, %rax             # imm = 0x1060
.Ltmp74:
	movl	$.L.str7, %esi
	movq	%rax, %rdi
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp75:
	jmp	.LBB7_20
.LBB7_20:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4216, %rax             # imm = 0x1078
.Ltmp77:
	movl	$.L.str8, %esi
	movq	%rax, %rdi
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp78:
	jmp	.LBB7_21
.LBB7_21:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$4240, %rax             # imm = 0x1090
.Ltmp80:
	movl	$.L.str8, %esi
	movq	%rax, %rdi
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EEC1EPKc
.Ltmp81:
	jmp	.LBB7_22
.LBB7_22:
.Ltmp83:
	callq	_ZN7sc_core22sc_get_curr_simcontextEv
.Ltmp84:
	movq	%rax, -296(%rbp)        # 8-byte Spill
	jmp	.LBB7_23
.LBB7_23:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$88, %rax
	movq	$-88, -40(%rbp)
	movq	$_ZN7WBSlave10processBusEv, -48(%rbp)
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %r9
.Ltmp85:
	movq	%rsp, %rcx
	movq	%rax, (%rcx)
	movq	$0, 8(%rcx)
	leaq	-32(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$.L.str9, %edx
	movq	-296(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core13sc_simcontext22create_cthread_processEPKcbMNS_15sc_process_hostEFvvEPS3_PKNS_16sc_spawn_optionsE
.Ltmp86:
	jmp	.LBB7_24
.LBB7_24:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$96, %rax
.Ltmp87:
	leaq	-32(%rbp), %rdi
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core17sc_process_handlecvPNS_18sc_cthread_processEEv
.Ltmp88:
	movq	%rax, -312(%rbp)        # 8-byte Spill
	jmp	.LBB7_25
.LBB7_25:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$208, %rax
.Ltmp89:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE3posEv
.Ltmp90:
	movq	%rax, -320(%rbp)        # 8-byte Spill
	jmp	.LBB7_26
.LBB7_26:
.Ltmp91:
	movq	-304(%rbp), %rdi        # 8-byte Reload
	movq	-312(%rbp), %rsi        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	callq	_ZN7sc_core12sc_sensitiveclEPNS_18sc_cthread_processERNS_15sc_event_finderE
.Ltmp92:
	movq	%rax, -328(%rbp)        # 8-byte Spill
	jmp	.LBB7_27
.LBB7_27:
.Ltmp96:
	leaq	-32(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp97:
	jmp	.LBB7_28
.LBB7_28:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp98:
	movl	$1, %edx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN7sc_core9sc_module15reset_signal_isERKNS_5sc_inIbEEb
.Ltmp99:
	jmp	.LBB7_29
.LBB7_29:
.Ltmp100:
	callq	_ZN7sc_core22sc_get_curr_simcontextEv
.Ltmp101:
	movq	%rax, -336(%rbp)        # 8-byte Spill
	jmp	.LBB7_30
.LBB7_30:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$88, %rax
	movq	$-88, -64(%rbp)
	movq	$_ZN7WBSlave12processSlaveEv, -72(%rbp)
	movq	-72(%rbp), %r8
	movq	-64(%rbp), %r9
.Ltmp102:
	movq	%rsp, %rcx
	movq	%rax, (%rcx)
	movq	$0, 8(%rcx)
	leaq	-56(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$.L.str10, %edx
	movq	-336(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core13sc_simcontext22create_cthread_processEPKcbMNS_15sc_process_hostEFvvEPS3_PKNS_16sc_spawn_optionsE
.Ltmp103:
	jmp	.LBB7_31
.LBB7_31:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$96, %rax
.Ltmp104:
	leaq	-56(%rbp), %rdi
	movq	%rax, -344(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core17sc_process_handlecvPNS_18sc_cthread_processEEv
.Ltmp105:
	movq	%rax, -352(%rbp)        # 8-byte Spill
	jmp	.LBB7_32
.LBB7_32:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$208, %rax
.Ltmp106:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE3posEv
.Ltmp107:
	movq	%rax, -360(%rbp)        # 8-byte Spill
	jmp	.LBB7_33
.LBB7_33:
.Ltmp108:
	movq	-344(%rbp), %rdi        # 8-byte Reload
	movq	-352(%rbp), %rsi        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	callq	_ZN7sc_core12sc_sensitiveclEPNS_18sc_cthread_processERNS_15sc_event_finderE
.Ltmp109:
	movq	%rax, -368(%rbp)        # 8-byte Spill
	jmp	.LBB7_34
.LBB7_34:
.Ltmp113:
	leaq	-56(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp114:
	jmp	.LBB7_35
.LBB7_35:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp115:
	movl	$1, %edx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN7sc_core9sc_module15reset_signal_isERKNS_5sc_inIbEEb
.Ltmp116:
	jmp	.LBB7_36
.LBB7_36:
.Ltmp117:
	callq	_ZN7sc_core22sc_get_curr_simcontextEv
.Ltmp118:
	movq	%rax, -376(%rbp)        # 8-byte Spill
	jmp	.LBB7_37
.LBB7_37:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$88, %rax
	movq	$-88, -88(%rbp)
	movq	$_ZN7WBSlave6getLogEv, -96(%rbp)
	movq	-96(%rbp), %r8
	movq	-88(%rbp), %r9
.Ltmp119:
	movq	%rsp, %rcx
	movq	%rax, (%rcx)
	movq	$0, 8(%rcx)
	leaq	-80(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$.L.str11, %edx
	movq	-376(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core13sc_simcontext22create_cthread_processEPKcbMNS_15sc_process_hostEFvvEPS3_PKNS_16sc_spawn_optionsE
.Ltmp120:
	jmp	.LBB7_38
.LBB7_38:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$96, %rax
.Ltmp121:
	leaq	-80(%rbp), %rdi
	movq	%rax, -384(%rbp)        # 8-byte Spill
	callq	_ZN7sc_core17sc_process_handlecvPNS_18sc_cthread_processEEv
.Ltmp122:
	movq	%rax, -392(%rbp)        # 8-byte Spill
	jmp	.LBB7_39
.LBB7_39:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$208, %rax
.Ltmp123:
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE3posEv
.Ltmp124:
	movq	%rax, -400(%rbp)        # 8-byte Spill
	jmp	.LBB7_40
.LBB7_40:
.Ltmp125:
	movq	-384(%rbp), %rdi        # 8-byte Reload
	movq	-392(%rbp), %rsi        # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	callq	_ZN7sc_core12sc_sensitiveclEPNS_18sc_cthread_processERNS_15sc_event_finderE
.Ltmp126:
	movq	%rax, -408(%rbp)        # 8-byte Spill
	jmp	.LBB7_41
.LBB7_41:
.Ltmp130:
	leaq	-80(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp131:
	jmp	.LBB7_42
.LBB7_42:
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp132:
	movl	$1, %edx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZN7sc_core9sc_module15reset_signal_isERKNS_5sc_inIbEEb
.Ltmp133:
	jmp	.LBB7_43
.LBB7_43:
	addq	$448, %rsp              # imm = 0x1C0
	popq	%rbp
	ret
.LBB7_44:
.Ltmp19:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_117
.LBB7_45:
.Ltmp22:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_115
.LBB7_46:
.Ltmp25:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_113
.LBB7_47:
.Ltmp28:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_111
.LBB7_48:
.Ltmp31:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_109
.LBB7_49:
.Ltmp34:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_107
.LBB7_50:
.Ltmp37:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_105
.LBB7_51:
.Ltmp40:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_103
.LBB7_52:
.Ltmp43:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_101
.LBB7_53:
.Ltmp46:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_99
.LBB7_54:
.Ltmp49:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_97
.LBB7_55:
.Ltmp52:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_95
.LBB7_56:
.Ltmp55:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_93
.LBB7_57:
.Ltmp58:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_91
.LBB7_58:
.Ltmp61:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_89
.LBB7_59:
.Ltmp64:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_87
.LBB7_60:
.Ltmp67:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_85
.LBB7_61:
.Ltmp70:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_83
.LBB7_62:
.Ltmp73:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_81
.LBB7_63:
.Ltmp76:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_79
.LBB7_64:
.Ltmp79:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_77
.LBB7_65:
.Ltmp82:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_75
.LBB7_66:
.Ltmp134:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB7_73
.LBB7_67:
.Ltmp93:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp94:
	leaq	-32(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp95:
	jmp	.LBB7_68
.LBB7_68:
	jmp	.LBB7_73
.LBB7_69:
.Ltmp110:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp111:
	leaq	-56(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp112:
	jmp	.LBB7_70
.LBB7_70:
	jmp	.LBB7_73
.LBB7_71:
.Ltmp127:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp128:
	leaq	-80(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD1Ev
.Ltmp129:
	jmp	.LBB7_72
.LBB7_72:
	jmp	.LBB7_73
.LBB7_73:
.Ltmp135:
	movq	-288(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp136:
	jmp	.LBB7_74
.LBB7_74:
	jmp	.LBB7_75
.LBB7_75:
.Ltmp137:
	movq	-280(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp138:
	jmp	.LBB7_76
.LBB7_76:
	jmp	.LBB7_77
.LBB7_77:
.Ltmp139:
	movq	-272(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp140:
	jmp	.LBB7_78
.LBB7_78:
	jmp	.LBB7_79
.LBB7_79:
.Ltmp141:
	movq	-264(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp142:
	jmp	.LBB7_80
.LBB7_80:
	jmp	.LBB7_81
.LBB7_81:
.Ltmp143:
	movq	-256(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp144:
	jmp	.LBB7_82
.LBB7_82:
	jmp	.LBB7_83
.LBB7_83:
.Ltmp145:
	movq	-248(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp146:
	jmp	.LBB7_84
.LBB7_84:
	jmp	.LBB7_85
.LBB7_85:
.Ltmp147:
	movq	-240(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp148:
	jmp	.LBB7_86
.LBB7_86:
	jmp	.LBB7_87
.LBB7_87:
.Ltmp149:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp150:
	jmp	.LBB7_88
.LBB7_88:
	jmp	.LBB7_89
.LBB7_89:
.Ltmp151:
	movq	-224(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp152:
	jmp	.LBB7_90
.LBB7_90:
	jmp	.LBB7_91
.LBB7_91:
.Ltmp153:
	movq	-216(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp154:
	jmp	.LBB7_92
.LBB7_92:
	jmp	.LBB7_93
.LBB7_93:
.Ltmp155:
	movq	-208(%rbp), %rdi        # 8-byte Reload
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp156:
	jmp	.LBB7_94
.LBB7_94:
	jmp	.LBB7_95
.LBB7_95:
.Ltmp157:
	movq	-200(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp158:
	jmp	.LBB7_96
.LBB7_96:
	jmp	.LBB7_97
.LBB7_97:
.Ltmp159:
	movq	-192(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp160:
	jmp	.LBB7_98
.LBB7_98:
	jmp	.LBB7_99
.LBB7_99:
.Ltmp161:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp162:
	jmp	.LBB7_100
.LBB7_100:
	jmp	.LBB7_101
.LBB7_101:
.Ltmp163:
	movq	-176(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
.Ltmp164:
	jmp	.LBB7_102
.LBB7_102:
	jmp	.LBB7_103
.LBB7_103:
.Ltmp165:
	movq	-168(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp166:
	jmp	.LBB7_104
.LBB7_104:
	jmp	.LBB7_105
.LBB7_105:
.Ltmp167:
	movq	-160(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp168:
	jmp	.LBB7_106
.LBB7_106:
	jmp	.LBB7_107
.LBB7_107:
.Ltmp169:
	movq	-152(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp170:
	jmp	.LBB7_108
.LBB7_108:
	jmp	.LBB7_109
.LBB7_109:
.Ltmp171:
	movq	-144(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp172:
	jmp	.LBB7_110
.LBB7_110:
	jmp	.LBB7_111
.LBB7_111:
.Ltmp173:
	movq	-136(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp174:
	jmp	.LBB7_112
.LBB7_112:
	jmp	.LBB7_113
.LBB7_113:
.Ltmp175:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp176:
	jmp	.LBB7_114
.LBB7_114:
	jmp	.LBB7_115
.LBB7_115:
.Ltmp177:
	movq	-112(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp178:
	jmp	.LBB7_116
.LBB7_116:
	jmp	.LBB7_117
.LBB7_117:
.Ltmp179:
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_moduleD2Ev
.Ltmp180:
	jmp	.LBB7_118
.LBB7_118:
	jmp	.LBB7_119
.LBB7_119:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB7_120:
.Ltmp181:
	movq	%rax, -416(%rbp)        # 8-byte Spill
	movq	%rdx, -424(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp187:
	.size	_ZN7WBSlaveC2EN7sc_core14sc_module_nameE, .Ltmp187-_ZN7WBSlaveC2EN7sc_core14sc_module_nameE
	.cfi_endproc
.Leh_func_end7:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table7:
.Lexception7:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\251\203\200\200"     # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.ascii	 "\240\003"             # Call site table length
.Lset0 = .Leh_func_begin7-.Leh_func_begin7 # >> Call Site 1 <<
	.long	.Lset0
.Lset1 = .Ltmp17-.Leh_func_begin7       #   Call between .Leh_func_begin7 and .Ltmp17
	.long	.Lset1
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset2 = .Ltmp17-.Leh_func_begin7       # >> Call Site 2 <<
	.long	.Lset2
.Lset3 = .Ltmp18-.Ltmp17                #   Call between .Ltmp17 and .Ltmp18
	.long	.Lset3
.Lset4 = .Ltmp19-.Leh_func_begin7       #     jumps to .Ltmp19
	.long	.Lset4
	.byte	0                       #   On action: cleanup
.Lset5 = .Ltmp20-.Leh_func_begin7       # >> Call Site 3 <<
	.long	.Lset5
.Lset6 = .Ltmp21-.Ltmp20                #   Call between .Ltmp20 and .Ltmp21
	.long	.Lset6
.Lset7 = .Ltmp22-.Leh_func_begin7       #     jumps to .Ltmp22
	.long	.Lset7
	.byte	0                       #   On action: cleanup
.Lset8 = .Ltmp23-.Leh_func_begin7       # >> Call Site 4 <<
	.long	.Lset8
.Lset9 = .Ltmp24-.Ltmp23                #   Call between .Ltmp23 and .Ltmp24
	.long	.Lset9
.Lset10 = .Ltmp25-.Leh_func_begin7      #     jumps to .Ltmp25
	.long	.Lset10
	.byte	0                       #   On action: cleanup
.Lset11 = .Ltmp26-.Leh_func_begin7      # >> Call Site 5 <<
	.long	.Lset11
.Lset12 = .Ltmp27-.Ltmp26               #   Call between .Ltmp26 and .Ltmp27
	.long	.Lset12
.Lset13 = .Ltmp28-.Leh_func_begin7      #     jumps to .Ltmp28
	.long	.Lset13
	.byte	0                       #   On action: cleanup
.Lset14 = .Ltmp29-.Leh_func_begin7      # >> Call Site 6 <<
	.long	.Lset14
.Lset15 = .Ltmp30-.Ltmp29               #   Call between .Ltmp29 and .Ltmp30
	.long	.Lset15
.Lset16 = .Ltmp31-.Leh_func_begin7      #     jumps to .Ltmp31
	.long	.Lset16
	.byte	0                       #   On action: cleanup
.Lset17 = .Ltmp32-.Leh_func_begin7      # >> Call Site 7 <<
	.long	.Lset17
.Lset18 = .Ltmp33-.Ltmp32               #   Call between .Ltmp32 and .Ltmp33
	.long	.Lset18
.Lset19 = .Ltmp34-.Leh_func_begin7      #     jumps to .Ltmp34
	.long	.Lset19
	.byte	0                       #   On action: cleanup
.Lset20 = .Ltmp35-.Leh_func_begin7      # >> Call Site 8 <<
	.long	.Lset20
.Lset21 = .Ltmp36-.Ltmp35               #   Call between .Ltmp35 and .Ltmp36
	.long	.Lset21
.Lset22 = .Ltmp37-.Leh_func_begin7      #     jumps to .Ltmp37
	.long	.Lset22
	.byte	0                       #   On action: cleanup
.Lset23 = .Ltmp38-.Leh_func_begin7      # >> Call Site 9 <<
	.long	.Lset23
.Lset24 = .Ltmp39-.Ltmp38               #   Call between .Ltmp38 and .Ltmp39
	.long	.Lset24
.Lset25 = .Ltmp40-.Leh_func_begin7      #     jumps to .Ltmp40
	.long	.Lset25
	.byte	0                       #   On action: cleanup
.Lset26 = .Ltmp41-.Leh_func_begin7      # >> Call Site 10 <<
	.long	.Lset26
.Lset27 = .Ltmp42-.Ltmp41               #   Call between .Ltmp41 and .Ltmp42
	.long	.Lset27
.Lset28 = .Ltmp43-.Leh_func_begin7      #     jumps to .Ltmp43
	.long	.Lset28
	.byte	0                       #   On action: cleanup
.Lset29 = .Ltmp44-.Leh_func_begin7      # >> Call Site 11 <<
	.long	.Lset29
.Lset30 = .Ltmp45-.Ltmp44               #   Call between .Ltmp44 and .Ltmp45
	.long	.Lset30
.Lset31 = .Ltmp46-.Leh_func_begin7      #     jumps to .Ltmp46
	.long	.Lset31
	.byte	0                       #   On action: cleanup
.Lset32 = .Ltmp47-.Leh_func_begin7      # >> Call Site 12 <<
	.long	.Lset32
.Lset33 = .Ltmp48-.Ltmp47               #   Call between .Ltmp47 and .Ltmp48
	.long	.Lset33
.Lset34 = .Ltmp49-.Leh_func_begin7      #     jumps to .Ltmp49
	.long	.Lset34
	.byte	0                       #   On action: cleanup
.Lset35 = .Ltmp50-.Leh_func_begin7      # >> Call Site 13 <<
	.long	.Lset35
.Lset36 = .Ltmp51-.Ltmp50               #   Call between .Ltmp50 and .Ltmp51
	.long	.Lset36
.Lset37 = .Ltmp52-.Leh_func_begin7      #     jumps to .Ltmp52
	.long	.Lset37
	.byte	0                       #   On action: cleanup
.Lset38 = .Ltmp53-.Leh_func_begin7      # >> Call Site 14 <<
	.long	.Lset38
.Lset39 = .Ltmp54-.Ltmp53               #   Call between .Ltmp53 and .Ltmp54
	.long	.Lset39
.Lset40 = .Ltmp55-.Leh_func_begin7      #     jumps to .Ltmp55
	.long	.Lset40
	.byte	0                       #   On action: cleanup
.Lset41 = .Ltmp56-.Leh_func_begin7      # >> Call Site 15 <<
	.long	.Lset41
.Lset42 = .Ltmp57-.Ltmp56               #   Call between .Ltmp56 and .Ltmp57
	.long	.Lset42
.Lset43 = .Ltmp58-.Leh_func_begin7      #     jumps to .Ltmp58
	.long	.Lset43
	.byte	0                       #   On action: cleanup
.Lset44 = .Ltmp59-.Leh_func_begin7      # >> Call Site 16 <<
	.long	.Lset44
.Lset45 = .Ltmp60-.Ltmp59               #   Call between .Ltmp59 and .Ltmp60
	.long	.Lset45
.Lset46 = .Ltmp61-.Leh_func_begin7      #     jumps to .Ltmp61
	.long	.Lset46
	.byte	0                       #   On action: cleanup
.Lset47 = .Ltmp62-.Leh_func_begin7      # >> Call Site 17 <<
	.long	.Lset47
.Lset48 = .Ltmp63-.Ltmp62               #   Call between .Ltmp62 and .Ltmp63
	.long	.Lset48
.Lset49 = .Ltmp64-.Leh_func_begin7      #     jumps to .Ltmp64
	.long	.Lset49
	.byte	0                       #   On action: cleanup
.Lset50 = .Ltmp65-.Leh_func_begin7      # >> Call Site 18 <<
	.long	.Lset50
.Lset51 = .Ltmp66-.Ltmp65               #   Call between .Ltmp65 and .Ltmp66
	.long	.Lset51
.Lset52 = .Ltmp67-.Leh_func_begin7      #     jumps to .Ltmp67
	.long	.Lset52
	.byte	0                       #   On action: cleanup
.Lset53 = .Ltmp68-.Leh_func_begin7      # >> Call Site 19 <<
	.long	.Lset53
.Lset54 = .Ltmp69-.Ltmp68               #   Call between .Ltmp68 and .Ltmp69
	.long	.Lset54
.Lset55 = .Ltmp70-.Leh_func_begin7      #     jumps to .Ltmp70
	.long	.Lset55
	.byte	0                       #   On action: cleanup
.Lset56 = .Ltmp71-.Leh_func_begin7      # >> Call Site 20 <<
	.long	.Lset56
.Lset57 = .Ltmp72-.Ltmp71               #   Call between .Ltmp71 and .Ltmp72
	.long	.Lset57
.Lset58 = .Ltmp73-.Leh_func_begin7      #     jumps to .Ltmp73
	.long	.Lset58
	.byte	0                       #   On action: cleanup
.Lset59 = .Ltmp74-.Leh_func_begin7      # >> Call Site 21 <<
	.long	.Lset59
.Lset60 = .Ltmp75-.Ltmp74               #   Call between .Ltmp74 and .Ltmp75
	.long	.Lset60
.Lset61 = .Ltmp76-.Leh_func_begin7      #     jumps to .Ltmp76
	.long	.Lset61
	.byte	0                       #   On action: cleanup
.Lset62 = .Ltmp77-.Leh_func_begin7      # >> Call Site 22 <<
	.long	.Lset62
.Lset63 = .Ltmp78-.Ltmp77               #   Call between .Ltmp77 and .Ltmp78
	.long	.Lset63
.Lset64 = .Ltmp79-.Leh_func_begin7      #     jumps to .Ltmp79
	.long	.Lset64
	.byte	0                       #   On action: cleanup
.Lset65 = .Ltmp80-.Leh_func_begin7      # >> Call Site 23 <<
	.long	.Lset65
.Lset66 = .Ltmp81-.Ltmp80               #   Call between .Ltmp80 and .Ltmp81
	.long	.Lset66
.Lset67 = .Ltmp82-.Leh_func_begin7      #     jumps to .Ltmp82
	.long	.Lset67
	.byte	0                       #   On action: cleanup
.Lset68 = .Ltmp83-.Leh_func_begin7      # >> Call Site 24 <<
	.long	.Lset68
.Lset69 = .Ltmp86-.Ltmp83               #   Call between .Ltmp83 and .Ltmp86
	.long	.Lset69
.Lset70 = .Ltmp134-.Leh_func_begin7     #     jumps to .Ltmp134
	.long	.Lset70
	.byte	0                       #   On action: cleanup
.Lset71 = .Ltmp87-.Leh_func_begin7      # >> Call Site 25 <<
	.long	.Lset71
.Lset72 = .Ltmp92-.Ltmp87               #   Call between .Ltmp87 and .Ltmp92
	.long	.Lset72
.Lset73 = .Ltmp93-.Leh_func_begin7      #     jumps to .Ltmp93
	.long	.Lset73
	.byte	0                       #   On action: cleanup
.Lset74 = .Ltmp96-.Leh_func_begin7      # >> Call Site 26 <<
	.long	.Lset74
.Lset75 = .Ltmp103-.Ltmp96              #   Call between .Ltmp96 and .Ltmp103
	.long	.Lset75
.Lset76 = .Ltmp134-.Leh_func_begin7     #     jumps to .Ltmp134
	.long	.Lset76
	.byte	0                       #   On action: cleanup
.Lset77 = .Ltmp104-.Leh_func_begin7     # >> Call Site 27 <<
	.long	.Lset77
.Lset78 = .Ltmp109-.Ltmp104             #   Call between .Ltmp104 and .Ltmp109
	.long	.Lset78
.Lset79 = .Ltmp110-.Leh_func_begin7     #     jumps to .Ltmp110
	.long	.Lset79
	.byte	0                       #   On action: cleanup
.Lset80 = .Ltmp113-.Leh_func_begin7     # >> Call Site 28 <<
	.long	.Lset80
.Lset81 = .Ltmp120-.Ltmp113             #   Call between .Ltmp113 and .Ltmp120
	.long	.Lset81
.Lset82 = .Ltmp134-.Leh_func_begin7     #     jumps to .Ltmp134
	.long	.Lset82
	.byte	0                       #   On action: cleanup
.Lset83 = .Ltmp121-.Leh_func_begin7     # >> Call Site 29 <<
	.long	.Lset83
.Lset84 = .Ltmp126-.Ltmp121             #   Call between .Ltmp121 and .Ltmp126
	.long	.Lset84
.Lset85 = .Ltmp127-.Leh_func_begin7     #     jumps to .Ltmp127
	.long	.Lset85
	.byte	0                       #   On action: cleanup
.Lset86 = .Ltmp130-.Leh_func_begin7     # >> Call Site 30 <<
	.long	.Lset86
.Lset87 = .Ltmp133-.Ltmp130             #   Call between .Ltmp130 and .Ltmp133
	.long	.Lset87
.Lset88 = .Ltmp134-.Leh_func_begin7     #     jumps to .Ltmp134
	.long	.Lset88
	.byte	0                       #   On action: cleanup
.Lset89 = .Ltmp94-.Leh_func_begin7      # >> Call Site 31 <<
	.long	.Lset89
.Lset90 = .Ltmp180-.Ltmp94              #   Call between .Ltmp94 and .Ltmp180
	.long	.Lset90
.Lset91 = .Ltmp181-.Leh_func_begin7     #     jumps to .Ltmp181
	.long	.Lset91
	.byte	1                       #   On action: 1
.Lset92 = .Ltmp180-.Leh_func_begin7     # >> Call Site 32 <<
	.long	.Lset92
.Lset93 = .Leh_func_end7-.Ltmp180       #   Call between .Ltmp180 and .Leh_func_end7
	.long	.Lset93
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN7sc_core5sc_inIbEC1Ev,"axG",@progbits,_ZN7sc_core5sc_inIbEC1Ev,comdat
	.weak	_ZN7sc_core5sc_inIbEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIbEC1Ev,@function
_ZN7sc_core5sc_inIbEC1Ev:               # @_ZN7sc_core5sc_inIbEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp190:
	.cfi_def_cfa_offset 16
.Ltmp191:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp192:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIbEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp193:
	.size	_ZN7sc_core5sc_inIbEC1Ev, .Ltmp193-_ZN7sc_core5sc_inIbEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp196:
	.cfi_def_cfa_offset 16
.Ltmp197:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp198:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp199:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev, .Ltmp199-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp202:
	.cfi_def_cfa_offset 16
.Ltmp203:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp204:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp205:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev, .Ltmp205-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp208:
	.cfi_def_cfa_offset 16
.Ltmp209:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp210:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp211:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev, .Ltmp211-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIbEC1Ev,"axG",@progbits,_ZN7sc_core6sc_outIbEC1Ev,comdat
	.weak	_ZN7sc_core6sc_outIbEC1Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbEC1Ev,@function
_ZN7sc_core6sc_outIbEC1Ev:              # @_ZN7sc_core6sc_outIbEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp214:
	.cfi_def_cfa_offset 16
.Ltmp215:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp216:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core6sc_outIbEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp217:
	.size	_ZN7sc_core6sc_outIbEC1Ev, .Ltmp217-_ZN7sc_core6sc_outIbEC1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi3EEC1EPKc,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EEC1EPKc,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EEC1EPKc
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EEC1EPKc,@function
_ZN5sc_dt7sc_uintILi3EEC1EPKc:          # @_ZN5sc_dt7sc_uintILi3EEC1EPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp220:
	.cfi_def_cfa_offset 16
.Ltmp221:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp222:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt7sc_uintILi3EEC2EPKc
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp223:
	.size	_ZN5sc_dt7sc_uintILi3EEC1EPKc, .Ltmp223-_ZN5sc_dt7sc_uintILi3EEC1EPKc
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EEC1Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EEC1Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EEC1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EEC1Ev,@function
_ZN5sc_dt7sc_uintILi1EEC1Ev:            # @_ZN5sc_dt7sc_uintILi1EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp226:
	.cfi_def_cfa_offset 16
.Ltmp227:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp228:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp229:
	.size	_ZN5sc_dt7sc_uintILi1EEC1Ev, .Ltmp229-_ZN5sc_dt7sc_uintILi1EEC1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core22sc_get_curr_simcontextEv,"axG",@progbits,_ZN7sc_core22sc_get_curr_simcontextEv,comdat
	.weak	_ZN7sc_core22sc_get_curr_simcontextEv
	.align	16, 0x90
	.type	_ZN7sc_core22sc_get_curr_simcontextEv,@function
_ZN7sc_core22sc_get_curr_simcontextEv:  # @_ZN7sc_core22sc_get_curr_simcontextEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin15:
	.cfi_lsda 3, .Lexception15
# BB#0:
	pushq	%rbp
.Ltmp235:
	.cfi_def_cfa_offset 16
.Ltmp236:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp237:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	cmpq	$0, _ZN7sc_core18sc_curr_simcontextE
	jne	.LBB15_4
# BB#1:
	movl	$304, %edi              # imm = 0x130
	callq	_Znwm
	movq	%rax, %rdi
	movq	%rax, %rcx
.Ltmp230:
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core13sc_simcontextC1Ev
.Ltmp231:
	jmp	.LBB15_2
.LBB15_2:
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	%rax, _ZN7sc_core25sc_default_global_contextE
	movq	_ZN7sc_core25sc_default_global_contextE, %rcx
	movq	%rcx, _ZN7sc_core18sc_curr_simcontextE
	jmp	.LBB15_4
.LBB15_3:
.Ltmp232:
	movl	%edx, %ecx
	movq	%rax, -8(%rbp)
	movl	%ecx, -12(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZdlPv
	jmp	.LBB15_5
.LBB15_4:
	movq	_ZN7sc_core18sc_curr_simcontextE, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB15_5:
	movq	-8(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp238:
	.size	_ZN7sc_core22sc_get_curr_simcontextEv, .Ltmp238-_ZN7sc_core22sc_get_curr_simcontextEv
	.cfi_endproc
.Leh_func_end15:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table15:
.Lexception15:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset94 = .Leh_func_begin15-.Leh_func_begin15 # >> Call Site 1 <<
	.long	.Lset94
.Lset95 = .Ltmp230-.Leh_func_begin15    #   Call between .Leh_func_begin15 and .Ltmp230
	.long	.Lset95
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset96 = .Ltmp230-.Leh_func_begin15    # >> Call Site 2 <<
	.long	.Lset96
.Lset97 = .Ltmp231-.Ltmp230             #   Call between .Ltmp230 and .Ltmp231
	.long	.Lset97
.Lset98 = .Ltmp232-.Leh_func_begin15    #     jumps to .Ltmp232
	.long	.Lset98
	.byte	0                       #   On action: cleanup
.Lset99 = .Ltmp231-.Leh_func_begin15    # >> Call Site 3 <<
	.long	.Lset99
.Lset100 = .Leh_func_end15-.Ltmp231     #   Call between .Ltmp231 and .Leh_func_end15
	.long	.Lset100
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.text
	.globl	_ZN7WBSlave10processBusEv
	.align	16, 0x90
	.type	_ZN7WBSlave10processBusEv,@function
_ZN7WBSlave10processBusEv:              # @_ZN7WBSlave10processBusEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin16:
	.cfi_lsda 3, .Lexception16
# BB#0:
	pushq	%rbp
.Ltmp247:
	.cfi_def_cfa_offset 16
.Ltmp248:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp249:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
	addq	$1440, %rax             # imm = 0x5A0
	leaq	-32(%rbp), %rcx
	xorl	%esi, %esi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi32EEC1Ei
	movq	-56(%rbp), %rax         # 8-byte Reload
.Ltmp239:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
.Ltmp240:
	jmp	.LBB16_1
.LBB16_1:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
	leaq	-45(%rbp), %rsi
	movq	-80(%rbp), %rdi         # 8-byte Reload
	addq	$1592, %rdi             # imm = 0x638
	movb	$0, -45(%rbp)
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	leaq	-46(%rbp), %rsi
	movq	-80(%rbp), %rdi         # 8-byte Reload
	addq	$1760, %rdi             # imm = 0x6E0
	movb	$0, -46(%rbp)
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-80(%rbp), %rsi         # 8-byte Reload
	addq	$4216, %rsi             # imm = 0x1078
	movq	%rsi, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movl	$0, 1928(%rsi,%rax,4)
.LBB16_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	leaq	-47(%rbp), %rsi
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	movb	$0, -47(%rbp)
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
.LBB16_3:                               #   Parent Loop BB16_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$976, %rax              # imm = 0x3D0
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE4readEv
	movb	$1, %cl
	movb	(%rax), %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	cmpl	$0, %esi
	movb	%cl, -81(%rbp)          # 1-byte Spill
	je	.LBB16_5
# BB#4:                                 #   in Loop: Header=BB16_3 Depth=2
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$1136, %rax             # imm = 0x470
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE4readEv
	movb	(%rax), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	cmpl	$0, %edx
	sete	%cl
	movb	%cl, -81(%rbp)          # 1-byte Spill
.LBB16_5:                               #   in Loop: Header=BB16_3 Depth=2
	movb	-81(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB16_6
	jmp	.LBB16_9
.LBB16_6:                               #   in Loop: Header=BB16_3 Depth=2
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB16_3
.LBB16_7:
.Ltmp241:
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
.Ltmp242:
	leaq	-32(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp243:
	jmp	.LBB16_8
.LBB16_8:
	jmp	.LBB16_13
.LBB16_9:                               #   in Loop: Header=BB16_2 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$816, %rax              # imm = 0x330
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIbE4readEv
	testb	$1, (%rax)
	jne	.LBB16_10
	jmp	.LBB16_11
.LBB16_10:                              #   in Loop: Header=BB16_2 Depth=1
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave7receiveEv
	jmp	.LBB16_12
.LBB16_11:                              #   in Loop: Header=BB16_2 Depth=1
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave4sendEv
.LBB16_12:                              #   in Loop: Header=BB16_2 Depth=1
	jmp	.LBB16_2
.LBB16_13:
	movq	-40(%rbp), %rdi
	callq	_Unwind_Resume
.LBB16_14:
.Ltmp244:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp250:
	.size	_ZN7WBSlave10processBusEv, .Ltmp250-_ZN7WBSlave10processBusEv
	.cfi_endproc
.Leh_func_end16:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table16:
.Lexception16:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset101 = .Leh_func_begin16-.Leh_func_begin16 # >> Call Site 1 <<
	.long	.Lset101
.Lset102 = .Ltmp239-.Leh_func_begin16   #   Call between .Leh_func_begin16 and .Ltmp239
	.long	.Lset102
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset103 = .Ltmp239-.Leh_func_begin16   # >> Call Site 2 <<
	.long	.Lset103
.Lset104 = .Ltmp240-.Ltmp239            #   Call between .Ltmp239 and .Ltmp240
	.long	.Lset104
.Lset105 = .Ltmp241-.Leh_func_begin16   #     jumps to .Ltmp241
	.long	.Lset105
	.byte	0                       #   On action: cleanup
.Lset106 = .Ltmp240-.Leh_func_begin16   # >> Call Site 3 <<
	.long	.Lset106
.Lset107 = .Ltmp242-.Ltmp240            #   Call between .Ltmp240 and .Ltmp242
	.long	.Lset107
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset108 = .Ltmp242-.Leh_func_begin16   # >> Call Site 4 <<
	.long	.Lset108
.Lset109 = .Ltmp243-.Ltmp242            #   Call between .Ltmp242 and .Ltmp243
	.long	.Lset109
.Lset110 = .Ltmp244-.Leh_func_begin16   #     jumps to .Ltmp244
	.long	.Lset110
	.byte	1                       #   On action: 1
.Lset111 = .Ltmp243-.Leh_func_begin16   # >> Call Site 5 <<
	.long	.Lset111
.Lset112 = .Leh_func_end16-.Ltmp243     #   Call between .Ltmp243 and .Leh_func_end16
	.long	.Lset112
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core5sc_inIbE3posEv,"axG",@progbits,_ZNK7sc_core5sc_inIbE3posEv,comdat
	.weak	_ZNK7sc_core5sc_inIbE3posEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIbE3posEv,@function
_ZNK7sc_core5sc_inIbE3posEv:            # @_ZNK7sc_core5sc_inIbE3posEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin17:
	.cfi_lsda 3, .Lexception17
# BB#0:
	pushq	%rbp
.Ltmp256:
	.cfi_def_cfa_offset 16
.Ltmp257:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp258:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 152(%rdi)
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	jne	.LBB17_4
# BB#1:
	movl	$32, %edi
	callq	_Znwm
	movq	$0, -16(%rbp)
	movq	$41, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rax, %rsi
.Ltmp251:
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
.Ltmp252:
	jmp	.LBB17_2
.LBB17_2:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	%rax, 152(%rcx)
	jmp	.LBB17_4
.LBB17_3:
.Ltmp253:
	movl	%edx, %ecx
	movq	%rax, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rdi         # 8-byte Reload
	callq	_ZdlPv
	jmp	.LBB17_5
.LBB17_4:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	152(%rax), %rax
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB17_5:
	movq	-32(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp259:
	.size	_ZNK7sc_core5sc_inIbE3posEv, .Ltmp259-_ZNK7sc_core5sc_inIbE3posEv
	.cfi_endproc
.Leh_func_end17:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table17:
.Lexception17:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset113 = .Leh_func_begin17-.Leh_func_begin17 # >> Call Site 1 <<
	.long	.Lset113
.Lset114 = .Ltmp251-.Leh_func_begin17   #   Call between .Leh_func_begin17 and .Ltmp251
	.long	.Lset114
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset115 = .Ltmp251-.Leh_func_begin17   # >> Call Site 2 <<
	.long	.Lset115
.Lset116 = .Ltmp252-.Ltmp251            #   Call between .Ltmp251 and .Ltmp252
	.long	.Lset116
.Lset117 = .Ltmp253-.Leh_func_begin17   #     jumps to .Ltmp253
	.long	.Lset117
	.byte	0                       #   On action: cleanup
.Lset118 = .Ltmp252-.Leh_func_begin17   # >> Call Site 3 <<
	.long	.Lset118
.Lset119 = .Leh_func_end17-.Ltmp252     #   Call between .Ltmp252 and .Leh_func_end17
	.long	.Lset119
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core17sc_process_handleD1Ev,"axG",@progbits,_ZN7sc_core17sc_process_handleD1Ev,comdat
	.weak	_ZN7sc_core17sc_process_handleD1Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_process_handleD1Ev,@function
_ZN7sc_core17sc_process_handleD1Ev:     # @_ZN7sc_core17sc_process_handleD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp262:
	.cfi_def_cfa_offset 16
.Ltmp263:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp264:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core17sc_process_handleD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp265:
	.size	_ZN7sc_core17sc_process_handleD1Ev, .Ltmp265-_ZN7sc_core17sc_process_handleD1Ev
	.cfi_endproc

	.text
	.globl	_ZN7WBSlave12processSlaveEv
	.align	16, 0x90
	.type	_ZN7WBSlave12processSlaveEv,@function
_ZN7WBSlave12processSlaveEv:            # @_ZN7WBSlave12processSlaveEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp268:
	.cfi_def_cfa_offset 16
.Ltmp269:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp270:
	.cfi_def_cfa_register %rbp
	subq	$1152, %rsp             # imm = 0x480
	movabsq	$1, %rax
	cvtsi2ssq	%rax, %xmm0
	movabsq	$4096, %rax             # imm = 0x1000
	cvtsi2ssq	%rax, %xmm1
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, -20(%rbp)
	movss	%xmm1, -1080(%rbp)
	movss	%xmm0, -1084(%rbp)
	movq	%rax, -1096(%rbp)       # 8-byte Spill
.LBB19_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_39 Depth 2
                                        #     Child Loop BB19_18 Depth 2
                                        #       Child Loop BB19_31 Depth 3
                                        #       Child Loop BB19_20 Depth 3
                                        #         Child Loop BB19_23 Depth 4
                                        #     Child Loop BB19_9 Depth 2
                                        #       Child Loop BB19_12 Depth 3
                                        #     Child Loop BB19_5 Depth 2
                                        #     Child Loop BB19_2 Depth 2
	jmp	.LBB19_2
.LBB19_2:                               #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-1096(%rbp), %rax       # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	jne	.LBB19_4
# BB#3:                                 #   in Loop: Header=BB19_2 Depth=2
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB19_2
.LBB19_4:                               #   in Loop: Header=BB19_1 Depth=1
	movq	-1096(%rbp), %rax       # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	movl	1928(%rdi,%rax,4), %eax
	cvtsi2ssq	%rax, %xmm0
	movss	%xmm0, -1080(%rbp)
	callq	_ZN7sc_core9sc_module4waitEv
	movl	$0, -12(%rbp)
.LBB19_5:                               #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$256, -12(%rbp)         # imm = 0x100
	jge	.LBB19_8
# BB#6:                                 #   in Loop: Header=BB19_5 Depth=2
	movl	-12(%rbp), %eax
	addl	$64, %eax
	movslq	%eax, %rcx
	movq	-1096(%rbp), %rdx       # 8-byte Reload
	movl	1992(%rdx,%rcx,4), %ecx
	cvtsi2ssq	%rcx, %xmm0
	movss	%xmm0, -1076(%rbp)
	movss	-1076(%rbp), %xmm0
	divss	-1080(%rbp), %xmm0
	movslq	-12(%rbp), %rcx
	movss	%xmm0, -1072(%rbp,%rcx,4)
	movq	%rdx, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
# BB#7:                                 #   in Loop: Header=BB19_5 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_5
.LBB19_8:                               #   in Loop: Header=BB19_1 Depth=1
	xorps	%xmm0, %xmm0
	movl	$0, -12(%rbp)
	movss	%xmm0, -24(%rbp)
.LBB19_9:                               #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_12 Depth 3
	cmpl	$256, -12(%rbp)         # imm = 0x100
	jge	.LBB19_17
# BB#10:                                #   in Loop: Header=BB19_9 Depth=2
	xorps	%xmm0, %xmm0
	movslq	-12(%rbp), %rax
	cvtss2sd	-1072(%rbp,%rax,4), %xmm1
	ucomisd	%xmm0, %xmm1
	jne	.LBB19_11
	jp	.LBB19_11
	jmp	.LBB19_15
.LBB19_11:                              #   in Loop: Header=BB19_9 Depth=2
	movl	$1, %esi
	movslq	-12(%rbp), %rax
	movss	-1072(%rbp,%rax,4), %xmm0
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movss	%xmm0, 4040(%rax)
	addq	$4048, %rax             # imm = 0xFD0
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	%rax, -1104(%rbp)       # 8-byte Spill
.LBB19_12:                              #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-1096(%rbp), %rax       # 8-byte Reload
	addq	$4072, %rax             # imm = 0xFE8
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	cmpq	$0, %rax
	jne	.LBB19_14
# BB#13:                                #   in Loop: Header=BB19_12 Depth=3
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB19_12
.LBB19_14:                              #   in Loop: Header=BB19_9 Depth=2
	movl	$0, %esi
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movss	4044(%rax), %xmm0
	movss	%xmm0, -1076(%rbp)
	addq	$4048, %rax             # imm = 0xFD0
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	movq	%rax, -1112(%rbp)       # 8-byte Spill
	callq	_ZN7sc_core9sc_module4waitEv
	movslq	-12(%rbp), %rax
	movss	-1072(%rbp,%rax,4), %xmm0
	mulss	-1076(%rbp), %xmm0
	movss	-24(%rbp), %xmm1
	subss	%xmm0, %xmm1
	movss	%xmm1, -24(%rbp)
.LBB19_15:                              #   in Loop: Header=BB19_9 Depth=2
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
# BB#16:                                #   in Loop: Header=BB19_9 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_9
.LBB19_17:                              #   in Loop: Header=BB19_1 Depth=1
	xorps	%xmm0, %xmm0
	movl	$1, -12(%rbp)
	movss	%xmm0, -40(%rbp)
.LBB19_18:                              #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_31 Depth 3
                                        #       Child Loop BB19_20 Depth 3
                                        #         Child Loop BB19_23 Depth 4
	cmpl	$256, -12(%rbp)         # imm = 0x100
	jge	.LBB19_38
# BB#19:                                #   in Loop: Header=BB19_18 Depth=2
	xorps	%xmm0, %xmm0
	movl	$0, -16(%rbp)
	movss	%xmm0, -32(%rbp)
	movss	%xmm0, -28(%rbp)
.LBB19_20:                              #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_23 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB19_28
# BB#21:                                #   in Loop: Header=BB19_20 Depth=3
	xorps	%xmm0, %xmm0
	movslq	-16(%rbp), %rax
	movss	-1072(%rbp,%rax,4), %xmm1
	movss	-28(%rbp), %xmm2
	addss	%xmm1, %xmm2
	movss	%xmm2, -28(%rbp)
	movslq	-16(%rbp), %rax
	cvtss2sd	-1072(%rbp,%rax,4), %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB19_26
# BB#22:                                #   in Loop: Header=BB19_20 Depth=3
	movl	$1, %esi
	movslq	-16(%rbp), %rax
	movss	-1072(%rbp,%rax,4), %xmm0
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movss	%xmm0, 4040(%rax)
	addq	$4048, %rax             # imm = 0xFD0
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	%rax, -1120(%rbp)       # 8-byte Spill
.LBB19_23:                              #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_18 Depth=2
                                        #       Parent Loop BB19_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	-1096(%rbp), %rax       # 8-byte Reload
	addq	$4072, %rax             # imm = 0xFE8
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	cmpq	$0, %rax
	jne	.LBB19_25
# BB#24:                                #   in Loop: Header=BB19_23 Depth=4
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB19_23
.LBB19_25:                              #   in Loop: Header=BB19_20 Depth=3
	movl	$0, %esi
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movss	4044(%rax), %xmm0
	movss	%xmm0, -1076(%rbp)
	addq	$4048, %rax             # imm = 0xFD0
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	movq	%rax, -1128(%rbp)       # 8-byte Spill
	callq	_ZN7sc_core9sc_module4waitEv
	movslq	-16(%rbp), %rax
	movss	-1072(%rbp,%rax,4), %xmm0
	mulss	-1076(%rbp), %xmm0
	movss	-32(%rbp), %xmm1
	subss	%xmm0, %xmm1
	movss	%xmm1, -32(%rbp)
.LBB19_26:                              #   in Loop: Header=BB19_20 Depth=3
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
# BB#27:                                #   in Loop: Header=BB19_20 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_20
.LBB19_28:                              #   in Loop: Header=BB19_18 Depth=2
	xorps	%xmm0, %xmm0
	cvtss2sd	-28(%rbp), %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	.LBB19_34
# BB#29:                                #   in Loop: Header=BB19_18 Depth=2
	movabsq	$1, %rax
	cvtsi2sdq	%rax, %xmm0
	cvtss2sd	-28(%rbp), %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB19_34
# BB#30:                                #   in Loop: Header=BB19_18 Depth=2
	movss	-28(%rbp), %xmm0
	movss	-28(%rbp), %xmm1
	mulss	-28(%rbp), %xmm1
	subss	%xmm1, %xmm0
	movss	%xmm0, -1076(%rbp)
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	movl	$1, %esi
	movss	-1076(%rbp), %xmm0
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movss	%xmm0, 4040(%rax)
	addq	$4048, %rax             # imm = 0xFD0
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	%rax, -1136(%rbp)       # 8-byte Spill
.LBB19_31:                              #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-1096(%rbp), %rax       # 8-byte Reload
	addq	$4072, %rax             # imm = 0xFE8
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	cmpq	$0, %rax
	jne	.LBB19_33
# BB#32:                                #   in Loop: Header=BB19_31 Depth=3
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB19_31
.LBB19_33:                              #   in Loop: Header=BB19_18 Depth=2
	movl	$0, %esi
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movss	4044(%rax), %xmm0
	movss	%xmm0, -1076(%rbp)
	addq	$4048, %rax             # imm = 0xFD0
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	movq	%rax, -1144(%rbp)       # 8-byte Spill
	callq	_ZN7sc_core9sc_module4waitEv
	movss	-1076(%rbp), %xmm0
	movss	-32(%rbp), %xmm1
	divss	-28(%rbp), %xmm1
	addss	%xmm1, %xmm0
	movss	-24(%rbp), %xmm1
	subss	-32(%rbp), %xmm1
	movss	-1084(%rbp), %xmm2
	subss	-28(%rbp), %xmm2
	divss	%xmm2, %xmm1
	addss	%xmm1, %xmm0
	movss	%xmm0, -36(%rbp)
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
.LBB19_34:                              #   in Loop: Header=BB19_18 Depth=2
	movss	-36(%rbp), %xmm0
	ucomiss	-40(%rbp), %xmm0
	jbe	.LBB19_36
# BB#35:                                #   in Loop: Header=BB19_18 Depth=2
	movss	-36(%rbp), %xmm0
	movss	%xmm0, -40(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-1096(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
.LBB19_36:                              #   in Loop: Header=BB19_18 Depth=2
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
# BB#37:                                #   in Loop: Header=BB19_18 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_18
.LBB19_38:                              #   in Loop: Header=BB19_1 Depth=1
	leaq	_ZSt4cout, %rdi
	leaq	.L.str12, %rsi
	callq	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movl	-20(%rbp), %esi
	movq	%rax, %rdi
	callq	_ZNSolsEi
	leaq	.L.str13, %rsi
	movq	%rax, %rdi
	callq	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movl	-20(%rbp), %ecx
	movq	-1096(%rbp), %rsi       # 8-byte Reload
	movl	%ecx, 2248(%rsi)
	addq	$4016, %rsi             # imm = 0xFB0
	movq	%rsi, %rdi
	movq	%rax, -1152(%rbp)       # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-1096(%rbp), %rsi       # 8-byte Reload
	movl	1928(%rsi,%rax,4), %ecx
	orl	$1, %ecx
	movl	%ecx, 1928(%rsi,%rax,4)
.LBB19_39:                              #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-1096(%rbp), %rax       # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	je	.LBB19_41
# BB#40:                                #   in Loop: Header=BB19_39 Depth=2
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB19_39
.LBB19_41:                              #   in Loop: Header=BB19_1 Depth=1
	movq	-1096(%rbp), %rax       # 8-byte Reload
	addq	$4016, %rax             # imm = 0xFB0
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	movl	1928(%rdi,%rax,4), %ecx
	andl	$0, %ecx
	movl	%ecx, 1928(%rdi,%rax,4)
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB19_1
.Ltmp271:
	.size	_ZN7WBSlave12processSlaveEv, .Ltmp271-_ZN7WBSlave12processSlaveEv
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI20_0:
	.quad	4591870180066957722     # double 1.000000e-01
                                        #  (0x3fb999999999999a)
	.text
	.globl	_ZN7WBSlave6getLogEv
	.align	16, 0x90
	.type	_ZN7WBSlave6getLogEv,@function
_ZN7WBSlave6getLogEv:                   # @_ZN7WBSlave6getLogEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp274:
	.cfi_def_cfa_offset 16
.Ltmp275:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp276:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$0, %esi
	movabsq	$1, %rax
	cvtsi2ssq	%rax, %xmm0
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movss	%xmm0, -28(%rbp)
	movq	%rax, %rdi
	addq	$4048, %rdi             # imm = 0xFD0
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movl	$0, %esi
	movq	-40(%rbp), %rdi         # 8-byte Reload
	addq	$4072, %rdi             # imm = 0xFE8
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB20_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_24 Depth 2
                                        #     Child Loop BB20_6 Depth 2
                                        #     Child Loop BB20_2 Depth 2
                                        #     Child Loop BB20_16 Depth 2
	jmp	.LBB20_2
.LBB20_2:                               #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$4048, %rax             # imm = 0xFD0
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	cmpq	$0, %rax
	jne	.LBB20_4
# BB#3:                                 #   in Loop: Header=BB20_2 Depth=2
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB20_2
.LBB20_4:                               #   in Loop: Header=BB20_1 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	movsd	.LCPI20_0, %xmm0
	movq	-40(%rbp), %rax         # 8-byte Reload
	cvtss2sd	4040(%rax), %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB20_15
# BB#5:                                 #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -12(%rbp)
.LBB20_6:                               #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$35, -12(%rbp)
	jae	.LBB20_14
# BB#7:                                 #   in Loop: Header=BB20_6 Depth=2
	movq	-40(%rbp), %rax         # 8-byte Reload
	movss	4040(%rax), %xmm0
	movl	-12(%rbp), %ecx
	ucomiss	_ZZN7WBSlave6getLogEvE8inputLUT(,%rcx,4), %xmm0
	jne	.LBB20_9
	jp	.LBB20_9
# BB#8:                                 #   in Loop: Header=BB20_1 Depth=1
	movl	$1, %esi
	movl	-12(%rbp), %eax
	movss	_ZZN7WBSlave6getLogEvE6logLUT(,%rax,4), %xmm0
	movq	-40(%rbp), %rax         # 8-byte Reload
	movss	%xmm0, 4044(%rax)
	addq	$4072, %rax             # imm = 0xFE8
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB20_14
.LBB20_9:                               #   in Loop: Header=BB20_6 Depth=2
	movq	-40(%rbp), %rax         # 8-byte Reload
	movss	4040(%rax), %xmm0
	movl	-12(%rbp), %ecx
	ucomiss	_ZZN7WBSlave6getLogEvE8inputLUT(,%rcx,4), %xmm0
	jbe	.LBB20_12
# BB#10:                                #   in Loop: Header=BB20_6 Depth=2
	movq	-40(%rbp), %rax         # 8-byte Reload
	movss	4040(%rax), %xmm0
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %edx
	movss	_ZZN7WBSlave6getLogEvE8inputLUT(,%rdx,4), %xmm1
	ucomiss	%xmm0, %xmm1
	jbe	.LBB20_12
# BB#11:                                #   in Loop: Header=BB20_1 Depth=1
	movl	-12(%rbp), %eax
	movss	_ZZN7WBSlave6getLogEvE11gradientLUT(,%rax,4), %xmm0
	movq	-40(%rbp), %rax         # 8-byte Reload
	mulss	4040(%rax), %xmm0
	movss	%xmm0, 4044(%rax)
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	movl	-12(%rbp), %eax
	movss	_ZZN7WBSlave6getLogEvE9offsetLUT(,%rax,4), %xmm0
	movq	-40(%rbp), %rax         # 8-byte Reload
	movss	4044(%rax), %xmm1
	addss	%xmm0, %xmm1
	movss	%xmm1, 4044(%rax)
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	movl	$1, %esi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$4072, %rax             # imm = 0xFE8
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB20_14
.LBB20_12:                              #   in Loop: Header=BB20_6 Depth=2
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
# BB#13:                                #   in Loop: Header=BB20_6 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_6
.LBB20_14:                              #   in Loop: Header=BB20_1 Depth=1
	jmp	.LBB20_23
.LBB20_15:                              #   in Loop: Header=BB20_1 Depth=1
	movabsq	$1, %rax
	cvtsi2ssq	%rax, %xmm0
	xorps	%xmm1, %xmm1
	movss	%xmm1, -20(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	movss	4040(%rax), %xmm1
	subss	-28(%rbp), %xmm1
	movss	%xmm1, -24(%rbp)
	movss	%xmm0, -16(%rbp)
	movl	$1, -12(%rbp)
.LBB20_16:                              #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	ja	.LBB20_22
# BB#17:                                #   in Loop: Header=BB20_16 Depth=2
	movss	-16(%rbp), %xmm0
	mulss	-24(%rbp), %xmm0
	movss	%xmm0, -16(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB20_19
# BB#18:                                #   in Loop: Header=BB20_16 Depth=2
	movss	-28(%rbp), %xmm0
	movl	-12(%rbp), %eax
	cvtsi2ssq	%rax, %xmm1
	divss	%xmm1, %xmm0
	mulss	-16(%rbp), %xmm0
	movss	-20(%rbp), %xmm1
	subss	%xmm0, %xmm1
	movss	%xmm1, -20(%rbp)
	jmp	.LBB20_20
.LBB20_19:                              #   in Loop: Header=BB20_16 Depth=2
	movss	-28(%rbp), %xmm0
	movl	-12(%rbp), %eax
	cvtsi2ssq	%rax, %xmm1
	divss	%xmm1, %xmm0
	mulss	-16(%rbp), %xmm0
	movss	-20(%rbp), %xmm1
	addss	%xmm0, %xmm1
	movss	%xmm1, -20(%rbp)
.LBB20_20:                              #   in Loop: Header=BB20_16 Depth=2
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
# BB#21:                                #   in Loop: Header=BB20_16 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_16
.LBB20_22:                              #   in Loop: Header=BB20_1 Depth=1
	movl	$1, %esi
	movss	-20(%rbp), %xmm0
	movq	-40(%rbp), %rax         # 8-byte Reload
	movss	%xmm0, 4044(%rax)
	addq	$4072, %rax             # imm = 0xFE8
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_module4waitEv
.LBB20_23:                              #   in Loop: Header=BB20_1 Depth=1
	jmp	.LBB20_24
.LBB20_24:                              #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$4048, %rax             # imm = 0xFD0
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	cmpq	$1, %rax
	jne	.LBB20_26
# BB#25:                                #   in Loop: Header=BB20_24 Depth=2
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB20_24
.LBB20_26:                              #   in Loop: Header=BB20_1 Depth=1
	movl	$0, %esi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$4072, %rax             # imm = 0xFE8
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EEaSEi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB20_1
.Ltmp277:
	.size	_ZN7WBSlave6getLogEv, .Ltmp277-_ZN7WBSlave6getLogEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi3EED1Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EED1Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EED1Ev,@function
_ZN5sc_dt7sc_uintILi3EED1Ev:            # @_ZN5sc_dt7sc_uintILi3EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp280:
	.cfi_def_cfa_offset 16
.Ltmp281:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp282:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp283:
	.size	_ZN5sc_dt7sc_uintILi3EED1Ev, .Ltmp283-_ZN5sc_dt7sc_uintILi3EED1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EED1Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EED1Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EED1Ev,@function
_ZN5sc_dt7sc_uintILi1EED1Ev:            # @_ZN5sc_dt7sc_uintILi1EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp286:
	.cfi_def_cfa_offset 16
.Ltmp287:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp288:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp289:
	.size	_ZN5sc_dt7sc_uintILi1EED1Ev, .Ltmp289-_ZN5sc_dt7sc_uintILi1EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIbED1Ev,"axG",@progbits,_ZN7sc_core6sc_outIbED1Ev,comdat
	.weak	_ZN7sc_core6sc_outIbED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbED1Ev,@function
_ZN7sc_core6sc_outIbED1Ev:              # @_ZN7sc_core6sc_outIbED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp292:
	.cfi_def_cfa_offset 16
.Ltmp293:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp294:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core6sc_outIbED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp295:
	.size	_ZN7sc_core6sc_outIbED1Ev, .Ltmp295-_ZN7sc_core6sc_outIbED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp298:
	.cfi_def_cfa_offset 16
.Ltmp299:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp300:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp301:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev, .Ltmp301-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp304:
	.cfi_def_cfa_offset 16
.Ltmp305:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp306:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp307:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev, .Ltmp307-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIbED1Ev,"axG",@progbits,_ZN7sc_core5sc_inIbED1Ev,comdat
	.weak	_ZN7sc_core5sc_inIbED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIbED1Ev,@function
_ZN7sc_core5sc_inIbED1Ev:               # @_ZN7sc_core5sc_inIbED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp310:
	.cfi_def_cfa_offset 16
.Ltmp311:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp312:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIbED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp313:
	.size	_ZN7sc_core5sc_inIbED1Ev, .Ltmp313-_ZN7sc_core5sc_inIbED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp316:
	.cfi_def_cfa_offset 16
.Ltmp317:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp318:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp319:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev, .Ltmp319-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EEaSEi,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EEaSEi,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EEaSEi
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EEaSEi,@function
_ZN5sc_dt7sc_uintILi1EEaSEi:            # @_ZN5sc_dt7sc_uintILi1EEaSEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp322:
	.cfi_def_cfa_offset 16
.Ltmp323:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp324:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movl	-12(%rbp), %esi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt12sc_uint_baseaSEi
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp325:
	.size	_ZN5sc_dt7sc_uintILi1EEaSEi, .Ltmp325-_ZN5sc_dt7sc_uintILi1EEaSEi
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_basecvyEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_basecvyEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_basecvyEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_basecvyEv,@function
_ZNK5sc_dt12sc_uint_basecvyEv:          # @_ZNK5sc_dt12sc_uint_basecvyEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp326:
	.size	_ZNK5sc_dt12sc_uint_basecvyEv, .Ltmp326-_ZNK5sc_dt12sc_uint_basecvyEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_module4waitEv,"axG",@progbits,_ZN7sc_core9sc_module4waitEv,comdat
	.weak	_ZN7sc_core9sc_module4waitEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_module4waitEv,@function
_ZN7sc_core9sc_module4waitEv:           # @_ZN7sc_core9sc_module4waitEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp329:
	.cfi_def_cfa_offset 16
.Ltmp330:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp331:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_object10simcontextEv
	movq	%rax, %rdi
	callq	_ZN7sc_core4waitEPNS_13sc_simcontextE
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp332:
	.size	_ZN7sc_core9sc_module4waitEv, .Ltmp332-_ZN7sc_core9sc_module4waitEv
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp335:
	.cfi_def_cfa_offset 16
.Ltmp336:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp337:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	movq	%rax, %rsi
	addq	$8, %rsi
	movq	8(%rax), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp338:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_, .Ltmp338-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC1Ei,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC1Ei,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC1Ei
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC1Ei,@function
_ZN5sc_dt7sc_uintILi32EEC1Ei:           # @_ZN5sc_dt7sc_uintILi32EEC1Ei
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp341:
	.cfi_def_cfa_offset 16
.Ltmp342:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp343:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	_ZN5sc_dt7sc_uintILi32EEC2Ei
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp344:
	.size	_ZN5sc_dt7sc_uintILi32EEC1Ei, .Ltmp344-_ZN5sc_dt7sc_uintILi32EEC1Ei
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EED1Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EED1Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EED1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EED1Ev,@function
_ZN5sc_dt7sc_uintILi32EED1Ev:           # @_ZN5sc_dt7sc_uintILi32EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp347:
	.cfi_def_cfa_offset 16
.Ltmp348:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp349:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp350:
	.size	_ZN5sc_dt7sc_uintILi32EED1Ev, .Ltmp350-_ZN5sc_dt7sc_uintILi32EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIbE5writeERKb,"axG",@progbits,_ZN7sc_core8sc_inoutIbE5writeERKb,comdat
	.weak	_ZN7sc_core8sc_inoutIbE5writeERKb
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIbE5writeERKb,@function
_ZN7sc_core8sc_inoutIbE5writeERKb:      # @_ZN7sc_core8sc_inoutIbE5writeERKb
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp353:
	.cfi_def_cfa_offset 16
.Ltmp354:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp355:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv
	movq	%rax, %rsi
	addq	$8, %rsi
	movq	8(%rax), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp356:
	.size	_ZN7sc_core8sc_inoutIbE5writeERKb, .Ltmp356-_ZN7sc_core8sc_inoutIbE5writeERKb
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIbE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIbE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIbE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIbE4readEv,@function
_ZNK7sc_core5sc_inIbE4readEv:           # @_ZNK7sc_core5sc_inIbE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp359:
	.cfi_def_cfa_offset 16
.Ltmp360:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp361:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*56(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp362:
	.size	_ZNK7sc_core5sc_inIbE4readEv, .Ltmp362-_ZNK7sc_core5sc_inIbE4readEv
	.cfi_endproc

	.text
	.globl	_ZN7WBSlave7receiveEv
	.align	16, 0x90
	.type	_ZN7WBSlave7receiveEv,@function
_ZN7WBSlave7receiveEv:                  # @_ZN7WBSlave7receiveEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin36:
	.cfi_lsda 3, .Lexception36
# BB#0:
	pushq	%rbp
.Ltmp405:
	.cfi_def_cfa_offset 16
.Ltmp406:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp407:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	addq	$528, %rax              # imm = 0x210
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	shrq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$672, %rax              # imm = 0x2A0
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	leaq	-40(%rbp), %rdi
	movq	%rax, %rsi
	callq	_ZN5sc_dt7sc_uintILi32EEC1ERKS1_
	cmpl	$15, -12(%rbp)
	ja	.LBB36_14
# BB#1:
.Ltmp381:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave15gen_select_maskEv
.Ltmp382:
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB36_2
.LBB36_2:
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %ecx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movl	1928(%rdx,%rcx,4), %esi
	notl	%eax
	andl	%eax, %esi
	movl	%esi, %ecx
	leaq	-40(%rbp), %rdi
.Ltmp383:
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp384:
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB36_3
.LBB36_3:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	movl	-44(%rbp), %edx
	andl	%edx, %ecx
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movl	%esi, %edx
	orl	%ecx, %edx
	movl	-12(%rbp), %edi
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	%edx, 1928(%r8,%rdi,4)
	addq	$4216, %r8              # imm = 0x1078
.Ltmp385:
	movq	%r8, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp386:
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB36_4
.LBB36_4:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpl	$0, 1928(%rax,%rcx,4)
	jbe	.LBB36_9
# BB#5:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$4216, %rax             # imm = 0x1078
	movq	-72(%rbp), %rcx         # 8-byte Reload
.Ltmp387:
	movq	%rax, %rdi
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp388:
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB36_6
.LBB36_6:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movl	1928(%rax,%rcx,4), %esi
.Ltmp389:
	movq	-112(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEi
.Ltmp390:
	jmp	.LBB36_7
.LBB36_7:
	jmp	.LBB36_9
.LBB36_8:
.Ltmp399:
	movl	%edx, %ecx
	movq	%rax, -56(%rbp)
	movl	%ecx, -60(%rbp)
.Ltmp400:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp401:
	jmp	.LBB36_30
.LBB36_9:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	leaq	-61(%rbp), %rsi
	movb	$1, -61(%rbp)
.Ltmp391:
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
.Ltmp392:
	jmp	.LBB36_10
.LBB36_10:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
	movq	-72(%rbp), %rcx         # 8-byte Reload
	addq	$4016, %rcx             # imm = 0xFB0
.Ltmp393:
	movq	%rcx, %rdi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp394:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB36_11
.LBB36_11:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-136(%rbp), %rcx        # 8-byte Reload
	movl	1928(%rax,%rcx,4), %edx
	leaq	-62(%rbp), %rsi
	testl	%edx, %edx
	setne	-62(%rbp)
.Ltmp395:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
.Ltmp396:
	jmp	.LBB36_12
.LBB36_12:
.Ltmp397:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp398:
	jmp	.LBB36_13
.LBB36_13:
	jmp	.LBB36_29
.LBB36_14:
	cmpl	$64, -12(%rbp)
	jb	.LBB36_28
# BB#15:
	cmpl	$320, -12(%rbp)         # imm = 0x140
	jae	.LBB36_28
# BB#16:
.Ltmp363:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave15gen_select_maskEv
.Ltmp364:
	movl	%eax, -140(%rbp)        # 4-byte Spill
	jmp	.LBB36_17
.LBB36_17:
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %ecx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movl	1992(%rdx,%rcx,4), %esi
	notl	%eax
	andl	%eax, %esi
	movl	%esi, %ecx
	leaq	-40(%rbp), %rdi
.Ltmp365:
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp366:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB36_18
.LBB36_18:
	movq	-160(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	-44(%rbp), %edx
	andl	%edx, %ecx
	movq	-152(%rbp), %rsi        # 8-byte Reload
	movl	%esi, %edx
	orl	%ecx, %edx
	movl	-12(%rbp), %edi
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	%edx, 1992(%r8,%rdi,4)
	addq	$4216, %r8              # imm = 0x1078
.Ltmp367:
	movq	%r8, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp368:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB36_19
.LBB36_19:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpl	$0, 1928(%rax,%rcx,4)
	jbe	.LBB36_23
# BB#20:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$4216, %rax             # imm = 0x1078
	movq	-72(%rbp), %rcx         # 8-byte Reload
.Ltmp369:
	movq	%rax, %rdi
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp370:
	movq	%rax, -184(%rbp)        # 8-byte Spill
	jmp	.LBB36_21
.LBB36_21:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-184(%rbp), %rcx        # 8-byte Reload
	movl	1928(%rax,%rcx,4), %esi
.Ltmp371:
	movq	-176(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEi
.Ltmp372:
	jmp	.LBB36_22
.LBB36_22:
	jmp	.LBB36_23
.LBB36_23:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	leaq	-63(%rbp), %rsi
	movb	$1, -63(%rbp)
.Ltmp373:
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
.Ltmp374:
	jmp	.LBB36_24
.LBB36_24:
	movq	-72(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
	movq	-72(%rbp), %rcx         # 8-byte Reload
	addq	$4016, %rcx             # imm = 0xFB0
.Ltmp375:
	movq	%rcx, %rdi
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
.Ltmp376:
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB36_25
.LBB36_25:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movl	1928(%rax,%rcx,4), %edx
	leaq	-64(%rbp), %rsi
	testl	%edx, %edx
	setne	-64(%rbp)
.Ltmp377:
	movq	-192(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
.Ltmp378:
	jmp	.LBB36_26
.LBB36_26:
.Ltmp379:
	movq	-72(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEv
.Ltmp380:
	jmp	.LBB36_27
.LBB36_27:
	jmp	.LBB36_28
.LBB36_28:
	jmp	.LBB36_29
.LBB36_29:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
	addq	$224, %rsp
	popq	%rbp
	ret
.LBB36_30:
	jmp	.LBB36_31
.LBB36_31:
	movq	-56(%rbp), %rdi
	callq	_Unwind_Resume
.LBB36_32:
.Ltmp402:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp408:
	.size	_ZN7WBSlave7receiveEv, .Ltmp408-_ZN7WBSlave7receiveEv
	.cfi_endproc
.Leh_func_end36:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table36:
.Lexception36:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	73                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	65                      # Call site table length
.Lset120 = .Leh_func_begin36-.Leh_func_begin36 # >> Call Site 1 <<
	.long	.Lset120
.Lset121 = .Ltmp381-.Leh_func_begin36   #   Call between .Leh_func_begin36 and .Ltmp381
	.long	.Lset121
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset122 = .Ltmp381-.Leh_func_begin36   # >> Call Site 2 <<
	.long	.Lset122
.Lset123 = .Ltmp390-.Ltmp381            #   Call between .Ltmp381 and .Ltmp390
	.long	.Lset123
.Lset124 = .Ltmp399-.Leh_func_begin36   #     jumps to .Ltmp399
	.long	.Lset124
	.byte	0                       #   On action: cleanup
.Lset125 = .Ltmp400-.Leh_func_begin36   # >> Call Site 3 <<
	.long	.Lset125
.Lset126 = .Ltmp401-.Ltmp400            #   Call between .Ltmp400 and .Ltmp401
	.long	.Lset126
.Lset127 = .Ltmp402-.Leh_func_begin36   #     jumps to .Ltmp402
	.long	.Lset127
	.byte	1                       #   On action: 1
.Lset128 = .Ltmp391-.Leh_func_begin36   # >> Call Site 4 <<
	.long	.Lset128
.Lset129 = .Ltmp380-.Ltmp391            #   Call between .Ltmp391 and .Ltmp380
	.long	.Lset129
.Lset130 = .Ltmp399-.Leh_func_begin36   #     jumps to .Ltmp399
	.long	.Lset130
	.byte	0                       #   On action: cleanup
.Lset131 = .Ltmp380-.Leh_func_begin36   # >> Call Site 5 <<
	.long	.Lset131
.Lset132 = .Leh_func_end36-.Ltmp380     #   Call between .Ltmp380 and .Leh_func_end36
	.long	.Lset132
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.text
	.globl	_ZN7WBSlave4sendEv
	.align	16, 0x90
	.type	_ZN7WBSlave4sendEv,@function
_ZN7WBSlave4sendEv:                     # @_ZN7WBSlave4sendEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin37:
	.cfi_lsda 3, .Lexception37
# BB#0:
	pushq	%rbp
.Ltmp422:
	.cfi_def_cfa_offset 16
.Ltmp423:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp424:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	addq	$528, %rax              # imm = 0x210
	movq	%rdi, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	shrq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	cmpl	$15, -12(%rbp)
	ja	.LBB37_7
# BB#1:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave15gen_select_maskEv
	movl	%eax, -16(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	addq	$1440, %rdi             # imm = 0x5A0
	movl	-12(%rbp), %ecx
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movl	1928(%rdx,%rcx,4), %esi
	andl	%eax, %esi
	leaq	-40(%rbp), %rcx
	movq	%rdi, -104(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi32EEC1Ej
.Ltmp414:
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
.Ltmp415:
	jmp	.LBB37_2
.LBB37_2:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
	movq	-96(%rbp), %rdi         # 8-byte Reload
	addq	$4216, %rdi             # imm = 0x1078
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	jbe	.LBB37_6
# BB#3:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	addq	$4216, %rcx             # imm = 0x1078
	movq	%rcx, %rdi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	1928(%rcx,%rax,4), %esi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEi
	jmp	.LBB37_6
.LBB37_4:
.Ltmp416:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp417:
	leaq	-40(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp418:
	jmp	.LBB37_5
.LBB37_5:
	jmp	.LBB37_17
.LBB37_6:
	leaq	-53(%rbp), %rsi
	movq	-96(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	movb	$1, -53(%rbp)
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-96(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
	movq	-96(%rbp), %rsi         # 8-byte Reload
	addq	$4016, %rsi             # imm = 0xFB0
	movq	%rsi, %rdi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	leaq	-54(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	setne	%cl
	andb	$1, %cl
	movb	%cl, -54(%rbp)
	movq	-128(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
	jmp	.LBB37_16
.LBB37_7:
	cmpl	$64, -12(%rbp)
	jb	.LBB37_15
# BB#8:
	cmpl	$320, -12(%rbp)         # imm = 0x140
	jae	.LBB37_15
# BB#9:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7WBSlave15gen_select_maskEv
	movl	%eax, -16(%rbp)
	movq	-96(%rbp), %rdi         # 8-byte Reload
	addq	$1440, %rdi             # imm = 0x5A0
	movl	-12(%rbp), %ecx
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movl	1992(%rdx,%rcx,4), %esi
	andl	%eax, %esi
	leaq	-80(%rbp), %rcx
	movq	%rdi, -136(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi32EEC1Ej
.Ltmp409:
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
.Ltmp410:
	jmp	.LBB37_10
.LBB37_10:
	leaq	-80(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
	movq	-96(%rbp), %rdi         # 8-byte Reload
	addq	$4216, %rdi             # imm = 0x1078
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	jbe	.LBB37_14
# BB#11:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	addq	$4216, %rcx             # imm = 0x1078
	movq	%rcx, %rdi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movl	1928(%rcx,%rax,4), %esi
	movq	-152(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core9sc_module4waitEi
	jmp	.LBB37_14
.LBB37_12:
.Ltmp411:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
.Ltmp412:
	leaq	-80(%rbp), %rdi
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp413:
	jmp	.LBB37_13
.LBB37_13:
	jmp	.LBB37_17
.LBB37_14:
	leaq	-81(%rbp), %rsi
	movq	-96(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
	movb	$1, -81(%rbp)
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-96(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
	movq	-96(%rbp), %rsi         # 8-byte Reload
	addq	$4016, %rsi             # imm = 0xFB0
	movq	%rsi, %rdi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	leaq	-82(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpl	$0, 1928(%rdi,%rax,4)
	setne	%cl
	andb	$1, %cl
	movb	%cl, -82(%rbp)
	movq	-160(%rbp), %rdi        # 8-byte Reload
	callq	_ZN7sc_core8sc_inoutIbE5writeERKb
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_module4waitEv
.LBB37_15:
	jmp	.LBB37_16
.LBB37_16:
	addq	$176, %rsp
	popq	%rbp
	ret
.LBB37_17:
	movq	-48(%rbp), %rdi
	callq	_Unwind_Resume
.LBB37_18:
.Ltmp419:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp425:
	.size	_ZN7WBSlave4sendEv, .Ltmp425-_ZN7WBSlave4sendEv
	.cfi_endproc
.Leh_func_end37:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table37:
.Lexception37:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	125                     # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	117                     # Call site table length
.Lset133 = .Leh_func_begin37-.Leh_func_begin37 # >> Call Site 1 <<
	.long	.Lset133
.Lset134 = .Ltmp414-.Leh_func_begin37   #   Call between .Leh_func_begin37 and .Ltmp414
	.long	.Lset134
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset135 = .Ltmp414-.Leh_func_begin37   # >> Call Site 2 <<
	.long	.Lset135
.Lset136 = .Ltmp415-.Ltmp414            #   Call between .Ltmp414 and .Ltmp415
	.long	.Lset136
.Lset137 = .Ltmp416-.Leh_func_begin37   #     jumps to .Ltmp416
	.long	.Lset137
	.byte	0                       #   On action: cleanup
.Lset138 = .Ltmp415-.Leh_func_begin37   # >> Call Site 3 <<
	.long	.Lset138
.Lset139 = .Ltmp417-.Ltmp415            #   Call between .Ltmp415 and .Ltmp417
	.long	.Lset139
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset140 = .Ltmp417-.Leh_func_begin37   # >> Call Site 4 <<
	.long	.Lset140
.Lset141 = .Ltmp418-.Ltmp417            #   Call between .Ltmp417 and .Ltmp418
	.long	.Lset141
.Lset142 = .Ltmp419-.Leh_func_begin37   #     jumps to .Ltmp419
	.long	.Lset142
	.byte	1                       #   On action: 1
.Lset143 = .Ltmp418-.Leh_func_begin37   # >> Call Site 5 <<
	.long	.Lset143
.Lset144 = .Ltmp409-.Ltmp418            #   Call between .Ltmp418 and .Ltmp409
	.long	.Lset144
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset145 = .Ltmp409-.Leh_func_begin37   # >> Call Site 6 <<
	.long	.Lset145
.Lset146 = .Ltmp410-.Ltmp409            #   Call between .Ltmp409 and .Ltmp410
	.long	.Lset146
.Lset147 = .Ltmp411-.Leh_func_begin37   #     jumps to .Ltmp411
	.long	.Lset147
	.byte	0                       #   On action: cleanup
.Lset148 = .Ltmp410-.Leh_func_begin37   # >> Call Site 7 <<
	.long	.Lset148
.Lset149 = .Ltmp412-.Ltmp410            #   Call between .Ltmp410 and .Ltmp412
	.long	.Lset149
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset150 = .Ltmp412-.Leh_func_begin37   # >> Call Site 8 <<
	.long	.Lset150
.Lset151 = .Ltmp413-.Ltmp412            #   Call between .Ltmp412 and .Ltmp413
	.long	.Lset151
.Lset152 = .Ltmp419-.Leh_func_begin37   #     jumps to .Ltmp419
	.long	.Lset152
	.byte	1                       #   On action: 1
.Lset153 = .Ltmp413-.Leh_func_begin37   # >> Call Site 9 <<
	.long	.Lset153
.Lset154 = .Leh_func_end37-.Ltmp413     #   Call between .Ltmp413 and .Leh_func_end37
	.long	.Lset154
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp428:
	.cfi_def_cfa_offset 16
.Ltmp429:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp430:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp431:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv, .Ltmp431-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4readEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC1ERKS1_,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC1ERKS1_,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC1ERKS1_
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC1ERKS1_,@function
_ZN5sc_dt7sc_uintILi32EEC1ERKS1_:       # @_ZN5sc_dt7sc_uintILi32EEC1ERKS1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp434:
	.cfi_def_cfa_offset 16
.Ltmp435:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp436:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN5sc_dt7sc_uintILi32EEC2ERKS1_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp437:
	.size	_ZN5sc_dt7sc_uintILi32EEC1ERKS1_, .Ltmp437-_ZN5sc_dt7sc_uintILi32EEC1ERKS1_
	.cfi_endproc

	.text
	.globl	_ZN7WBSlave15gen_select_maskEv
	.align	16, 0x90
	.type	_ZN7WBSlave15gen_select_maskEv,@function
_ZN7WBSlave15gen_select_maskEv:         # @_ZN7WBSlave15gen_select_maskEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp440:
	.cfi_def_cfa_offset 16
.Ltmp441:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp442:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	$0, -12(%rbp)
	addq	$1296, %rdi             # imm = 0x510
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	movq	%rax, %rdi
	callq	_ZNK5sc_dt12sc_uint_basecvyEv
	movl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB40_1:                               # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB40_6
# BB#2:                                 #   in Loop: Header=BB40_1 Depth=1
	movl	-12(%rbp), %eax
	shll	$8, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB40_4
# BB#3:                                 #   in Loop: Header=BB40_1 Depth=1
	movl	-12(%rbp), %eax
	orl	$255, %eax
	movl	%eax, -12(%rbp)
.LBB40_4:                               #   in Loop: Header=BB40_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
# BB#5:                                 #   in Loop: Header=BB40_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_1
.LBB40_6:
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp443:
	.size	_ZN7WBSlave15gen_select_maskEv, .Ltmp443-_ZN7WBSlave15gen_select_maskEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_module4waitEi,"axG",@progbits,_ZN7sc_core9sc_module4waitEi,comdat
	.weak	_ZN7sc_core9sc_module4waitEi
	.align	16, 0x90
	.type	_ZN7sc_core9sc_module4waitEi,@function
_ZN7sc_core9sc_module4waitEi:           # @_ZN7sc_core9sc_module4waitEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp446:
	.cfi_def_cfa_offset 16
.Ltmp447:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp448:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	%esi, -16(%rbp)         # 4-byte Spill
	callq	_ZNK7sc_core9sc_object10simcontextEv
	movl	-16(%rbp), %edi         # 4-byte Reload
	movq	%rax, %rsi
	callq	_ZN7sc_core4waitEiPNS_13sc_simcontextE
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp449:
	.size	_ZN7sc_core9sc_module4waitEi, .Ltmp449-_ZN7sc_core9sc_module4waitEi
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC1Ej,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC1Ej,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC1Ej
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC1Ej,@function
_ZN5sc_dt7sc_uintILi32EEC1Ej:           # @_ZN5sc_dt7sc_uintILi32EEC1Ej
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp452:
	.cfi_def_cfa_offset 16
.Ltmp453:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp454:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	_ZN5sc_dt7sc_uintILi32EEC2Ej
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp455:
	.size	_ZN5sc_dt7sc_uintILi32EEC1Ej, .Ltmp455-_ZN5sc_dt7sc_uintILi32EEC1Ej
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp458:
	.cfi_def_cfa_offset 16
.Ltmp459:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp460:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	movq	(%rax), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-16(%rbp), %rax         # 8-byte Reload
	callq	*40(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp461:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv, .Ltmp461-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4readEv
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observerD1Ev,"axG",@progbits,_ZN5sc_dt17sc_fxval_observerD1Ev,comdat
	.weak	_ZN5sc_dt17sc_fxval_observerD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observerD1Ev,@function
_ZN5sc_dt17sc_fxval_observerD1Ev:       # @_ZN5sc_dt17sc_fxval_observerD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp464:
	.cfi_def_cfa_offset 16
.Ltmp465:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp466:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt17sc_fxval_observerD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp467:
	.size	_ZN5sc_dt17sc_fxval_observerD1Ev, .Ltmp467-_ZN5sc_dt17sc_fxval_observerD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observerD0Ev,"axG",@progbits,_ZN5sc_dt17sc_fxval_observerD0Ev,comdat
	.weak	_ZN5sc_dt17sc_fxval_observerD0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observerD0Ev,@function
_ZN5sc_dt17sc_fxval_observerD0Ev:       # @_ZN5sc_dt17sc_fxval_observerD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin45:
	.cfi_lsda 3, .Lexception45
# BB#0:
	pushq	%rbp
.Ltmp473:
	.cfi_def_cfa_offset 16
.Ltmp474:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp475:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp468:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt17sc_fxval_observerD1Ev
.Ltmp469:
	jmp	.LBB45_1
.LBB45_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB45_2:
.Ltmp470:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp476:
	.size	_ZN5sc_dt17sc_fxval_observerD0Ev, .Ltmp476-_ZN5sc_dt17sc_fxval_observerD0Ev
	.cfi_endproc
.Leh_func_end45:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table45:
.Lexception45:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset155 = .Ltmp468-.Leh_func_begin45   # >> Call Site 1 <<
	.long	.Lset155
.Lset156 = .Ltmp469-.Ltmp468            #   Call between .Ltmp468 and .Ltmp469
	.long	.Lset156
.Lset157 = .Ltmp470-.Leh_func_begin45   #     jumps to .Ltmp470
	.long	.Lset157
	.byte	0                       #   On action: cleanup
.Lset158 = .Ltmp469-.Leh_func_begin45   # >> Call Site 2 <<
	.long	.Lset158
.Lset159 = .Leh_func_end45-.Ltmp469     #   Call between .Ltmp469 and .Leh_func_end45
	.long	.Lset159
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE,@function
_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE: # @_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp477:
	.size	_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE, .Ltmp477-_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE,@function
_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE: # @_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp478:
	.size	_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE, .Ltmp478-_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE,"axG",@progbits,_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE,comdat
	.weak	_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE,@function
_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE: # @_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp479:
	.size	_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE, .Ltmp479-_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observerD1Ev,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observerD1Ev,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observerD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observerD1Ev,@function
_ZN5sc_dt22sc_fxval_fast_observerD1Ev:  # @_ZN5sc_dt22sc_fxval_fast_observerD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp482:
	.cfi_def_cfa_offset 16
.Ltmp483:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp484:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt22sc_fxval_fast_observerD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp485:
	.size	_ZN5sc_dt22sc_fxval_fast_observerD1Ev, .Ltmp485-_ZN5sc_dt22sc_fxval_fast_observerD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observerD0Ev,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observerD0Ev,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observerD0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observerD0Ev,@function
_ZN5sc_dt22sc_fxval_fast_observerD0Ev:  # @_ZN5sc_dt22sc_fxval_fast_observerD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin50:
	.cfi_lsda 3, .Lexception50
# BB#0:
	pushq	%rbp
.Ltmp491:
	.cfi_def_cfa_offset 16
.Ltmp492:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp493:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp486:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt22sc_fxval_fast_observerD1Ev
.Ltmp487:
	jmp	.LBB50_1
.LBB50_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB50_2:
.Ltmp488:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp494:
	.size	_ZN5sc_dt22sc_fxval_fast_observerD0Ev, .Ltmp494-_ZN5sc_dt22sc_fxval_fast_observerD0Ev
	.cfi_endproc
.Leh_func_end50:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table50:
.Lexception50:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset160 = .Ltmp486-.Leh_func_begin50   # >> Call Site 1 <<
	.long	.Lset160
.Lset161 = .Ltmp487-.Ltmp486            #   Call between .Ltmp486 and .Ltmp487
	.long	.Lset161
.Lset162 = .Ltmp488-.Leh_func_begin50   #     jumps to .Ltmp488
	.long	.Lset162
	.byte	0                       #   On action: cleanup
.Lset163 = .Ltmp487-.Leh_func_begin50   # >> Call Site 2 <<
	.long	.Lset163
.Lset164 = .Leh_func_end50-.Ltmp487     #   Call between .Ltmp487 and .Leh_func_end50
	.long	.Lset164
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE,@function
_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE: # @_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp495:
	.size	_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE, .Ltmp495-_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE,@function
_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE: # @_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp496:
	.size	_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE, .Ltmp496-_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE,@function
_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE: # @_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp497:
	.size	_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE, .Ltmp497-_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observerD1Ev,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observerD1Ev,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observerD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observerD1Ev,@function
_ZN5sc_dt17sc_fxnum_observerD1Ev:       # @_ZN5sc_dt17sc_fxnum_observerD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp500:
	.cfi_def_cfa_offset 16
.Ltmp501:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp502:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt17sc_fxnum_observerD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp503:
	.size	_ZN5sc_dt17sc_fxnum_observerD1Ev, .Ltmp503-_ZN5sc_dt17sc_fxnum_observerD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observerD0Ev,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observerD0Ev,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observerD0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observerD0Ev,@function
_ZN5sc_dt17sc_fxnum_observerD0Ev:       # @_ZN5sc_dt17sc_fxnum_observerD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin55:
	.cfi_lsda 3, .Lexception55
# BB#0:
	pushq	%rbp
.Ltmp509:
	.cfi_def_cfa_offset 16
.Ltmp510:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp511:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp504:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt17sc_fxnum_observerD1Ev
.Ltmp505:
	jmp	.LBB55_1
.LBB55_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB55_2:
.Ltmp506:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp512:
	.size	_ZN5sc_dt17sc_fxnum_observerD0Ev, .Ltmp512-_ZN5sc_dt17sc_fxnum_observerD0Ev
	.cfi_endproc
.Leh_func_end55:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table55:
.Lexception55:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset165 = .Ltmp504-.Leh_func_begin55   # >> Call Site 1 <<
	.long	.Lset165
.Lset166 = .Ltmp505-.Ltmp504            #   Call between .Ltmp504 and .Ltmp505
	.long	.Lset166
.Lset167 = .Ltmp506-.Leh_func_begin55   #     jumps to .Ltmp506
	.long	.Lset167
	.byte	0                       #   On action: cleanup
.Lset168 = .Ltmp505-.Leh_func_begin55   # >> Call Site 2 <<
	.long	.Lset168
.Lset169 = .Leh_func_end55-.Ltmp505     #   Call between .Ltmp505 and .Leh_func_end55
	.long	.Lset169
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE,@function
_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE: # @_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp513:
	.size	_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE, .Ltmp513-_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE,@function
_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE: # @_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp514:
	.size	_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE, .Ltmp514-_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE,@function
_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE: # @_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp515:
	.size	_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE, .Ltmp515-_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observerD1Ev,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observerD1Ev,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev,@function
_ZN5sc_dt22sc_fxnum_fast_observerD1Ev:  # @_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp518:
	.cfi_def_cfa_offset 16
.Ltmp519:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp520:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt22sc_fxnum_fast_observerD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp521:
	.size	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev, .Ltmp521-_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observerD0Ev,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observerD0Ev,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observerD0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observerD0Ev,@function
_ZN5sc_dt22sc_fxnum_fast_observerD0Ev:  # @_ZN5sc_dt22sc_fxnum_fast_observerD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin60:
	.cfi_lsda 3, .Lexception60
# BB#0:
	pushq	%rbp
.Ltmp527:
	.cfi_def_cfa_offset 16
.Ltmp528:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp529:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp522:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
.Ltmp523:
	jmp	.LBB60_1
.LBB60_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB60_2:
.Ltmp524:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp530:
	.size	_ZN5sc_dt22sc_fxnum_fast_observerD0Ev, .Ltmp530-_ZN5sc_dt22sc_fxnum_fast_observerD0Ev
	.cfi_endproc
.Leh_func_end60:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table60:
.Lexception60:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset170 = .Ltmp522-.Leh_func_begin60   # >> Call Site 1 <<
	.long	.Lset170
.Lset171 = .Ltmp523-.Ltmp522            #   Call between .Ltmp522 and .Ltmp523
	.long	.Lset171
.Lset172 = .Ltmp524-.Leh_func_begin60   #     jumps to .Ltmp524
	.long	.Lset172
	.byte	0                       #   On action: cleanup
.Lset173 = .Ltmp523-.Leh_func_begin60   # >> Call Site 2 <<
	.long	.Lset173
.Lset174 = .Leh_func_end60-.Ltmp523     #   Call between .Ltmp523 and .Leh_func_end60
	.long	.Lset174
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE,@function
_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE: # @_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp531:
	.size	_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE, .Ltmp531-_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE,@function
_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE: # @_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp532:
	.size	_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE, .Ltmp532-_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE,@function
_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE: # @_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp533:
	.size	_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE, .Ltmp533-_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD1Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD1Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD1Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD1Ev,@function
_ZN7sc_core18sc_process_monitorD1Ev:    # @_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp536:
	.cfi_def_cfa_offset 16
.Ltmp537:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp538:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core18sc_process_monitorD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp539:
	.size	_ZN7sc_core18sc_process_monitorD1Ev, .Ltmp539-_ZN7sc_core18sc_process_monitorD1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core18sc_process_monitorD0Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD0Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD0Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD0Ev,@function
_ZN7sc_core18sc_process_monitorD0Ev:    # @_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin65:
	.cfi_lsda 3, .Lexception65
# BB#0:
	pushq	%rbp
.Ltmp545:
	.cfi_def_cfa_offset 16
.Ltmp546:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp547:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp540:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core18sc_process_monitorD1Ev
.Ltmp541:
	jmp	.LBB65_1
.LBB65_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB65_2:
.Ltmp542:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp548:
	.size	_ZN7sc_core18sc_process_monitorD0Ev, .Ltmp548-_ZN7sc_core18sc_process_monitorD0Ev
	.cfi_endproc
.Leh_func_end65:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table65:
.Lexception65:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset175 = .Ltmp540-.Leh_func_begin65   # >> Call Site 1 <<
	.long	.Lset175
.Lset176 = .Ltmp541-.Ltmp540            #   Call between .Ltmp540 and .Ltmp541
	.long	.Lset176
.Lset177 = .Ltmp542-.Leh_func_begin65   #     jumps to .Ltmp542
	.long	.Lset177
	.byte	0                       #   On action: cleanup
.Lset178 = .Ltmp541-.Leh_func_begin65   # >> Call Site 2 <<
	.long	.Lset178
.Lset179 = .Leh_func_end65-.Ltmp541     #   Call between .Ltmp541 and .Leh_func_end65
	.long	.Lset179
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNK7sc_core9sc_module4kindEv,"axG",@progbits,_ZNK7sc_core9sc_module4kindEv,comdat
	.weak	_ZNK7sc_core9sc_module4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_module4kindEv,@function
_ZNK7sc_core9sc_module4kindEv:          # @_ZNK7sc_core9sc_module4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str14, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp549:
	.size	_ZNK7sc_core9sc_module4kindEv, .Ltmp549-_ZNK7sc_core9sc_module4kindEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_object16get_child_eventsEv,"axG",@progbits,_ZNK7sc_core9sc_object16get_child_eventsEv,comdat
	.weak	_ZNK7sc_core9sc_object16get_child_eventsEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_object16get_child_eventsEv,@function
_ZNK7sc_core9sc_object16get_child_eventsEv: # @_ZNK7sc_core9sc_object16get_child_eventsEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	addq	$16, %rdi
	movq	%rdi, %rax
	ret
.Ltmp550:
	.size	_ZNK7sc_core9sc_object16get_child_eventsEv, .Ltmp550-_ZNK7sc_core9sc_object16get_child_eventsEv
	.cfi_endproc

	.section	.text._ZN7WBSlaveD1Ev,"axG",@progbits,_ZN7WBSlaveD1Ev,comdat
	.weak	_ZN7WBSlaveD1Ev
	.align	16, 0x90
	.type	_ZN7WBSlaveD1Ev,@function
_ZN7WBSlaveD1Ev:                        # @_ZN7WBSlaveD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp553:
	.cfi_def_cfa_offset 16
.Ltmp554:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp555:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7WBSlaveD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp556:
	.size	_ZN7WBSlaveD1Ev, .Ltmp556-_ZN7WBSlaveD1Ev
	.cfi_endproc

	.section	.text._ZN7WBSlaveD0Ev,"axG",@progbits,_ZN7WBSlaveD0Ev,comdat
	.weak	_ZN7WBSlaveD0Ev
	.align	16, 0x90
	.type	_ZN7WBSlaveD0Ev,@function
_ZN7WBSlaveD0Ev:                        # @_ZN7WBSlaveD0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin69:
	.cfi_lsda 3, .Lexception69
# BB#0:
	pushq	%rbp
.Ltmp562:
	.cfi_def_cfa_offset 16
.Ltmp563:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp564:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp557:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7WBSlaveD1Ev
.Ltmp558:
	jmp	.LBB69_1
.LBB69_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB69_2:
.Ltmp559:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp565:
	.size	_ZN7WBSlaveD0Ev, .Ltmp565-_ZN7WBSlaveD0Ev
	.cfi_endproc
.Leh_func_end69:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table69:
.Lexception69:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset180 = .Ltmp557-.Leh_func_begin69   # >> Call Site 1 <<
	.long	.Lset180
.Lset181 = .Ltmp558-.Ltmp557            #   Call between .Ltmp557 and .Ltmp558
	.long	.Lset181
.Lset182 = .Ltmp559-.Leh_func_begin69   #     jumps to .Ltmp559
	.long	.Lset182
	.byte	0                       #   On action: cleanup
.Lset183 = .Ltmp558-.Leh_func_begin69   # >> Call Site 2 <<
	.long	.Lset183
.Lset184 = .Leh_func_end69-.Ltmp558     #   Call between .Ltmp558 and .Leh_func_end69
	.long	.Lset184
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZThn88_N7WBSlaveD1Ev,"axG",@progbits,_ZThn88_N7WBSlaveD1Ev,comdat
	.weak	_ZThn88_N7WBSlaveD1Ev
	.align	16, 0x90
	.type	_ZThn88_N7WBSlaveD1Ev,@function
_ZThn88_N7WBSlaveD1Ev:                  # @_ZThn88_N7WBSlaveD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp568:
	.cfi_def_cfa_offset 16
.Ltmp569:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp570:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$-88, %rdi
	callq	_ZN7WBSlaveD1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp571:
	.size	_ZThn88_N7WBSlaveD1Ev, .Ltmp571-_ZThn88_N7WBSlaveD1Ev
	.cfi_endproc

	.section	.text._ZThn88_N7WBSlaveD0Ev,"axG",@progbits,_ZThn88_N7WBSlaveD0Ev,comdat
	.weak	_ZThn88_N7WBSlaveD0Ev
	.align	16, 0x90
	.type	_ZThn88_N7WBSlaveD0Ev,@function
_ZThn88_N7WBSlaveD0Ev:                  # @_ZThn88_N7WBSlaveD0Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp574:
	.cfi_def_cfa_offset 16
.Ltmp575:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp576:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$-88, %rdi
	callq	_ZN7WBSlaveD0Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp577:
	.size	_ZThn88_N7WBSlaveD0Ev, .Ltmp577-_ZThn88_N7WBSlaveD0Ev
	.cfi_endproc

	.section	.text._ZN7WBSlaveD2Ev,"axG",@progbits,_ZN7WBSlaveD2Ev,comdat
	.weak	_ZN7WBSlaveD2Ev
	.align	16, 0x90
	.type	_ZN7WBSlaveD2Ev,@function
_ZN7WBSlaveD2Ev:                        # @_ZN7WBSlaveD2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin72:
	.cfi_lsda 3, .Lexception72
# BB#0:
	pushq	%rbp
.Ltmp691:
	.cfi_def_cfa_offset 16
.Ltmp692:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp693:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTV7WBSlave+16, (%rdi)
	movq	$_ZTV7WBSlave+176, 88(%rdi)
	movq	%rdi, %rax
	addq	$4240, %rax             # imm = 0x1090
.Ltmp578:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp579:
	jmp	.LBB72_1
.LBB72_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4216, %rax             # imm = 0x1078
.Ltmp583:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp584:
	jmp	.LBB72_2
.LBB72_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4192, %rax             # imm = 0x1060
.Ltmp588:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp589:
	jmp	.LBB72_3
.LBB72_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4168, %rax             # imm = 0x1048
.Ltmp593:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp594:
	jmp	.LBB72_4
.LBB72_4:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp598:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp599:
	jmp	.LBB72_5
.LBB72_5:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp603:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp604:
	jmp	.LBB72_6
.LBB72_6:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4096, %rax             # imm = 0x1000
.Ltmp608:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp609:
	jmp	.LBB72_7
.LBB72_7:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4072, %rax             # imm = 0xFE8
.Ltmp613:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp614:
	jmp	.LBB72_8
.LBB72_8:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4048, %rax             # imm = 0xFD0
.Ltmp618:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp619:
	jmp	.LBB72_9
.LBB72_9:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4016, %rax             # imm = 0xFB0
.Ltmp623:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp624:
	jmp	.LBB72_10
.LBB72_10:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
.Ltmp628:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp629:
	jmp	.LBB72_11
.LBB72_11:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
.Ltmp633:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp634:
	jmp	.LBB72_12
.LBB72_12:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
.Ltmp638:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp639:
	jmp	.LBB72_13
.LBB72_13:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1440, %rax             # imm = 0x5A0
.Ltmp643:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp644:
	jmp	.LBB72_14
.LBB72_14:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1296, %rax             # imm = 0x510
.Ltmp648:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
.Ltmp649:
	jmp	.LBB72_15
.LBB72_15:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1136, %rax             # imm = 0x470
.Ltmp653:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp654:
	jmp	.LBB72_16
.LBB72_16:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$976, %rax              # imm = 0x3D0
.Ltmp658:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp659:
	jmp	.LBB72_17
.LBB72_17:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$816, %rax              # imm = 0x330
.Ltmp663:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp664:
	jmp	.LBB72_18
.LBB72_18:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$672, %rax              # imm = 0x2A0
.Ltmp668:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp669:
	jmp	.LBB72_19
.LBB72_19:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$528, %rax              # imm = 0x210
.Ltmp673:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp674:
	jmp	.LBB72_20
.LBB72_20:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp678:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp679:
	jmp	.LBB72_21
.LBB72_21:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$208, %rax
.Ltmp683:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp684:
	jmp	.LBB72_22
.LBB72_22:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core9sc_moduleD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB72_23:
.Ltmp580:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4216, %rax             # imm = 0x1078
.Ltmp581:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp582:
	jmp	.LBB72_25
.LBB72_24:
.Ltmp585:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_27
.LBB72_25:
	jmp	.LBB72_27
.LBB72_26:
.Ltmp590:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_30
.LBB72_27:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4192, %rax             # imm = 0x1060
.Ltmp586:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp587:
	jmp	.LBB72_28
.LBB72_28:
	jmp	.LBB72_30
.LBB72_29:
.Ltmp595:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_33
.LBB72_30:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4168, %rax             # imm = 0x1048
.Ltmp591:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp592:
	jmp	.LBB72_31
.LBB72_31:
	jmp	.LBB72_33
.LBB72_32:
.Ltmp600:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_36
.LBB72_33:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4144, %rax             # imm = 0x1030
.Ltmp596:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp597:
	jmp	.LBB72_34
.LBB72_34:
	jmp	.LBB72_36
.LBB72_35:
.Ltmp605:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_39
.LBB72_36:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4120, %rax             # imm = 0x1018
.Ltmp601:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp602:
	jmp	.LBB72_37
.LBB72_37:
	jmp	.LBB72_39
.LBB72_38:
.Ltmp610:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_42
.LBB72_39:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4096, %rax             # imm = 0x1000
.Ltmp606:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp607:
	jmp	.LBB72_40
.LBB72_40:
	jmp	.LBB72_42
.LBB72_41:
.Ltmp615:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_45
.LBB72_42:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4072, %rax             # imm = 0xFE8
.Ltmp611:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp612:
	jmp	.LBB72_43
.LBB72_43:
	jmp	.LBB72_45
.LBB72_44:
.Ltmp620:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_48
.LBB72_45:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4048, %rax             # imm = 0xFD0
.Ltmp616:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp617:
	jmp	.LBB72_46
.LBB72_46:
	jmp	.LBB72_48
.LBB72_47:
.Ltmp625:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_51
.LBB72_48:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$4016, %rax             # imm = 0xFB0
.Ltmp621:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp622:
	jmp	.LBB72_49
.LBB72_49:
	jmp	.LBB72_51
.LBB72_50:
.Ltmp630:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_54
.LBB72_51:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$3992, %rax             # imm = 0xF98
.Ltmp626:
	movq	%rax, %rdi
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp627:
	jmp	.LBB72_52
.LBB72_52:
	jmp	.LBB72_54
.LBB72_53:
.Ltmp635:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_57
.LBB72_54:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1760, %rax             # imm = 0x6E0
.Ltmp631:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp632:
	jmp	.LBB72_55
.LBB72_55:
	jmp	.LBB72_57
.LBB72_56:
.Ltmp640:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_60
.LBB72_57:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1592, %rax             # imm = 0x638
.Ltmp636:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp637:
	jmp	.LBB72_58
.LBB72_58:
	jmp	.LBB72_60
.LBB72_59:
.Ltmp645:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_63
.LBB72_60:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1440, %rax             # imm = 0x5A0
.Ltmp641:
	movq	%rax, %rdi
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp642:
	jmp	.LBB72_61
.LBB72_61:
	jmp	.LBB72_63
.LBB72_62:
.Ltmp650:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_66
.LBB72_63:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1296, %rax             # imm = 0x510
.Ltmp646:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
.Ltmp647:
	jmp	.LBB72_64
.LBB72_64:
	jmp	.LBB72_66
.LBB72_65:
.Ltmp655:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_69
.LBB72_66:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$1136, %rax             # imm = 0x470
.Ltmp651:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp652:
	jmp	.LBB72_67
.LBB72_67:
	jmp	.LBB72_69
.LBB72_68:
.Ltmp660:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_72
.LBB72_69:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$976, %rax              # imm = 0x3D0
.Ltmp656:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp657:
	jmp	.LBB72_70
.LBB72_70:
	jmp	.LBB72_72
.LBB72_71:
.Ltmp665:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_75
.LBB72_72:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$816, %rax              # imm = 0x330
.Ltmp661:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp662:
	jmp	.LBB72_73
.LBB72_73:
	jmp	.LBB72_75
.LBB72_74:
.Ltmp670:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_78
.LBB72_75:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$672, %rax              # imm = 0x2A0
.Ltmp666:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp667:
	jmp	.LBB72_76
.LBB72_76:
	jmp	.LBB72_78
.LBB72_77:
.Ltmp675:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_81
.LBB72_78:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$528, %rax              # imm = 0x210
.Ltmp671:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp672:
	jmp	.LBB72_79
.LBB72_79:
	jmp	.LBB72_81
.LBB72_80:
.Ltmp680:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_84
.LBB72_81:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$368, %rax              # imm = 0x170
.Ltmp676:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp677:
	jmp	.LBB72_82
.LBB72_82:
	jmp	.LBB72_84
.LBB72_83:
.Ltmp685:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	jmp	.LBB72_86
.LBB72_84:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$208, %rax
.Ltmp681:
	movq	%rax, %rdi
	callq	_ZN7sc_core5sc_inIbED1Ev
.Ltmp682:
	jmp	.LBB72_85
.LBB72_85:
	jmp	.LBB72_86
.LBB72_86:
.Ltmp686:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core9sc_moduleD2Ev
.Ltmp687:
	jmp	.LBB72_87
.LBB72_87:
	jmp	.LBB72_88
.LBB72_88:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB72_89:
.Ltmp688:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp694:
	.size	_ZN7WBSlaveD2Ev, .Ltmp694-_ZN7WBSlaveD2Ev
	.cfi_endproc
.Leh_func_end72:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table72:
.Lexception72:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\316\202\200"         # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.ascii	 "\305\002"             # Call site table length
.Lset185 = .Ltmp578-.Leh_func_begin72   # >> Call Site 1 <<
	.long	.Lset185
.Lset186 = .Ltmp579-.Ltmp578            #   Call between .Ltmp578 and .Ltmp579
	.long	.Lset186
.Lset187 = .Ltmp580-.Leh_func_begin72   #     jumps to .Ltmp580
	.long	.Lset187
	.byte	0                       #   On action: cleanup
.Lset188 = .Ltmp583-.Leh_func_begin72   # >> Call Site 2 <<
	.long	.Lset188
.Lset189 = .Ltmp584-.Ltmp583            #   Call between .Ltmp583 and .Ltmp584
	.long	.Lset189
.Lset190 = .Ltmp585-.Leh_func_begin72   #     jumps to .Ltmp585
	.long	.Lset190
	.byte	0                       #   On action: cleanup
.Lset191 = .Ltmp588-.Leh_func_begin72   # >> Call Site 3 <<
	.long	.Lset191
.Lset192 = .Ltmp589-.Ltmp588            #   Call between .Ltmp588 and .Ltmp589
	.long	.Lset192
.Lset193 = .Ltmp590-.Leh_func_begin72   #     jumps to .Ltmp590
	.long	.Lset193
	.byte	0                       #   On action: cleanup
.Lset194 = .Ltmp593-.Leh_func_begin72   # >> Call Site 4 <<
	.long	.Lset194
.Lset195 = .Ltmp594-.Ltmp593            #   Call between .Ltmp593 and .Ltmp594
	.long	.Lset195
.Lset196 = .Ltmp595-.Leh_func_begin72   #     jumps to .Ltmp595
	.long	.Lset196
	.byte	0                       #   On action: cleanup
.Lset197 = .Ltmp598-.Leh_func_begin72   # >> Call Site 5 <<
	.long	.Lset197
.Lset198 = .Ltmp599-.Ltmp598            #   Call between .Ltmp598 and .Ltmp599
	.long	.Lset198
.Lset199 = .Ltmp600-.Leh_func_begin72   #     jumps to .Ltmp600
	.long	.Lset199
	.byte	0                       #   On action: cleanup
.Lset200 = .Ltmp603-.Leh_func_begin72   # >> Call Site 6 <<
	.long	.Lset200
.Lset201 = .Ltmp604-.Ltmp603            #   Call between .Ltmp603 and .Ltmp604
	.long	.Lset201
.Lset202 = .Ltmp605-.Leh_func_begin72   #     jumps to .Ltmp605
	.long	.Lset202
	.byte	0                       #   On action: cleanup
.Lset203 = .Ltmp608-.Leh_func_begin72   # >> Call Site 7 <<
	.long	.Lset203
.Lset204 = .Ltmp609-.Ltmp608            #   Call between .Ltmp608 and .Ltmp609
	.long	.Lset204
.Lset205 = .Ltmp610-.Leh_func_begin72   #     jumps to .Ltmp610
	.long	.Lset205
	.byte	0                       #   On action: cleanup
.Lset206 = .Ltmp613-.Leh_func_begin72   # >> Call Site 8 <<
	.long	.Lset206
.Lset207 = .Ltmp614-.Ltmp613            #   Call between .Ltmp613 and .Ltmp614
	.long	.Lset207
.Lset208 = .Ltmp615-.Leh_func_begin72   #     jumps to .Ltmp615
	.long	.Lset208
	.byte	0                       #   On action: cleanup
.Lset209 = .Ltmp618-.Leh_func_begin72   # >> Call Site 9 <<
	.long	.Lset209
.Lset210 = .Ltmp619-.Ltmp618            #   Call between .Ltmp618 and .Ltmp619
	.long	.Lset210
.Lset211 = .Ltmp620-.Leh_func_begin72   #     jumps to .Ltmp620
	.long	.Lset211
	.byte	0                       #   On action: cleanup
.Lset212 = .Ltmp623-.Leh_func_begin72   # >> Call Site 10 <<
	.long	.Lset212
.Lset213 = .Ltmp624-.Ltmp623            #   Call between .Ltmp623 and .Ltmp624
	.long	.Lset213
.Lset214 = .Ltmp625-.Leh_func_begin72   #     jumps to .Ltmp625
	.long	.Lset214
	.byte	0                       #   On action: cleanup
.Lset215 = .Ltmp628-.Leh_func_begin72   # >> Call Site 11 <<
	.long	.Lset215
.Lset216 = .Ltmp629-.Ltmp628            #   Call between .Ltmp628 and .Ltmp629
	.long	.Lset216
.Lset217 = .Ltmp630-.Leh_func_begin72   #     jumps to .Ltmp630
	.long	.Lset217
	.byte	0                       #   On action: cleanup
.Lset218 = .Ltmp633-.Leh_func_begin72   # >> Call Site 12 <<
	.long	.Lset218
.Lset219 = .Ltmp634-.Ltmp633            #   Call between .Ltmp633 and .Ltmp634
	.long	.Lset219
.Lset220 = .Ltmp635-.Leh_func_begin72   #     jumps to .Ltmp635
	.long	.Lset220
	.byte	0                       #   On action: cleanup
.Lset221 = .Ltmp638-.Leh_func_begin72   # >> Call Site 13 <<
	.long	.Lset221
.Lset222 = .Ltmp639-.Ltmp638            #   Call between .Ltmp638 and .Ltmp639
	.long	.Lset222
.Lset223 = .Ltmp640-.Leh_func_begin72   #     jumps to .Ltmp640
	.long	.Lset223
	.byte	0                       #   On action: cleanup
.Lset224 = .Ltmp643-.Leh_func_begin72   # >> Call Site 14 <<
	.long	.Lset224
.Lset225 = .Ltmp644-.Ltmp643            #   Call between .Ltmp643 and .Ltmp644
	.long	.Lset225
.Lset226 = .Ltmp645-.Leh_func_begin72   #     jumps to .Ltmp645
	.long	.Lset226
	.byte	0                       #   On action: cleanup
.Lset227 = .Ltmp648-.Leh_func_begin72   # >> Call Site 15 <<
	.long	.Lset227
.Lset228 = .Ltmp649-.Ltmp648            #   Call between .Ltmp648 and .Ltmp649
	.long	.Lset228
.Lset229 = .Ltmp650-.Leh_func_begin72   #     jumps to .Ltmp650
	.long	.Lset229
	.byte	0                       #   On action: cleanup
.Lset230 = .Ltmp653-.Leh_func_begin72   # >> Call Site 16 <<
	.long	.Lset230
.Lset231 = .Ltmp654-.Ltmp653            #   Call between .Ltmp653 and .Ltmp654
	.long	.Lset231
.Lset232 = .Ltmp655-.Leh_func_begin72   #     jumps to .Ltmp655
	.long	.Lset232
	.byte	0                       #   On action: cleanup
.Lset233 = .Ltmp658-.Leh_func_begin72   # >> Call Site 17 <<
	.long	.Lset233
.Lset234 = .Ltmp659-.Ltmp658            #   Call between .Ltmp658 and .Ltmp659
	.long	.Lset234
.Lset235 = .Ltmp660-.Leh_func_begin72   #     jumps to .Ltmp660
	.long	.Lset235
	.byte	0                       #   On action: cleanup
.Lset236 = .Ltmp663-.Leh_func_begin72   # >> Call Site 18 <<
	.long	.Lset236
.Lset237 = .Ltmp664-.Ltmp663            #   Call between .Ltmp663 and .Ltmp664
	.long	.Lset237
.Lset238 = .Ltmp665-.Leh_func_begin72   #     jumps to .Ltmp665
	.long	.Lset238
	.byte	0                       #   On action: cleanup
.Lset239 = .Ltmp668-.Leh_func_begin72   # >> Call Site 19 <<
	.long	.Lset239
.Lset240 = .Ltmp669-.Ltmp668            #   Call between .Ltmp668 and .Ltmp669
	.long	.Lset240
.Lset241 = .Ltmp670-.Leh_func_begin72   #     jumps to .Ltmp670
	.long	.Lset241
	.byte	0                       #   On action: cleanup
.Lset242 = .Ltmp673-.Leh_func_begin72   # >> Call Site 20 <<
	.long	.Lset242
.Lset243 = .Ltmp674-.Ltmp673            #   Call between .Ltmp673 and .Ltmp674
	.long	.Lset243
.Lset244 = .Ltmp675-.Leh_func_begin72   #     jumps to .Ltmp675
	.long	.Lset244
	.byte	0                       #   On action: cleanup
.Lset245 = .Ltmp678-.Leh_func_begin72   # >> Call Site 21 <<
	.long	.Lset245
.Lset246 = .Ltmp679-.Ltmp678            #   Call between .Ltmp678 and .Ltmp679
	.long	.Lset246
.Lset247 = .Ltmp680-.Leh_func_begin72   #     jumps to .Ltmp680
	.long	.Lset247
	.byte	0                       #   On action: cleanup
.Lset248 = .Ltmp683-.Leh_func_begin72   # >> Call Site 22 <<
	.long	.Lset248
.Lset249 = .Ltmp684-.Ltmp683            #   Call between .Ltmp683 and .Ltmp684
	.long	.Lset249
.Lset250 = .Ltmp685-.Leh_func_begin72   #     jumps to .Ltmp685
	.long	.Lset250
	.byte	0                       #   On action: cleanup
.Lset251 = .Ltmp684-.Leh_func_begin72   # >> Call Site 23 <<
	.long	.Lset251
.Lset252 = .Ltmp581-.Ltmp684            #   Call between .Ltmp684 and .Ltmp581
	.long	.Lset252
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset253 = .Ltmp581-.Leh_func_begin72   # >> Call Site 24 <<
	.long	.Lset253
.Lset254 = .Ltmp687-.Ltmp581            #   Call between .Ltmp581 and .Ltmp687
	.long	.Lset254
.Lset255 = .Ltmp688-.Leh_func_begin72   #     jumps to .Ltmp688
	.long	.Lset255
	.byte	1                       #   On action: 1
.Lset256 = .Ltmp687-.Leh_func_begin72   # >> Call Site 25 <<
	.long	.Lset256
.Lset257 = .Leh_func_end72-.Ltmp687     #   Call between .Ltmp687 and .Leh_func_end72
	.long	.Lset257
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp697:
	.cfi_def_cfa_offset 16
.Ltmp698:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp699:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB73_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str15, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB73_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp700:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv, .Ltmp700-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC2Ej,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC2Ej,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC2Ej
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC2Ej,@function
_ZN5sc_dt7sc_uintILi32EEC2Ej:           # @_ZN5sc_dt7sc_uintILi32EEC2Ej
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin74:
	.cfi_lsda 3, .Lexception74
# BB#0:
	pushq	%rbp
.Ltmp709:
	.cfi_def_cfa_offset 16
.Ltmp710:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp711:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	$32, %esi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_baseC2Ei
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt7sc_uintILi32EEE+16, (%rdi)
	movl	-12(%rbp), %esi
.Ltmp701:
	callq	_ZN5sc_dt12sc_uint_baseaSEj
.Ltmp702:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB74_1
.LBB74_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB74_2:
.Ltmp703:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp704:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
.Ltmp705:
	jmp	.LBB74_3
.LBB74_3:
	jmp	.LBB74_4
.LBB74_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB74_5:
.Ltmp706:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp712:
	.size	_ZN5sc_dt7sc_uintILi32EEC2Ej, .Ltmp712-_ZN5sc_dt7sc_uintILi32EEC2Ej
	.cfi_endproc
.Leh_func_end74:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table74:
.Lexception74:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset258 = .Leh_func_begin74-.Leh_func_begin74 # >> Call Site 1 <<
	.long	.Lset258
.Lset259 = .Ltmp701-.Leh_func_begin74   #   Call between .Leh_func_begin74 and .Ltmp701
	.long	.Lset259
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset260 = .Ltmp701-.Leh_func_begin74   # >> Call Site 2 <<
	.long	.Lset260
.Lset261 = .Ltmp702-.Ltmp701            #   Call between .Ltmp701 and .Ltmp702
	.long	.Lset261
.Lset262 = .Ltmp703-.Leh_func_begin74   #     jumps to .Ltmp703
	.long	.Lset262
	.byte	0                       #   On action: cleanup
.Lset263 = .Ltmp704-.Leh_func_begin74   # >> Call Site 3 <<
	.long	.Lset263
.Lset264 = .Ltmp705-.Ltmp704            #   Call between .Ltmp704 and .Ltmp705
	.long	.Lset264
.Lset265 = .Ltmp706-.Leh_func_begin74   #     jumps to .Ltmp706
	.long	.Lset265
	.byte	1                       #   On action: 1
.Lset266 = .Ltmp705-.Leh_func_begin74   # >> Call Site 4 <<
	.long	.Lset266
.Lset267 = .Leh_func_end74-.Ltmp705     #   Call between .Ltmp705 and .Leh_func_end74
	.long	.Lset267
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt12sc_uint_baseC2Ei,"axG",@progbits,_ZN5sc_dt12sc_uint_baseC2Ei,comdat
	.weak	_ZN5sc_dt12sc_uint_baseC2Ei
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseC2Ei,@function
_ZN5sc_dt12sc_uint_baseC2Ei:            # @_ZN5sc_dt12sc_uint_baseC2Ei
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin75:
	.cfi_lsda 3, .Lexception75
# BB#0:
	pushq	%rbp
.Ltmp721:
	.cfi_def_cfa_offset 16
.Ltmp722:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp723:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt13sc_value_baseC2Ev
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt12sc_uint_baseE+16, (%rdi)
	movq	$0, 8(%rdi)
	movl	-12(%rbp), %esi
	movl	%esi, 16(%rdi)
	movl	$64, %eax
	subl	%esi, %eax
	movl	%eax, 20(%rdi)
.Ltmp713:
	callq	_ZNK5sc_dt12sc_uint_base12check_lengthEv
.Ltmp714:
	jmp	.LBB75_1
.LBB75_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB75_2:
.Ltmp715:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp716:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt13sc_value_baseD2Ev
.Ltmp717:
	jmp	.LBB75_3
.LBB75_3:
	jmp	.LBB75_4
.LBB75_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB75_5:
.Ltmp718:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp724:
	.size	_ZN5sc_dt12sc_uint_baseC2Ei, .Ltmp724-_ZN5sc_dt12sc_uint_baseC2Ei
	.cfi_endproc
.Leh_func_end75:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table75:
.Lexception75:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\257\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset268 = .Ltmp713-.Leh_func_begin75   # >> Call Site 1 <<
	.long	.Lset268
.Lset269 = .Ltmp714-.Ltmp713            #   Call between .Ltmp713 and .Ltmp714
	.long	.Lset269
.Lset270 = .Ltmp715-.Leh_func_begin75   #     jumps to .Ltmp715
	.long	.Lset270
	.byte	0                       #   On action: cleanup
.Lset271 = .Ltmp716-.Leh_func_begin75   # >> Call Site 2 <<
	.long	.Lset271
.Lset272 = .Ltmp717-.Ltmp716            #   Call between .Ltmp716 and .Ltmp717
	.long	.Lset272
.Lset273 = .Ltmp718-.Leh_func_begin75   #     jumps to .Ltmp718
	.long	.Lset273
	.byte	1                       #   On action: 1
.Lset274 = .Ltmp717-.Leh_func_begin75   # >> Call Site 3 <<
	.long	.Lset274
.Lset275 = .Leh_func_end75-.Ltmp717     #   Call between .Ltmp717 and .Leh_func_end75
	.long	.Lset275
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt12sc_uint_baseaSEj,"axG",@progbits,_ZN5sc_dt12sc_uint_baseaSEj,comdat
	.weak	_ZN5sc_dt12sc_uint_baseaSEj
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseaSEj,@function
_ZN5sc_dt12sc_uint_baseaSEj:            # @_ZN5sc_dt12sc_uint_baseaSEj
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp727:
	.cfi_def_cfa_offset 16
.Ltmp728:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp729:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %eax
	movq	%rax, 8(%rdi)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_base11extend_signEv
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp730:
	.size	_ZN5sc_dt12sc_uint_baseaSEj, .Ltmp730-_ZN5sc_dt12sc_uint_baseaSEj
	.cfi_endproc

	.section	.text._ZN5sc_dt12sc_uint_baseD2Ev,"axG",@progbits,_ZN5sc_dt12sc_uint_baseD2Ev,comdat
	.weak	_ZN5sc_dt12sc_uint_baseD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseD2Ev,@function
_ZN5sc_dt12sc_uint_baseD2Ev:            # @_ZN5sc_dt12sc_uint_baseD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp733:
	.cfi_def_cfa_offset 16
.Ltmp734:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp735:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt13sc_value_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp736:
	.size	_ZN5sc_dt12sc_uint_baseD2Ev, .Ltmp736-_ZN5sc_dt12sc_uint_baseD2Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev,"axG",@progbits,_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev,comdat
	.weak	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev,@function
_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev: # @_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp737:
	.size	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev, .Ltmp737-_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_base13concat_lengthEPb,"axG",@progbits,_ZNK5sc_dt12sc_uint_base13concat_lengthEPb,comdat
	.weak	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb,@function
_ZNK5sc_dt12sc_uint_base13concat_lengthEPb: # @_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp740:
	.cfi_def_cfa_offset 16
.Ltmp741:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp742:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, -16(%rbp)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	je	.LBB79_2
# BB#1:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
.LBB79_2:
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt12sc_uint_base6lengthEv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp743:
	.size	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb, .Ltmp743-_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EED0Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EED0Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EED0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EED0Ev,@function
_ZN5sc_dt7sc_uintILi32EED0Ev:           # @_ZN5sc_dt7sc_uintILi32EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin80:
	.cfi_lsda 3, .Lexception80
# BB#0:
	pushq	%rbp
.Ltmp749:
	.cfi_def_cfa_offset 16
.Ltmp750:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp751:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp744:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi32EED1Ev
.Ltmp745:
	jmp	.LBB80_1
.LBB80_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB80_2:
.Ltmp746:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp752:
	.size	_ZN5sc_dt7sc_uintILi32EED0Ev, .Ltmp752-_ZN5sc_dt7sc_uintILi32EED0Ev
	.cfi_endproc
.Leh_func_end80:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table80:
.Lexception80:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset276 = .Ltmp744-.Leh_func_begin80   # >> Call Site 1 <<
	.long	.Lset276
.Lset277 = .Ltmp745-.Ltmp744            #   Call between .Ltmp744 and .Ltmp745
	.long	.Lset277
.Lset278 = .Ltmp746-.Leh_func_begin80   #     jumps to .Ltmp746
	.long	.Lset278
	.byte	0                       #   On action: cleanup
.Lset279 = .Ltmp745-.Leh_func_begin80   # >> Call Site 2 <<
	.long	.Lset279
.Lset280 = .Leh_func_end80-.Ltmp745     #   Call between .Ltmp745 and .Leh_func_end80
	.long	.Lset280
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNK5sc_dt12sc_uint_base6lengthEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_base6lengthEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_base6lengthEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base6lengthEv,@function
_ZNK5sc_dt12sc_uint_base6lengthEv:      # @_ZNK5sc_dt12sc_uint_base6lengthEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movl	16(%rdi), %eax
	ret
.Ltmp753:
	.size	_ZNK5sc_dt12sc_uint_base6lengthEv, .Ltmp753-_ZNK5sc_dt12sc_uint_base6lengthEv
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseD2Ev,"axG",@progbits,_ZN5sc_dt13sc_value_baseD2Ev,comdat
	.weak	_ZN5sc_dt13sc_value_baseD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseD2Ev,@function
_ZN5sc_dt13sc_value_baseD2Ev:           # @_ZN5sc_dt13sc_value_baseD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp754:
	.size	_ZN5sc_dt13sc_value_baseD2Ev, .Ltmp754-_ZN5sc_dt13sc_value_baseD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt12sc_uint_base11extend_signEv,"axG",@progbits,_ZN5sc_dt12sc_uint_base11extend_signEv,comdat
	.weak	_ZN5sc_dt12sc_uint_base11extend_signEv
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_base11extend_signEv,@function
_ZN5sc_dt12sc_uint_base11extend_signEv: # @_ZN5sc_dt12sc_uint_base11extend_signEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	_ZN5sc_dt9UINT_ZEROE, %rax
	xorq	$-1, %rax
	movl	20(%rdi), %ecx
                                        # kill: CL<def> RCX<kill>
	shrq	%cl, %rax
	movq	8(%rdi), %rdx
	andq	%rax, %rdx
	movq	%rdx, 8(%rdi)
	ret
.Ltmp755:
	.size	_ZN5sc_dt12sc_uint_base11extend_signEv, .Ltmp755-_ZN5sc_dt12sc_uint_base11extend_signEv
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseC2Ev,"axG",@progbits,_ZN5sc_dt13sc_value_baseC2Ev,comdat
	.weak	_ZN5sc_dt13sc_value_baseC2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseC2Ev,@function
_ZN5sc_dt13sc_value_baseC2Ev:           # @_ZN5sc_dt13sc_value_baseC2Ev
	.cfi_startproc
# BB#0:
	leaq	_ZTVN5sc_dt13sc_value_baseE, %rax
	addq	$16, %rax
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rax, (%rdi)
	ret
.Ltmp756:
	.size	_ZN5sc_dt13sc_value_baseC2Ev, .Ltmp756-_ZN5sc_dt13sc_value_baseC2Ev
	.cfi_endproc

	.section	.text._ZNK5sc_dt12sc_uint_base12check_lengthEv,"axG",@progbits,_ZNK5sc_dt12sc_uint_base12check_lengthEv,comdat
	.weak	_ZNK5sc_dt12sc_uint_base12check_lengthEv
	.align	16, 0x90
	.type	_ZNK5sc_dt12sc_uint_base12check_lengthEv,@function
_ZNK5sc_dt12sc_uint_base12check_lengthEv: # @_ZNK5sc_dt12sc_uint_base12check_lengthEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp759:
	.cfi_def_cfa_offset 16
.Ltmp760:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp761:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$0, 16(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jle	.LBB85_2
# BB#1:
	movq	-16(%rbp), %rax         # 8-byte Reload
	cmpl	$64, 16(%rax)
	jle	.LBB85_3
.LBB85_2:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK5sc_dt12sc_uint_base14invalid_lengthEv
.LBB85_3:
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp762:
	.size	_ZNK5sc_dt12sc_uint_base12check_lengthEv, .Ltmp762-_ZNK5sc_dt12sc_uint_base12check_lengthEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC2ERKS1_,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC2ERKS1_,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC2ERKS1_
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC2ERKS1_,@function
_ZN5sc_dt7sc_uintILi32EEC2ERKS1_:       # @_ZN5sc_dt7sc_uintILi32EEC2ERKS1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp765:
	.cfi_def_cfa_offset 16
.Ltmp766:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp767:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt12sc_uint_baseC2ERKS0_
	leaq	_ZTVN5sc_dt7sc_uintILi32EEE, %rax
	addq	$16, %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, (%rsi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp768:
	.size	_ZN5sc_dt7sc_uintILi32EEC2ERKS1_, .Ltmp768-_ZN5sc_dt7sc_uintILi32EEC2ERKS1_
	.cfi_endproc

	.section	.text._ZN5sc_dt12sc_uint_baseC2ERKS0_,"axG",@progbits,_ZN5sc_dt12sc_uint_baseC2ERKS0_,comdat
	.weak	_ZN5sc_dt12sc_uint_baseC2ERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseC2ERKS0_,@function
_ZN5sc_dt12sc_uint_baseC2ERKS0_:        # @_ZN5sc_dt12sc_uint_baseC2ERKS0_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp771:
	.cfi_def_cfa_offset 16
.Ltmp772:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp773:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rsi
	callq	_ZN5sc_dt13sc_value_baseC2ERKS0_
	leaq	_ZTVN5sc_dt12sc_uint_baseE, %rax
	addq	$16, %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	%rax, (%rsi)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, 8(%rsi)
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	movl	%ecx, 16(%rsi)
	movq	-16(%rbp), %rax
	movl	20(%rax), %ecx
	movl	%ecx, 20(%rsi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp774:
	.size	_ZN5sc_dt12sc_uint_baseC2ERKS0_, .Ltmp774-_ZN5sc_dt12sc_uint_baseC2ERKS0_
	.cfi_endproc

	.section	.text._ZN5sc_dt13sc_value_baseC2ERKS0_,"axG",@progbits,_ZN5sc_dt13sc_value_baseC2ERKS0_,comdat
	.weak	_ZN5sc_dt13sc_value_baseC2ERKS0_
	.align	16, 0x90
	.type	_ZN5sc_dt13sc_value_baseC2ERKS0_,@function
_ZN5sc_dt13sc_value_baseC2ERKS0_:       # @_ZN5sc_dt13sc_value_baseC2ERKS0_
	.cfi_startproc
# BB#0:
	leaq	_ZTVN5sc_dt13sc_value_baseE, %rax
	addq	$16, %rax
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	%rax, (%rsi)
	ret
.Ltmp775:
	.size	_ZN5sc_dt13sc_value_baseC2ERKS0_, .Ltmp775-_ZN5sc_dt13sc_value_baseC2ERKS0_
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp778:
	.cfi_def_cfa_offset 16
.Ltmp779:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp780:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB89_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str15, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB89_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp781:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv, .Ltmp781-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EEC2Ei,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EEC2Ei,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EEC2Ei
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EEC2Ei,@function
_ZN5sc_dt7sc_uintILi32EEC2Ei:           # @_ZN5sc_dt7sc_uintILi32EEC2Ei
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin90:
	.cfi_lsda 3, .Lexception90
# BB#0:
	pushq	%rbp
.Ltmp790:
	.cfi_def_cfa_offset 16
.Ltmp791:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp792:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	$32, %esi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_baseC2Ei
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt7sc_uintILi32EEE+16, (%rdi)
	movl	-12(%rbp), %esi
.Ltmp782:
	callq	_ZN5sc_dt12sc_uint_baseaSEi
.Ltmp783:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB90_1
.LBB90_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB90_2:
.Ltmp784:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp785:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
.Ltmp786:
	jmp	.LBB90_3
.LBB90_3:
	jmp	.LBB90_4
.LBB90_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB90_5:
.Ltmp787:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp793:
	.size	_ZN5sc_dt7sc_uintILi32EEC2Ei, .Ltmp793-_ZN5sc_dt7sc_uintILi32EEC2Ei
	.cfi_endproc
.Leh_func_end90:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table90:
.Lexception90:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset281 = .Leh_func_begin90-.Leh_func_begin90 # >> Call Site 1 <<
	.long	.Lset281
.Lset282 = .Ltmp782-.Leh_func_begin90   #   Call between .Leh_func_begin90 and .Ltmp782
	.long	.Lset282
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset283 = .Ltmp782-.Leh_func_begin90   # >> Call Site 2 <<
	.long	.Lset283
.Lset284 = .Ltmp783-.Ltmp782            #   Call between .Ltmp782 and .Ltmp783
	.long	.Lset284
.Lset285 = .Ltmp784-.Leh_func_begin90   #     jumps to .Ltmp784
	.long	.Lset285
	.byte	0                       #   On action: cleanup
.Lset286 = .Ltmp785-.Leh_func_begin90   # >> Call Site 3 <<
	.long	.Lset286
.Lset287 = .Ltmp786-.Ltmp785            #   Call between .Ltmp785 and .Ltmp786
	.long	.Lset287
.Lset288 = .Ltmp787-.Leh_func_begin90   #     jumps to .Ltmp787
	.long	.Lset288
	.byte	1                       #   On action: 1
.Lset289 = .Ltmp786-.Leh_func_begin90   # >> Call Site 4 <<
	.long	.Lset289
.Lset290 = .Leh_func_end90-.Ltmp786     #   Call between .Ltmp786 and .Leh_func_end90
	.long	.Lset290
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt12sc_uint_baseaSEi,"axG",@progbits,_ZN5sc_dt12sc_uint_baseaSEi,comdat
	.weak	_ZN5sc_dt12sc_uint_baseaSEi
	.align	16, 0x90
	.type	_ZN5sc_dt12sc_uint_baseaSEi,@function
_ZN5sc_dt12sc_uint_baseaSEi:            # @_ZN5sc_dt12sc_uint_baseaSEi
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp796:
	.cfi_def_cfa_offset 16
.Ltmp797:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp798:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movslq	-12(%rbp), %rax
	movq	%rax, 8(%rdi)
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt12sc_uint_base11extend_signEv
	movq	-24(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp799:
	.size	_ZN5sc_dt12sc_uint_baseaSEi, .Ltmp799-_ZN5sc_dt12sc_uint_baseaSEi
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp802:
	.cfi_def_cfa_offset 16
.Ltmp803:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp804:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB92_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str15, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB92_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp805:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv, .Ltmp805-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEptEv
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIbED2Ev,"axG",@progbits,_ZN7sc_core6sc_outIbED2Ev,comdat
	.weak	_ZN7sc_core6sc_outIbED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbED2Ev,@function
_ZN7sc_core6sc_outIbED2Ev:              # @_ZN7sc_core6sc_outIbED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp808:
	.cfi_def_cfa_offset 16
.Ltmp809:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp810:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core8sc_inoutIbED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp811:
	.size	_ZN7sc_core6sc_outIbED2Ev, .Ltmp811-_ZN7sc_core6sc_outIbED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp814:
	.cfi_def_cfa_offset 16
.Ltmp815:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp816:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp817:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev, .Ltmp817-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin95:
	.cfi_lsda 3, .Lexception95
# BB#0:
	pushq	%rbp
.Ltmp830:
	.cfi_def_cfa_offset 16
.Ltmp831:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp832:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, %rax
	addq	$16, %rax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rax, (%rdi)
	movq	144(%rdi), %rax
	cmpq	$0, %rax
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	je	.LBB95_3
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp818:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp819:
	jmp	.LBB95_2
.LBB95_2:
	jmp	.LBB95_3
.LBB95_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	je	.LBB95_6
# BB#4:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	80(%rcx), %rcx
.Ltmp820:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp821:
	jmp	.LBB95_5
.LBB95_5:
	jmp	.LBB95_6
.LBB95_6:
.Ltmp822:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
.Ltmp823:
	jmp	.LBB95_7
.LBB95_7:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB95_8:
.Ltmp824:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp825:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
.Ltmp826:
	jmp	.LBB95_9
.LBB95_9:
	jmp	.LBB95_10
.LBB95_10:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB95_11:
.Ltmp827:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp833:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev, .Ltmp833-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_endproc
.Leh_func_end95:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table95:
.Lexception95:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset291 = .Ltmp818-.Leh_func_begin95   # >> Call Site 1 <<
	.long	.Lset291
.Lset292 = .Ltmp823-.Ltmp818            #   Call between .Ltmp818 and .Ltmp823
	.long	.Lset292
.Lset293 = .Ltmp824-.Leh_func_begin95   #     jumps to .Ltmp824
	.long	.Lset293
	.byte	0                       #   On action: cleanup
.Lset294 = .Ltmp823-.Leh_func_begin95   # >> Call Site 2 <<
	.long	.Lset294
.Lset295 = .Ltmp825-.Ltmp823            #   Call between .Ltmp823 and .Ltmp825
	.long	.Lset295
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset296 = .Ltmp825-.Leh_func_begin95   # >> Call Site 3 <<
	.long	.Lset296
.Lset297 = .Ltmp826-.Ltmp825            #   Call between .Ltmp825 and .Ltmp826
	.long	.Lset297
.Lset298 = .Ltmp827-.Leh_func_begin95   #     jumps to .Ltmp827
	.long	.Lset298
	.byte	1                       #   On action: 1
.Lset299 = .Ltmp826-.Leh_func_begin95   # >> Call Site 4 <<
	.long	.Lset299
.Lset300 = .Leh_func_end95-.Ltmp826     #   Call between .Ltmp826 and .Leh_func_end95
	.long	.Lset300
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,"axG",@progbits,_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,comdat
	.weak	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.align	16, 0x90
	.type	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,@function
_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv: # @_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin96:
	.cfi_lsda 3, .Lexception96
# BB#0:
	pushq	%rbp
.Ltmp842:
	.cfi_def_cfa_offset 16
.Ltmp843:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp844:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 136(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB96_14
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	subq	$1, %rax
	movl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB96_2:                               # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB96_9
# BB#3:                                 #   in Loop: Header=BB96_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	cmpq	$0, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB96_6
# BB#4:                                 #   in Loop: Header=BB96_2 Depth=1
.Ltmp837:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core15sc_trace_paramsD1Ev
.Ltmp838:
	jmp	.LBB96_5
.LBB96_5:                               #   in Loop: Header=BB96_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB96_6:                               #   in Loop: Header=BB96_2 Depth=1
	jmp	.LBB96_7
.LBB96_7:                               #   in Loop: Header=BB96_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -12(%rbp)
	jmp	.LBB96_2
.LBB96_8:
.Ltmp839:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB96_15
.LBB96_9:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	je	.LBB96_12
# BB#10:
.Ltmp834:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
.Ltmp835:
	jmp	.LBB96_11
.LBB96_11:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB96_12:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	$0, 136(%rax)
	jmp	.LBB96_14
.LBB96_13:
.Ltmp836:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB96_15
.LBB96_14:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB96_15:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp845:
	.size	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv, .Ltmp845-_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.cfi_endproc
.Leh_func_end96:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table96:
.Lexception96:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset301 = .Ltmp837-.Leh_func_begin96   # >> Call Site 1 <<
	.long	.Lset301
.Lset302 = .Ltmp838-.Ltmp837            #   Call between .Ltmp837 and .Ltmp838
	.long	.Lset302
.Lset303 = .Ltmp839-.Leh_func_begin96   #     jumps to .Ltmp839
	.long	.Lset303
	.byte	0                       #   On action: cleanup
.Lset304 = .Ltmp834-.Leh_func_begin96   # >> Call Site 2 <<
	.long	.Lset304
.Lset305 = .Ltmp835-.Ltmp834            #   Call between .Ltmp834 and .Ltmp835
	.long	.Lset305
.Lset306 = .Ltmp836-.Leh_func_begin96   #     jumps to .Ltmp836
	.long	.Lset306
	.byte	0                       #   On action: cleanup
.Lset307 = .Ltmp835-.Leh_func_begin96   # >> Call Site 3 <<
	.long	.Lset307
.Lset308 = .Leh_func_end96-.Ltmp835     #   Call between .Ltmp835 and .Leh_func_end96
	.long	.Lset308
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp848:
	.cfi_def_cfa_offset 16
.Ltmp849:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp850:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp851:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp851-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv,"axG",@progbits,_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv,comdat
	.weak	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv,@function
_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv: # @_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str21, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp852:
	.size	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv, .Ltmp852-_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_object17get_child_objectsEv,"axG",@progbits,_ZNK7sc_core9sc_object17get_child_objectsEv,comdat
	.weak	_ZNK7sc_core9sc_object17get_child_objectsEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_object17get_child_objectsEv,@function
_ZNK7sc_core9sc_object17get_child_objectsEv: # @_ZNK7sc_core9sc_object17get_child_objectsEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	addq	$40, %rdi
	movq	%rdi, %rax
	ret
.Ltmp853:
	.size	_ZNK7sc_core9sc_object17get_child_objectsEv, .Ltmp853-_ZNK7sc_core9sc_object17get_child_objectsEv
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp856:
	.cfi_def_cfa_offset 16
.Ltmp857:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp858:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp859:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev, .Ltmp859-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin101:
	.cfi_lsda 3, .Lexception101
# BB#0:
	pushq	%rbp
.Ltmp865:
	.cfi_def_cfa_offset 16
.Ltmp866:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp867:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp860:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp861:
	jmp	.LBB101_1
.LBB101_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB101_2:
.Ltmp862:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp868:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev, .Ltmp868-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_endproc
.Leh_func_end101:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table101:
.Lexception101:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset309 = .Ltmp860-.Leh_func_begin101  # >> Call Site 1 <<
	.long	.Lset309
.Lset310 = .Ltmp861-.Ltmp860            #   Call between .Ltmp860 and .Ltmp861
	.long	.Lset310
.Lset311 = .Ltmp862-.Leh_func_begin101  #     jumps to .Ltmp862
	.long	.Lset311
	.byte	0                       #   On action: cleanup
.Lset312 = .Ltmp861-.Leh_func_begin101  # >> Call Site 2 <<
	.long	.Lset312
.Lset313 = .Leh_func_end101-.Ltmp861    #   Call between .Ltmp861 and .Leh_func_end101
	.long	.Lset313
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB102_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB102_3
.LBB102_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB102_3
.LBB102_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp869:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv, .Ltmp869-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB103_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB103_3
.LBB103_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB103_3
.LBB103_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp870:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv, .Ltmp870-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp873:
	.cfi_def_cfa_offset 16
.Ltmp874:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp875:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB104_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB104_3
.LBB104_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB104_3
.LBB104_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB104_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB104_6
.LBB104_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB104_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp876:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE, .Ltmp876-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp879:
	.cfi_def_cfa_offset 16
.Ltmp880:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp881:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB105_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB105_3
.LBB105_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB105_3
.LBB105_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB105_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB105_6
.LBB105_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB105_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp882:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE, .Ltmp882-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp885:
	.cfi_def_cfa_offset 16
.Ltmp886:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp887:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB106_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB106_3
.LBB106_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB106_3
.LBB106_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB106_5
# BB#4:
	jmp	.LBB106_6
.LBB106_5:
	leaq	.L.str18, %rdi
	leaq	.L.str17, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB106_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB106_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB106_12
# BB#8:                                 #   in Loop: Header=BB106_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB106_10
# BB#9:                                 #   in Loop: Header=BB106_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str19, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB106_10:                             #   in Loop: Header=BB106_7 Depth=1
	jmp	.LBB106_11
.LBB106_11:                             #   in Loop: Header=BB106_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB106_7
.LBB106_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp888:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp888-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp891:
	.cfi_def_cfa_offset 16
.Ltmp892:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp893:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp894:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv, .Ltmp894-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp897:
	.cfi_def_cfa_offset 16
.Ltmp898:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp899:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp900:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv, .Ltmp900-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp903:
	.cfi_def_cfa_offset 16
.Ltmp904:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp905:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB109_4
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rsi
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE5writeERKS3_
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rsi
	cmpq	$0, %rsi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	je	.LBB109_3
# BB#2:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	%rax, %rdi
	callq	*80(%rcx)
.LBB109_3:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	$0, 128(%rax)
.LBB109_4:
	movq	-40(%rbp), %rax         # 8-byte Reload
	cmpq	$0, 136(%rax)
	je	.LBB109_13
# BB#5:
	movl	$0, -12(%rbp)
.LBB109_6:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movq	136(%rcx), %rdi
	movl	%eax, -52(%rbp)         # 4-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %edx
	movl	-52(%rbp), %esi         # 4-byte Reload
	cmpl	%edx, %esi
	jge	.LBB109_12
# BB#7:                                 #   in Loop: Header=BB109_6 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rdi
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-64(%rbp), %rax         # 8-byte Reload
	callq	*112(%rax)
	cmpq	$0, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	je	.LBB109_9
# BB#8:                                 #   in Loop: Header=BB109_6 Depth=1
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-80(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB109_10
.LBB109_9:                              #   in Loop: Header=BB109_6 Depth=1
	movabsq	$0, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB109_10
.LBB109_10:                             #   in Loop: Header=BB109_6 Depth=1
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rdi, -96(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	*40(%rcx)
	movq	-24(%rbp), %rcx
	addq	$8, %rcx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	_ZN7sc_core8sc_traceEPNS_13sc_trace_fileERKN5sc_dt12sc_uint_baseERKSs
# BB#11:                                #   in Loop: Header=BB109_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_6
.LBB109_12:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
.LBB109_13:
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp906:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv, .Ltmp906-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp909:
	.cfi_def_cfa_offset 16
.Ltmp910:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp911:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB110_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB110_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB110_8
# BB#3:                                 #   in Loop: Header=BB110_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB110_5
# BB#4:                                 #   in Loop: Header=BB110_2 Depth=1
	jmp	.LBB110_6
.LBB110_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB110_6:                              #   in Loop: Header=BB110_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB110_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB110_2
.LBB110_8:
	jmp	.LBB110_10
.LBB110_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB110_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp912:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp912-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp915:
	.cfi_def_cfa_offset 16
.Ltmp916:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp917:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB111_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB111_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB111_8
# BB#3:                                 #   in Loop: Header=BB111_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB111_5
# BB#4:                                 #   in Loop: Header=BB111_2 Depth=1
	jmp	.LBB111_6
.LBB111_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB111_6:                              #   in Loop: Header=BB111_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB111_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB111_2
.LBB111_8:
	jmp	.LBB111_10
.LBB111_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB111_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp918:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp918-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp921:
	.cfi_def_cfa_offset 16
.Ltmp922:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp923:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp924:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_, .Ltmp924-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp927:
	.cfi_def_cfa_offset 16
.Ltmp928:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp929:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp930:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_, .Ltmp930-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp931:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv, .Ltmp931-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp932:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm, .Ltmp932-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp933:
	.size	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv, .Ltmp933-_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm,@function
_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm: # @_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp934:
	.size	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm, .Ltmp934-_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	.cfi_endproc

	.section	.text._ZNKSt9type_info4nameEv,"axG",@progbits,_ZNKSt9type_info4nameEv,comdat
	.weak	_ZNKSt9type_info4nameEv
	.align	16, 0x90
	.type	_ZNKSt9type_info4nameEv,@function
_ZNKSt9type_info4nameEv:                # @_ZNKSt9type_info4nameEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movsbl	(%rax), %ecx
	cmpl	$42, %ecx
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	jne	.LBB118_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rsp)         # 8-byte Spill
	jmp	.LBB118_3
.LBB118_2:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	movq	%rcx, -24(%rsp)         # 8-byte Spill
.LBB118_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp935:
	.size	_ZNKSt9type_info4nameEv, .Ltmp935-_ZNKSt9type_info4nameEv
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp936:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm, .Ltmp936-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp939:
	.cfi_def_cfa_offset 16
.Ltmp940:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp941:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB120_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB120_3
.LBB120_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
.LBB120_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp942:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_, .Ltmp942-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB121_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB121_2:
	ret
.Ltmp943:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_, .Ltmp943-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin122:
	.cfi_lsda 3, .Lexception122
# BB#0:
	pushq	%rbp
.Ltmp975:
	.cfi_def_cfa_offset 16
.Ltmp976:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp977:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB122_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB122_22
.LBB122_2:
	movl	$1, %esi
	movl	$.L.str20, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp944:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
.Ltmp945:
	jmp	.LBB122_3
.LBB122_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp946:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp947:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB122_4
.LBB122_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp948:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp949:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB122_5
.LBB122_5:
.Ltmp950:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp951:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB122_6
.LBB122_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp952:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp953:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB122_7
.LBB122_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp954:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp955:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB122_8
.LBB122_8:
.Ltmp956:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp957:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB122_9
.LBB122_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB122_21
.LBB122_10:
.Ltmp958:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB122_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp959:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
.Ltmp960:
	jmp	.LBB122_13
.LBB122_13:
	jmp	.LBB122_18
.LBB122_14:
.Ltmp969:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp970:
	callq	__cxa_end_catch
.Ltmp971:
	jmp	.LBB122_20
.LBB122_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp961:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp962:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB122_16
.LBB122_16:
.Ltmp963:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
.Ltmp964:
	jmp	.LBB122_17
.LBB122_17:
	jmp	.LBB122_18
.LBB122_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp965:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp966:
	jmp	.LBB122_19
.LBB122_19:
.Ltmp967:
	callq	__cxa_rethrow
.Ltmp968:
	jmp	.LBB122_25
.LBB122_20:
	jmp	.LBB122_23
.LBB122_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB122_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB122_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB122_24:
.Ltmp972:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB122_25:
.Ltmp978:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_, .Ltmp978-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_endproc
.Leh_func_end122:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table122:
.Lexception122:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset314 = .Leh_func_begin122-.Leh_func_begin122 # >> Call Site 1 <<
	.long	.Lset314
.Lset315 = .Ltmp944-.Leh_func_begin122  #   Call between .Leh_func_begin122 and .Ltmp944
	.long	.Lset315
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset316 = .Ltmp944-.Leh_func_begin122  # >> Call Site 2 <<
	.long	.Lset316
.Lset317 = .Ltmp957-.Ltmp944            #   Call between .Ltmp944 and .Ltmp957
	.long	.Lset317
.Lset318 = .Ltmp958-.Leh_func_begin122  #     jumps to .Ltmp958
	.long	.Lset318
	.byte	1                       #   On action: 1
.Lset319 = .Ltmp957-.Leh_func_begin122  # >> Call Site 3 <<
	.long	.Lset319
.Lset320 = .Ltmp959-.Ltmp957            #   Call between .Ltmp957 and .Ltmp959
	.long	.Lset320
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset321 = .Ltmp959-.Leh_func_begin122  # >> Call Site 4 <<
	.long	.Lset321
.Lset322 = .Ltmp960-.Ltmp959            #   Call between .Ltmp959 and .Ltmp960
	.long	.Lset322
.Lset323 = .Ltmp969-.Leh_func_begin122  #     jumps to .Ltmp969
	.long	.Lset323
	.byte	0                       #   On action: cleanup
.Lset324 = .Ltmp970-.Leh_func_begin122  # >> Call Site 5 <<
	.long	.Lset324
.Lset325 = .Ltmp971-.Ltmp970            #   Call between .Ltmp970 and .Ltmp971
	.long	.Lset325
.Lset326 = .Ltmp972-.Leh_func_begin122  #     jumps to .Ltmp972
	.long	.Lset326
	.byte	1                       #   On action: 1
.Lset327 = .Ltmp961-.Leh_func_begin122  # >> Call Site 6 <<
	.long	.Lset327
.Lset328 = .Ltmp968-.Ltmp961            #   Call between .Ltmp961 and .Ltmp968
	.long	.Lset328
.Lset329 = .Ltmp969-.Leh_func_begin122  #     jumps to .Ltmp969
	.long	.Lset329
	.byte	0                       #   On action: cleanup
.Lset330 = .Ltmp968-.Leh_func_begin122  # >> Call Site 7 <<
	.long	.Lset330
.Lset331 = .Leh_func_end122-.Ltmp968    #   Call between .Ltmp968 and .Leh_func_end122
	.long	.Lset331
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp981:
	.cfi_def_cfa_offset 16
.Ltmp982:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp983:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp984:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv, .Ltmp984-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp987:
	.cfi_def_cfa_offset 16
.Ltmp988:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp989:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp990:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_, .Ltmp990-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp991:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_, .Ltmp991-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp994:
	.cfi_def_cfa_offset 16
.Ltmp995:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp996:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp997:
	.size	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp997-_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp998:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv, .Ltmp998-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp999:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv, .Ltmp999-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1002:
	.cfi_def_cfa_offset 16
.Ltmp1003:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1004:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB129_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB129_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB129_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB129_5
.LBB129_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB129_6
.LBB129_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB129_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp1005:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc, .Ltmp1005-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,@function
_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_: # @_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1008:
	.cfi_def_cfa_offset 16
.Ltmp1009:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1010:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1011:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_, .Ltmp1011-_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1014:
	.cfi_def_cfa_offset 16
.Ltmp1015:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1016:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1017:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv, .Ltmp1017-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1020:
	.cfi_def_cfa_offset 16
.Ltmp1021:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1022:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB132_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB132_3
.LBB132_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB132_3
.LBB132_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1023:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm, .Ltmp1023-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1026:
	.cfi_def_cfa_offset 16
.Ltmp1027:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1028:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1029:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_, .Ltmp1029-_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp1030:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp1030-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1031:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_, .Ltmp1031-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1034:
	.cfi_def_cfa_offset 16
.Ltmp1035:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1036:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1037:
	.size	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E, .Ltmp1037-_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1040:
	.cfi_def_cfa_offset 16
.Ltmp1041:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1042:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB137_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
.LBB137_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1043:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m, .Ltmp1043-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1046:
	.cfi_def_cfa_offset 16
.Ltmp1047:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1048:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1049:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m, .Ltmp1049-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,@function
_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_: # @_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1052:
	.cfi_def_cfa_offset 16
.Ltmp1053:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1054:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1055:
	.size	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_, .Ltmp1055-_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1056:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_, .Ltmp1056-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1059:
	.cfi_def_cfa_offset 16
.Ltmp1060:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1061:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1062:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E, .Ltmp1062-_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1065:
	.cfi_def_cfa_offset 16
.Ltmp1066:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1067:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1068:
	.size	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp1068-_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1071:
	.cfi_def_cfa_offset 16
.Ltmp1072:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1073:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1074:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_, .Ltmp1074-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1077:
	.cfi_def_cfa_offset 16
.Ltmp1078:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1079:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1080:
	.size	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp1080-_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1083:
	.cfi_def_cfa_offset 16
.Ltmp1084:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1085:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1086:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp1086-_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,@function
_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_: # @_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1089:
	.cfi_def_cfa_offset 16
.Ltmp1090:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1091:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1092:
	.size	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_, .Ltmp1092-_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,@function
_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_: # @_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp1093:
	.size	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_, .Ltmp1093-_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1096:
	.cfi_def_cfa_offset 16
.Ltmp1097:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1098:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1099:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp1099-_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,@function
_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_: # @_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1102:
	.cfi_def_cfa_offset 16
.Ltmp1103:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1104:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1105:
	.size	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_, .Ltmp1105-_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1108:
	.cfi_def_cfa_offset 16
.Ltmp1109:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1110:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB150_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB150_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1111:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_, .Ltmp1111-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1114:
	.cfi_def_cfa_offset 16
.Ltmp1115:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1116:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB151_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB151_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1117:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv, .Ltmp1117-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1118:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv, .Ltmp1118-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1121:
	.cfi_def_cfa_offset 16
.Ltmp1122:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1123:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1124:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv, .Ltmp1124-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZSt3maxImERKT_S2_S2_,"axG",@progbits,_ZSt3maxImERKT_S2_S2_,comdat
	.weak	_ZSt3maxImERKT_S2_S2_
	.align	16, 0x90
	.type	_ZSt3maxImERKT_S2_S2_,@function
_ZSt3maxImERKT_S2_S2_:                  # @_ZSt3maxImERKT_S2_S2_
	.cfi_startproc
# BB#0:
	movq	%rdi, -16(%rsp)
	movq	%rsi, -24(%rsp)
	movq	-16(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-24(%rsp), %rdi
	cmpq	(%rdi), %rsi
	jae	.LBB154_2
# BB#1:
	movq	-24(%rsp), %rax
	movq	%rax, -8(%rsp)
	jmp	.LBB154_3
.LBB154_2:
	movq	-16(%rsp), %rax
	movq	%rax, -8(%rsp)
.LBB154_3:
	movq	-8(%rsp), %rax
	ret
.Ltmp1125:
	.size	_ZSt3maxImERKT_S2_S2_, .Ltmp1125-_ZSt3maxImERKT_S2_S2_
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp1126:
	.size	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp1126-_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1129:
	.cfi_def_cfa_offset 16
.Ltmp1130:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1131:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1132:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp1132-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1135:
	.cfi_def_cfa_offset 16
.Ltmp1136:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1137:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1138:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp1138-_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1141:
	.cfi_def_cfa_offset 16
.Ltmp1142:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1143:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB158_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB158_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1144:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_, .Ltmp1144-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin159:
	.cfi_lsda 3, .Lexception159
# BB#0:
	pushq	%rbp
.Ltmp1153:
	.cfi_def_cfa_offset 16
.Ltmp1154:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1155:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp1145:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
.Ltmp1146:
	jmp	.LBB159_1
.LBB159_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB159_2:
.Ltmp1147:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp1148:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp1149:
	jmp	.LBB159_3
.LBB159_3:
	jmp	.LBB159_4
.LBB159_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB159_5:
.Ltmp1150:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1156:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp1156-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc
.Leh_func_end159:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table159:
.Lexception159:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset332 = .Ltmp1145-.Leh_func_begin159 # >> Call Site 1 <<
	.long	.Lset332
.Lset333 = .Ltmp1146-.Ltmp1145          #   Call between .Ltmp1145 and .Ltmp1146
	.long	.Lset333
.Lset334 = .Ltmp1147-.Leh_func_begin159 #     jumps to .Ltmp1147
	.long	.Lset334
	.byte	0                       #   On action: cleanup
.Lset335 = .Ltmp1146-.Leh_func_begin159 # >> Call Site 2 <<
	.long	.Lset335
.Lset336 = .Ltmp1148-.Ltmp1146          #   Call between .Ltmp1146 and .Ltmp1148
	.long	.Lset336
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset337 = .Ltmp1148-.Leh_func_begin159 # >> Call Site 3 <<
	.long	.Lset337
.Lset338 = .Ltmp1149-.Ltmp1148          #   Call between .Ltmp1148 and .Ltmp1149
	.long	.Lset338
.Lset339 = .Ltmp1150-.Leh_func_begin159 #     jumps to .Ltmp1150
	.long	.Lset339
	.byte	1                       #   On action: 1
.Lset340 = .Ltmp1149-.Leh_func_begin159 # >> Call Site 4 <<
	.long	.Lset340
.Lset341 = .Leh_func_end159-.Ltmp1149   #   Call between .Ltmp1149 and .Leh_func_end159
	.long	.Lset341
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1159:
	.cfi_def_cfa_offset 16
.Ltmp1160:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1161:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1162:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev, .Ltmp1162-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core12sc_port_base4kindEv,"axG",@progbits,_ZNK7sc_core12sc_port_base4kindEv,comdat
	.weak	_ZNK7sc_core12sc_port_base4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core12sc_port_base4kindEv,@function
_ZNK7sc_core12sc_port_base4kindEv:      # @_ZNK7sc_core12sc_port_base4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str22, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1163:
	.size	_ZNK7sc_core12sc_port_base4kindEv, .Ltmp1163-_ZNK7sc_core12sc_port_base4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1166:
	.cfi_def_cfa_offset 16
.Ltmp1167:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1168:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1169:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev, .Ltmp1169-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin163:
	.cfi_lsda 3, .Lexception163
# BB#0:
	pushq	%rbp
.Ltmp1175:
	.cfi_def_cfa_offset 16
.Ltmp1176:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1177:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1170:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
.Ltmp1171:
	jmp	.LBB163_1
.LBB163_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB163_2:
.Ltmp1172:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1178:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev, .Ltmp1178-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.cfi_endproc
.Leh_func_end163:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table163:
.Lexception163:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset342 = .Ltmp1170-.Leh_func_begin163 # >> Call Site 1 <<
	.long	.Lset342
.Lset343 = .Ltmp1171-.Ltmp1170          #   Call between .Ltmp1170 and .Ltmp1171
	.long	.Lset343
.Lset344 = .Ltmp1172-.Leh_func_begin163 #     jumps to .Ltmp1172
	.long	.Lset344
	.byte	0                       #   On action: cleanup
.Lset345 = .Ltmp1171-.Leh_func_begin163 # >> Call Site 2 <<
	.long	.Lset345
.Lset346 = .Leh_func_end163-.Ltmp1171   #   Call between .Ltmp1171 and .Leh_func_end163
	.long	.Lset346
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin164:
	.cfi_lsda 3, .Lexception164
# BB#0:
	pushq	%rbp
.Ltmp1189:
	.cfi_def_cfa_offset 16
.Ltmp1190:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1191:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp1179:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp1180:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB164_1
.LBB164_1:
.Ltmp1181:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
.Ltmp1182:
	jmp	.LBB164_2
.LBB164_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB164_3:
.Ltmp1183:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp1184:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
.Ltmp1185:
	jmp	.LBB164_4
.LBB164_4:
	jmp	.LBB164_5
.LBB164_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB164_6:
.Ltmp1186:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1192:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev, .Ltmp1192-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end164:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table164:
.Lexception164:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset347 = .Ltmp1179-.Leh_func_begin164 # >> Call Site 1 <<
	.long	.Lset347
.Lset348 = .Ltmp1182-.Ltmp1179          #   Call between .Ltmp1179 and .Ltmp1182
	.long	.Lset348
.Lset349 = .Ltmp1183-.Leh_func_begin164 #     jumps to .Ltmp1183
	.long	.Lset349
	.byte	0                       #   On action: cleanup
.Lset350 = .Ltmp1182-.Leh_func_begin164 # >> Call Site 2 <<
	.long	.Lset350
.Lset351 = .Ltmp1184-.Ltmp1182          #   Call between .Ltmp1182 and .Ltmp1184
	.long	.Lset351
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset352 = .Ltmp1184-.Leh_func_begin164 # >> Call Site 3 <<
	.long	.Lset352
.Lset353 = .Ltmp1185-.Ltmp1184          #   Call between .Ltmp1184 and .Ltmp1185
	.long	.Lset353
.Lset354 = .Ltmp1186-.Leh_func_begin164 #     jumps to .Ltmp1186
	.long	.Lset354
	.byte	1                       #   On action: 1
.Lset355 = .Ltmp1185-.Leh_func_begin164 # >> Call Site 4 <<
	.long	.Lset355
.Lset356 = .Leh_func_end164-.Ltmp1185   #   Call between .Ltmp1185 and .Leh_func_end164
	.long	.Lset356
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin165:
	.cfi_lsda 3, .Lexception165
# BB#0:
	pushq	%rbp
.Ltmp1198:
	.cfi_def_cfa_offset 16
.Ltmp1199:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1200:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp1193:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp1194:
	jmp	.LBB165_1
.LBB165_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB165_2:
.Ltmp1195:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1201:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev, .Ltmp1201-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end165:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table165:
.Lexception165:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset357 = .Ltmp1193-.Leh_func_begin165 # >> Call Site 1 <<
	.long	.Lset357
.Lset358 = .Ltmp1194-.Ltmp1193          #   Call between .Ltmp1193 and .Ltmp1194
	.long	.Lset358
.Lset359 = .Ltmp1195-.Leh_func_begin165 #     jumps to .Ltmp1195
	.long	.Lset359
	.byte	0                       #   On action: cleanup
.Lset360 = .Ltmp1194-.Leh_func_begin165 # >> Call Site 2 <<
	.long	.Lset360
.Lset361 = .Leh_func_end165-.Ltmp1194   #   Call between .Ltmp1194 and .Leh_func_end165
	.long	.Lset361
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1204:
	.cfi_def_cfa_offset 16
.Ltmp1205:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1206:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1207:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev, .Ltmp1207-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1210:
	.cfi_def_cfa_offset 16
.Ltmp1211:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1212:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1213:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev, .Ltmp1213-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1216:
	.cfi_def_cfa_offset 16
.Ltmp1217:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1218:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1219:
	.size	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp1219-_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1220:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp1220-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core15sc_trace_paramsD1Ev,"axG",@progbits,_ZN7sc_core15sc_trace_paramsD1Ev,comdat
	.weak	_ZN7sc_core15sc_trace_paramsD1Ev
	.align	16, 0x90
	.type	_ZN7sc_core15sc_trace_paramsD1Ev,@function
_ZN7sc_core15sc_trace_paramsD1Ev:       # @_ZN7sc_core15sc_trace_paramsD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1223:
	.cfi_def_cfa_offset 16
.Ltmp1224:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1225:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core15sc_trace_paramsD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1226:
	.size	_ZN7sc_core15sc_trace_paramsD1Ev, .Ltmp1226-_ZN7sc_core15sc_trace_paramsD1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev: # @_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1229:
	.cfi_def_cfa_offset 16
.Ltmp1230:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1231:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1232:
	.size	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev, .Ltmp1232-_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev: # @_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin172:
	.cfi_lsda 3, .Lexception172
# BB#0:
	pushq	%rbp
.Ltmp1243:
	.cfi_def_cfa_offset 16
.Ltmp1244:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1245:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp1233:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv
.Ltmp1234:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB172_1
.LBB172_1:
.Ltmp1235:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E
.Ltmp1236:
	jmp	.LBB172_2
.LBB172_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB172_3:
.Ltmp1237:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp1238:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
.Ltmp1239:
	jmp	.LBB172_4
.LBB172_4:
	jmp	.LBB172_5
.LBB172_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB172_6:
.Ltmp1240:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1246:
	.size	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev, .Ltmp1246-_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.cfi_endproc
.Leh_func_end172:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table172:
.Lexception172:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset362 = .Ltmp1233-.Leh_func_begin172 # >> Call Site 1 <<
	.long	.Lset362
.Lset363 = .Ltmp1236-.Ltmp1233          #   Call between .Ltmp1233 and .Ltmp1236
	.long	.Lset363
.Lset364 = .Ltmp1237-.Leh_func_begin172 #     jumps to .Ltmp1237
	.long	.Lset364
	.byte	0                       #   On action: cleanup
.Lset365 = .Ltmp1236-.Leh_func_begin172 # >> Call Site 2 <<
	.long	.Lset365
.Lset366 = .Ltmp1238-.Ltmp1236          #   Call between .Ltmp1236 and .Ltmp1238
	.long	.Lset366
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset367 = .Ltmp1238-.Leh_func_begin172 # >> Call Site 3 <<
	.long	.Lset367
.Lset368 = .Ltmp1239-.Ltmp1238          #   Call between .Ltmp1238 and .Ltmp1239
	.long	.Lset368
.Lset369 = .Ltmp1240-.Leh_func_begin172 #     jumps to .Ltmp1240
	.long	.Lset369
	.byte	1                       #   On action: 1
.Lset370 = .Ltmp1239-.Leh_func_begin172 # >> Call Site 4 <<
	.long	.Lset370
.Lset371 = .Leh_func_end172-.Ltmp1239   #   Call between .Ltmp1239 and .Leh_func_end172
	.long	.Lset371
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1249:
	.cfi_def_cfa_offset 16
.Ltmp1250:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1251:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1252:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E, .Ltmp1252-_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsES2_EvT_S4_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp1253:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv, .Ltmp1253-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin175:
	.cfi_lsda 3, .Lexception175
# BB#0:
	pushq	%rbp
.Ltmp1259:
	.cfi_def_cfa_offset 16
.Ltmp1260:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1261:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp1254:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m
.Ltmp1255:
	jmp	.LBB175_1
.LBB175_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB175_2:
.Ltmp1256:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1262:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev, .Ltmp1262-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EED2Ev
	.cfi_endproc
.Leh_func_end175:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table175:
.Lexception175:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset372 = .Ltmp1254-.Leh_func_begin175 # >> Call Site 1 <<
	.long	.Lset372
.Lset373 = .Ltmp1255-.Ltmp1254          #   Call between .Ltmp1254 and .Ltmp1255
	.long	.Lset373
.Lset374 = .Ltmp1256-.Leh_func_begin175 #     jumps to .Ltmp1256
	.long	.Lset374
	.byte	0                       #   On action: cleanup
.Lset375 = .Ltmp1255-.Leh_func_begin175 # >> Call Site 2 <<
	.long	.Lset375
.Lset376 = .Leh_func_end175-.Ltmp1255   #   Call between .Ltmp1255 and .Leh_func_end175
	.long	.Lset376
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1265:
	.cfi_def_cfa_offset 16
.Ltmp1266:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1267:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB176_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m
.LBB176_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1268:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m, .Ltmp1268-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE13_M_deallocateEPS2_m
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1271:
	.cfi_def_cfa_offset 16
.Ltmp1272:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1273:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1274:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev, .Ltmp1274-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1277:
	.cfi_def_cfa_offset 16
.Ltmp1278:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1279:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1280:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev, .Ltmp1280-_ZNSt12_Vector_baseIPN7sc_core15sc_trace_paramsESaIS2_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_trace_paramsEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev,@function
_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev: # @_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1283:
	.cfi_def_cfa_offset 16
.Ltmp1284:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1285:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1286:
	.size	_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev, .Ltmp1286-_ZNSaIPN7sc_core15sc_trace_paramsEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1287:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev, .Ltmp1287-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1290:
	.cfi_def_cfa_offset 16
.Ltmp1291:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1292:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1293:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m, .Ltmp1293-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_trace_paramsEE10deallocateEPS3_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_,@function
_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_: # @_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1296:
	.cfi_def_cfa_offset 16
.Ltmp1297:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1298:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1299:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_, .Ltmp1299-_ZSt8_DestroyIPPN7sc_core15sc_trace_paramsEEvT_S4_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1300:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_, .Ltmp1300-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_trace_paramsEEEvT_S6_
	.cfi_endproc

	.section	.text._ZN7sc_core15sc_trace_paramsD2Ev,"axG",@progbits,_ZN7sc_core15sc_trace_paramsD2Ev,comdat
	.weak	_ZN7sc_core15sc_trace_paramsD2Ev
	.align	16, 0x90
	.type	_ZN7sc_core15sc_trace_paramsD2Ev,@function
_ZN7sc_core15sc_trace_paramsD2Ev:       # @_ZN7sc_core15sc_trace_paramsD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1303:
	.cfi_def_cfa_offset 16
.Ltmp1304:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1305:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	callq	_ZNSsD1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1306:
	.size	_ZN7sc_core15sc_trace_paramsD2Ev, .Ltmp1306-_ZN7sc_core15sc_trace_paramsD2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin185:
	.cfi_lsda 3, .Lexception185
# BB#0:
	pushq	%rbp
.Ltmp1317:
	.cfi_def_cfa_offset 16
.Ltmp1318:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1319:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE+16, (%rdi)
	movq	%rdi, %rax
.Ltmp1307:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
.Ltmp1308:
	jmp	.LBB185_1
.LBB185_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	je	.LBB185_4
# BB#2:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp1309:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp1310:
	jmp	.LBB185_3
.LBB185_3:
	jmp	.LBB185_4
.LBB185_4:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB185_5:
.Ltmp1311:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp1312:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
.Ltmp1313:
	jmp	.LBB185_6
.LBB185_6:
	jmp	.LBB185_7
.LBB185_7:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB185_8:
.Ltmp1314:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1320:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev, .Ltmp1320-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED2Ev
	.cfi_endproc
.Leh_func_end185:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table185:
.Lexception185:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset377 = .Ltmp1307-.Leh_func_begin185 # >> Call Site 1 <<
	.long	.Lset377
.Lset378 = .Ltmp1310-.Ltmp1307          #   Call between .Ltmp1307 and .Ltmp1310
	.long	.Lset378
.Lset379 = .Ltmp1311-.Leh_func_begin185 #     jumps to .Ltmp1311
	.long	.Lset379
	.byte	0                       #   On action: cleanup
.Lset380 = .Ltmp1310-.Leh_func_begin185 # >> Call Site 2 <<
	.long	.Lset380
.Lset381 = .Ltmp1312-.Ltmp1310          #   Call between .Ltmp1310 and .Ltmp1312
	.long	.Lset381
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset382 = .Ltmp1312-.Leh_func_begin185 # >> Call Site 3 <<
	.long	.Lset382
.Lset383 = .Ltmp1313-.Ltmp1312          #   Call between .Ltmp1312 and .Ltmp1313
	.long	.Lset383
.Lset384 = .Ltmp1314-.Leh_func_begin185 #     jumps to .Ltmp1314
	.long	.Lset384
	.byte	1                       #   On action: 1
.Lset385 = .Ltmp1313-.Leh_func_begin185 # >> Call Site 4 <<
	.long	.Lset385
.Lset386 = .Leh_func_end185-.Ltmp1313   #   Call between .Ltmp1313 and .Leh_func_end185
	.long	.Lset386
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin186:
	.cfi_lsda 3, .Lexception186
# BB#0:
	pushq	%rbp
.Ltmp1329:
	.cfi_def_cfa_offset 16
.Ltmp1330:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1331:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB186_14
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %ecx
	subl	$1, %ecx
	movl	%ecx, -12(%rbp)
.LBB186_2:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB186_9
# BB#3:                                 #   in Loop: Header=BB186_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	cmpq	$0, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB186_6
# BB#4:                                 #   in Loop: Header=BB186_2 Depth=1
.Ltmp1324:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core15sc_trace_paramsD1Ev
.Ltmp1325:
	jmp	.LBB186_5
.LBB186_5:                              #   in Loop: Header=BB186_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB186_6:                              #   in Loop: Header=BB186_2 Depth=1
	jmp	.LBB186_7
.LBB186_7:                              #   in Loop: Header=BB186_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -12(%rbp)
	jmp	.LBB186_2
.LBB186_8:
.Ltmp1326:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB186_15
.LBB186_9:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	je	.LBB186_12
# BB#10:
.Ltmp1321:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
.Ltmp1322:
	jmp	.LBB186_11
.LBB186_11:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB186_12:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	$0, 128(%rax)
	jmp	.LBB186_14
.LBB186_13:
.Ltmp1323:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB186_15
.LBB186_14:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB186_15:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1332:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv, .Ltmp1332-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
	.cfi_endproc
.Leh_func_end186:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table186:
.Lexception186:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset387 = .Ltmp1324-.Leh_func_begin186 # >> Call Site 1 <<
	.long	.Lset387
.Lset388 = .Ltmp1325-.Ltmp1324          #   Call between .Ltmp1324 and .Ltmp1325
	.long	.Lset388
.Lset389 = .Ltmp1326-.Leh_func_begin186 #     jumps to .Ltmp1326
	.long	.Lset389
	.byte	0                       #   On action: cleanup
.Lset390 = .Ltmp1321-.Leh_func_begin186 # >> Call Site 2 <<
	.long	.Lset390
.Lset391 = .Ltmp1322-.Ltmp1321          #   Call between .Ltmp1321 and .Ltmp1322
	.long	.Lset391
.Lset392 = .Ltmp1323-.Leh_func_begin186 #     jumps to .Ltmp1323
	.long	.Lset392
	.byte	0                       #   On action: cleanup
.Lset393 = .Ltmp1322-.Leh_func_begin186 # >> Call Site 3 <<
	.long	.Lset393
.Lset394 = .Leh_func_end186-.Ltmp1322   #   Call between .Ltmp1322 and .Leh_func_end186
	.long	.Lset394
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1335:
	.cfi_def_cfa_offset 16
.Ltmp1336:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1337:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1338:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp1338-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str23, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1339:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv, .Ltmp1339-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin189:
	.cfi_lsda 3, .Lexception189
# BB#0:
	pushq	%rbp
.Ltmp1345:
	.cfi_def_cfa_offset 16
.Ltmp1346:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1347:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1340:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
.Ltmp1341:
	jmp	.LBB189_1
.LBB189_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB189_2:
.Ltmp1342:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1348:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev, .Ltmp1348-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev
	.cfi_endproc
.Leh_func_end189:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table189:
.Lexception189:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset395 = .Ltmp1340-.Leh_func_begin189 # >> Call Site 1 <<
	.long	.Lset395
.Lset396 = .Ltmp1341-.Ltmp1340          #   Call between .Ltmp1340 and .Ltmp1341
	.long	.Lset396
.Lset397 = .Ltmp1342-.Leh_func_begin189 #     jumps to .Ltmp1342
	.long	.Lset397
	.byte	0                       #   On action: cleanup
.Lset398 = .Ltmp1341-.Leh_func_begin189 # >> Call Site 2 <<
	.long	.Lset398
.Lset399 = .Leh_func_end189-.Ltmp1341   #   Call between .Ltmp1341 and .Leh_func_end189
	.long	.Lset399
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB190_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB190_3
.LBB190_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB190_3
.LBB190_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp1349:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv, .Ltmp1349-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB191_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB191_3
.LBB191_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB191_3
.LBB191_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp1350:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv, .Ltmp1350-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1353:
	.cfi_def_cfa_offset 16
.Ltmp1354:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1355:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1356:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE, .Ltmp1356-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1359:
	.cfi_def_cfa_offset 16
.Ltmp1360:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1361:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	je	.LBB193_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	movabsq	$-1, %rdx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-64(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB193_3
.LBB193_2:
	movabsq	$0, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB193_3
.LBB193_3:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB193_5
# BB#4:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
	jmp	.LBB193_11
.LBB193_5:
	movq	-24(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	je	.LBB193_7
# BB#6:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	movabsq	$-1, %rdx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-88(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB193_8
.LBB193_7:
	movabsq	$0, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB193_8
.LBB193_8:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB193_10
# BB#9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
	jmp	.LBB193_11
.LBB193_10:
	movl	$2, -4(%rbp)
.LBB193_11:
	movl	-4(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp1362:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE, .Ltmp1362-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1365:
	.cfi_def_cfa_offset 16
.Ltmp1366:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1367:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB194_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB194_3
.LBB194_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB194_3
.LBB194_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB194_5
# BB#4:
	jmp	.LBB194_6
.LBB194_5:
	leaq	.L.str18, %rdi
	leaq	.L.str17, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB194_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB194_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB194_12
# BB#8:                                 #   in Loop: Header=BB194_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB194_10
# BB#9:                                 #   in Loop: Header=BB194_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str19, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB194_10:                             #   in Loop: Header=BB194_7 Depth=1
	jmp	.LBB194_11
.LBB194_11:                             #   in Loop: Header=BB194_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB194_7
.LBB194_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp1368:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp1368-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1371:
	.cfi_def_cfa_offset 16
.Ltmp1372:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1373:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1374:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv, .Ltmp1374-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1377:
	.cfi_def_cfa_offset 16
.Ltmp1378:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1379:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1380:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv, .Ltmp1380-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1383:
	.cfi_def_cfa_offset 16
.Ltmp1384:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1385:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB197_9
# BB#1:
	movl	$0, -12(%rbp)
.LBB197_2:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movq	128(%rcx), %rdi
	movl	%eax, -44(%rbp)         # 4-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %edx
	movl	-44(%rbp), %esi         # 4-byte Reload
	cmpl	%edx, %esi
	jge	.LBB197_8
# BB#3:                                 #   in Loop: Header=BB197_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rdi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-56(%rbp), %rax         # 8-byte Reload
	callq	*112(%rax)
	cmpq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	je	.LBB197_5
# BB#4:                                 #   in Loop: Header=BB197_2 Depth=1
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-72(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB197_6
.LBB197_5:                              #   in Loop: Header=BB197_2 Depth=1
	movabsq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB197_6
.LBB197_6:                              #   in Loop: Header=BB197_2 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	*40(%rcx)
	movq	-24(%rbp), %rcx
	addq	$8, %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	_ZN7sc_core8sc_traceEPNS_13sc_trace_fileERKN5sc_dt12sc_uint_baseERKSs
# BB#7:                                 #   in Loop: Header=BB197_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB197_2
.LBB197_8:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE13remove_tracesEv
.LBB197_9:
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp1386:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv, .Ltmp1386-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1389:
	.cfi_def_cfa_offset 16
.Ltmp1390:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1391:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB198_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB198_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB198_8
# BB#3:                                 #   in Loop: Header=BB198_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB198_5
# BB#4:                                 #   in Loop: Header=BB198_2 Depth=1
	jmp	.LBB198_6
.LBB198_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB198_6:                              #   in Loop: Header=BB198_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB198_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB198_2
.LBB198_8:
	jmp	.LBB198_10
.LBB198_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB198_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp1392:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp1392-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1395:
	.cfi_def_cfa_offset 16
.Ltmp1396:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1397:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB199_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB199_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB199_8
# BB#3:                                 #   in Loop: Header=BB199_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB199_5
# BB#4:                                 #   in Loop: Header=BB199_2 Depth=1
	jmp	.LBB199_6
.LBB199_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB199_6:                              #   in Loop: Header=BB199_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB199_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB199_2
.LBB199_8:
	jmp	.LBB199_10
.LBB199_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB199_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp1398:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp1398-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1401:
	.cfi_def_cfa_offset 16
.Ltmp1402:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1403:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	232(%rdi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	-24(%rbp), %rax         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1404:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE, .Ltmp1404-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1407:
	.cfi_def_cfa_offset 16
.Ltmp1408:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1409:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1410:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE, .Ltmp1410-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1413:
	.cfi_def_cfa_offset 16
.Ltmp1414:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1415:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1416:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE, .Ltmp1416-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1419:
	.cfi_def_cfa_offset 16
.Ltmp1420:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1421:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1422:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE, .Ltmp1422-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1425:
	.cfi_def_cfa_offset 16
.Ltmp1426:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1427:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1428:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE, .Ltmp1428-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp1429:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv, .Ltmp1429-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp1430:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm, .Ltmp1430-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp1431:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm, .Ltmp1431-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1434:
	.cfi_def_cfa_offset 16
.Ltmp1435:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1436:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB208_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB208_3
.LBB208_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
.LBB208_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1437:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_, .Ltmp1437-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE9push_backERKS6_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB209_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB209_2:
	ret
.Ltmp1438:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_, .Ltmp1438-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin210:
	.cfi_lsda 3, .Lexception210
# BB#0:
	pushq	%rbp
.Ltmp1470:
	.cfi_def_cfa_offset 16
.Ltmp1471:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1472:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB210_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB210_22
.LBB210_2:
	movl	$1, %esi
	movl	$.L.str20, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp1439:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE9constructEPS7_RKS7_
.Ltmp1440:
	jmp	.LBB210_3
.LBB210_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp1441:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp1442:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB210_4
.LBB210_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp1443:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp1444:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB210_5
.LBB210_5:
.Ltmp1445:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp1446:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB210_6
.LBB210_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp1447:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp1448:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB210_7
.LBB210_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp1449:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp1450:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB210_8
.LBB210_8:
.Ltmp1451:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp1452:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB210_9
.LBB210_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB210_21
.LBB210_10:
.Ltmp1453:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB210_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp1454:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_
.Ltmp1455:
	jmp	.LBB210_13
.LBB210_13:
	jmp	.LBB210_18
.LBB210_14:
.Ltmp1464:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp1465:
	callq	__cxa_end_catch
.Ltmp1466:
	jmp	.LBB210_20
.LBB210_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp1456:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp1457:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB210_16
.LBB210_16:
.Ltmp1458:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
.Ltmp1459:
	jmp	.LBB210_17
.LBB210_17:
	jmp	.LBB210_18
.LBB210_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp1460:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp1461:
	jmp	.LBB210_19
.LBB210_19:
.Ltmp1462:
	callq	__cxa_rethrow
.Ltmp1463:
	jmp	.LBB210_25
.LBB210_20:
	jmp	.LBB210_23
.LBB210_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB210_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB210_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB210_24:
.Ltmp1467:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB210_25:
.Ltmp1473:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_, .Ltmp1473-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_endproc
.Leh_func_end210:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table210:
.Lexception210:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset400 = .Leh_func_begin210-.Leh_func_begin210 # >> Call Site 1 <<
	.long	.Lset400
.Lset401 = .Ltmp1439-.Leh_func_begin210 #   Call between .Leh_func_begin210 and .Ltmp1439
	.long	.Lset401
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset402 = .Ltmp1439-.Leh_func_begin210 # >> Call Site 2 <<
	.long	.Lset402
.Lset403 = .Ltmp1452-.Ltmp1439          #   Call between .Ltmp1439 and .Ltmp1452
	.long	.Lset403
.Lset404 = .Ltmp1453-.Leh_func_begin210 #     jumps to .Ltmp1453
	.long	.Lset404
	.byte	1                       #   On action: 1
.Lset405 = .Ltmp1452-.Leh_func_begin210 # >> Call Site 3 <<
	.long	.Lset405
.Lset406 = .Ltmp1454-.Ltmp1452          #   Call between .Ltmp1452 and .Ltmp1454
	.long	.Lset406
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset407 = .Ltmp1454-.Leh_func_begin210 # >> Call Site 4 <<
	.long	.Lset407
.Lset408 = .Ltmp1455-.Ltmp1454          #   Call between .Ltmp1454 and .Ltmp1455
	.long	.Lset408
.Lset409 = .Ltmp1464-.Leh_func_begin210 #     jumps to .Ltmp1464
	.long	.Lset409
	.byte	0                       #   On action: cleanup
.Lset410 = .Ltmp1465-.Leh_func_begin210 # >> Call Site 5 <<
	.long	.Lset410
.Lset411 = .Ltmp1466-.Ltmp1465          #   Call between .Ltmp1465 and .Ltmp1466
	.long	.Lset411
.Lset412 = .Ltmp1467-.Leh_func_begin210 #     jumps to .Ltmp1467
	.long	.Lset412
	.byte	1                       #   On action: 1
.Lset413 = .Ltmp1456-.Leh_func_begin210 # >> Call Site 6 <<
	.long	.Lset413
.Lset414 = .Ltmp1463-.Ltmp1456          #   Call between .Ltmp1456 and .Ltmp1463
	.long	.Lset414
.Lset415 = .Ltmp1464-.Leh_func_begin210 #     jumps to .Ltmp1464
	.long	.Lset415
	.byte	0                       #   On action: cleanup
.Lset416 = .Ltmp1463-.Leh_func_begin210 # >> Call Site 7 <<
	.long	.Lset416
.Lset417 = .Leh_func_end210-.Ltmp1463   #   Call between .Ltmp1463 and .Leh_func_end210
	.long	.Lset417
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1476:
	.cfi_def_cfa_offset 16
.Ltmp1477:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1478:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1479:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv, .Ltmp1479-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1482:
	.cfi_def_cfa_offset 16
.Ltmp1483:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1484:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1485:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_, .Ltmp1485-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp1486:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_, .Ltmp1486-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,@function
_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_: # @_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1489:
	.cfi_def_cfa_offset 16
.Ltmp1490:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1491:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1492:
	.size	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_, .Ltmp1492-_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp1493:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv, .Ltmp1493-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp1494:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv, .Ltmp1494-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1497:
	.cfi_def_cfa_offset 16
.Ltmp1498:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1499:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB217_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB217_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB217_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB217_5
.LBB217_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB217_6
.LBB217_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB217_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp1500:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc, .Ltmp1500-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,@function
_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_: # @_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1503:
	.cfi_def_cfa_offset 16
.Ltmp1504:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1505:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1506:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_, .Ltmp1506-_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1509:
	.cfi_def_cfa_offset 16
.Ltmp1510:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1511:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1512:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv, .Ltmp1512-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1515:
	.cfi_def_cfa_offset 16
.Ltmp1516:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1517:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB220_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB220_3
.LBB220_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB220_3
.LBB220_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1518:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm, .Ltmp1518-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1521:
	.cfi_def_cfa_offset 16
.Ltmp1522:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1523:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1524:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_, .Ltmp1524-_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp1525:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp1525-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1526:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_, .Ltmp1526-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE7destroyEPS7_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1529:
	.cfi_def_cfa_offset 16
.Ltmp1530:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1531:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1532:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E, .Ltmp1532-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1535:
	.cfi_def_cfa_offset 16
.Ltmp1536:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1537:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB225_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m
.LBB225_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1538:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m, .Ltmp1538-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1541:
	.cfi_def_cfa_offset 16
.Ltmp1542:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1543:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1544:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m, .Ltmp1544-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE10deallocateEPS7_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1547:
	.cfi_def_cfa_offset 16
.Ltmp1548:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1549:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1550:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_, .Ltmp1550-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEvT_S8_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1551:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_, .Ltmp1551-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEvT_SA_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1554:
	.cfi_def_cfa_offset 16
.Ltmp1555:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1556:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1557:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E, .Ltmp1557-_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,@function
_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_: # @_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1560:
	.cfi_def_cfa_offset 16
.Ltmp1561:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1562:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1563:
	.size	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_, .Ltmp1563-_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1566:
	.cfi_def_cfa_offset 16
.Ltmp1567:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1568:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1569:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_, .Ltmp1569-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES9_EET0_T_SB_SA_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_,@function
_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_: # @_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1572:
	.cfi_def_cfa_offset 16
.Ltmp1573:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1574:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1575:
	.size	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_, .Ltmp1575-_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1578:
	.cfi_def_cfa_offset 16
.Ltmp1579:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1580:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1581:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_, .Ltmp1581-_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,@function
_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_: # @_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1584:
	.cfi_def_cfa_offset 16
.Ltmp1585:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1586:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1587:
	.size	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_, .Ltmp1587-_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_,@function
_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_: # @_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp1588:
	.size	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_, .Ltmp1588-_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_: # @_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1591:
	.cfi_def_cfa_offset 16
.Ltmp1592:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1593:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1594:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_, .Ltmp1594-_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,@function
_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_: # @_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1597:
	.cfi_def_cfa_offset 16
.Ltmp1598:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1599:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1600:
	.size	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_, .Ltmp1600-_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1603:
	.cfi_def_cfa_offset 16
.Ltmp1604:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1605:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB238_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB238_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1606:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_, .Ltmp1606-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1609:
	.cfi_def_cfa_offset 16
.Ltmp1610:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1611:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB239_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB239_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1612:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv, .Ltmp1612-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1613:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv, .Ltmp1613-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1616:
	.cfi_def_cfa_offset 16
.Ltmp1617:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1618:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1619:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv, .Ltmp1619-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp1620:
	.size	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp1620-_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1623:
	.cfi_def_cfa_offset 16
.Ltmp1624:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1625:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1626:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_, .Ltmp1626-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1629:
	.cfi_def_cfa_offset 16
.Ltmp1630:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1631:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1632:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_, .Ltmp1632-_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1635:
	.cfi_def_cfa_offset 16
.Ltmp1636:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1637:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB245_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB245_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1638:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_, .Ltmp1638-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1641:
	.cfi_def_cfa_offset 16
.Ltmp1642:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1643:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB246_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB246_3
.LBB246_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB246_3
.LBB246_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB246_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB246_6
.LBB246_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB246_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp1644:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE, .Ltmp1644-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin247:
	.cfi_lsda 3, .Lexception247
# BB#0:
	pushq	%rbp
.Ltmp1653:
	.cfi_def_cfa_offset 16
.Ltmp1654:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1655:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp1645:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev
.Ltmp1646:
	jmp	.LBB247_1
.LBB247_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB247_2:
.Ltmp1647:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp1648:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp1649:
	jmp	.LBB247_3
.LBB247_3:
	jmp	.LBB247_4
.LBB247_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB247_5:
.Ltmp1650:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1656:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev, .Ltmp1656-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_endproc
.Leh_func_end247:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table247:
.Lexception247:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset418 = .Ltmp1645-.Leh_func_begin247 # >> Call Site 1 <<
	.long	.Lset418
.Lset419 = .Ltmp1646-.Ltmp1645          #   Call between .Ltmp1645 and .Ltmp1646
	.long	.Lset419
.Lset420 = .Ltmp1647-.Leh_func_begin247 #     jumps to .Ltmp1647
	.long	.Lset420
	.byte	0                       #   On action: cleanup
.Lset421 = .Ltmp1646-.Leh_func_begin247 # >> Call Site 2 <<
	.long	.Lset421
.Lset422 = .Ltmp1648-.Ltmp1646          #   Call between .Ltmp1646 and .Ltmp1648
	.long	.Lset422
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset423 = .Ltmp1648-.Leh_func_begin247 # >> Call Site 3 <<
	.long	.Lset423
.Lset424 = .Ltmp1649-.Ltmp1648          #   Call between .Ltmp1648 and .Ltmp1649
	.long	.Lset424
.Lset425 = .Ltmp1650-.Leh_func_begin247 #     jumps to .Ltmp1650
	.long	.Lset425
	.byte	1                       #   On action: 1
.Lset426 = .Ltmp1649-.Leh_func_begin247 # >> Call Site 4 <<
	.long	.Lset426
.Lset427 = .Leh_func_end247-.Ltmp1649   #   Call between .Ltmp1649 and .Leh_func_end247
	.long	.Lset427
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1659:
	.cfi_def_cfa_offset 16
.Ltmp1660:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1661:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1662:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev, .Ltmp1662-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1665:
	.cfi_def_cfa_offset 16
.Ltmp1666:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1667:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1668:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev, .Ltmp1668-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin250:
	.cfi_lsda 3, .Lexception250
# BB#0:
	pushq	%rbp
.Ltmp1674:
	.cfi_def_cfa_offset 16
.Ltmp1675:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1676:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1669:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
.Ltmp1670:
	jmp	.LBB250_1
.LBB250_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB250_2:
.Ltmp1671:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1677:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev, .Ltmp1677-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev
	.cfi_endproc
.Leh_func_end250:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table250:
.Lexception250:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset428 = .Ltmp1669-.Leh_func_begin250 # >> Call Site 1 <<
	.long	.Lset428
.Lset429 = .Ltmp1670-.Ltmp1669          #   Call between .Ltmp1669 and .Ltmp1670
	.long	.Lset429
.Lset430 = .Ltmp1671-.Leh_func_begin250 #     jumps to .Ltmp1671
	.long	.Lset430
	.byte	0                       #   On action: cleanup
.Lset431 = .Ltmp1670-.Leh_func_begin250 # >> Call Site 2 <<
	.long	.Lset431
.Lset432 = .Leh_func_end250-.Ltmp1670   #   Call between .Ltmp1670 and .Leh_func_end250
	.long	.Lset432
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1680:
	.cfi_def_cfa_offset 16
.Ltmp1681:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1682:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB251_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB251_3
.LBB251_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB251_3
.LBB251_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB251_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB251_6
.LBB251_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB251_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp1683:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE, .Ltmp1683-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1686:
	.cfi_def_cfa_offset 16
.Ltmp1687:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1688:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1689:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_, .Ltmp1689-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1692:
	.cfi_def_cfa_offset 16
.Ltmp1693:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1694:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1695:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_, .Ltmp1695-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin254:
	.cfi_lsda 3, .Lexception254
# BB#0:
	pushq	%rbp
.Ltmp1706:
	.cfi_def_cfa_offset 16
.Ltmp1707:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1708:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp1696:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp1697:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB254_1
.LBB254_1:
.Ltmp1698:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEES6_EvT_S8_RSaIT0_E
.Ltmp1699:
	jmp	.LBB254_2
.LBB254_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB254_3:
.Ltmp1700:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp1701:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
.Ltmp1702:
	jmp	.LBB254_4
.LBB254_4:
	jmp	.LBB254_5
.LBB254_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB254_6:
.Ltmp1703:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1709:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev, .Ltmp1709-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end254:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table254:
.Lexception254:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset433 = .Ltmp1696-.Leh_func_begin254 # >> Call Site 1 <<
	.long	.Lset433
.Lset434 = .Ltmp1699-.Ltmp1696          #   Call between .Ltmp1696 and .Ltmp1699
	.long	.Lset434
.Lset435 = .Ltmp1700-.Leh_func_begin254 #     jumps to .Ltmp1700
	.long	.Lset435
	.byte	0                       #   On action: cleanup
.Lset436 = .Ltmp1699-.Leh_func_begin254 # >> Call Site 2 <<
	.long	.Lset436
.Lset437 = .Ltmp1701-.Ltmp1699          #   Call between .Ltmp1699 and .Ltmp1701
	.long	.Lset437
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset438 = .Ltmp1701-.Leh_func_begin254 # >> Call Site 3 <<
	.long	.Lset438
.Lset439 = .Ltmp1702-.Ltmp1701          #   Call between .Ltmp1701 and .Ltmp1702
	.long	.Lset439
.Lset440 = .Ltmp1703-.Leh_func_begin254 #     jumps to .Ltmp1703
	.long	.Lset440
	.byte	1                       #   On action: 1
.Lset441 = .Ltmp1702-.Leh_func_begin254 # >> Call Site 4 <<
	.long	.Lset441
.Lset442 = .Leh_func_end254-.Ltmp1702   #   Call between .Ltmp1702 and .Leh_func_end254
	.long	.Lset442
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin255:
	.cfi_lsda 3, .Lexception255
# BB#0:
	pushq	%rbp
.Ltmp1715:
	.cfi_def_cfa_offset 16
.Ltmp1716:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1717:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp1710:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp1711:
	jmp	.LBB255_1
.LBB255_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB255_2:
.Ltmp1712:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1718:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev, .Ltmp1718-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end255:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table255:
.Lexception255:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset443 = .Ltmp1710-.Leh_func_begin255 # >> Call Site 1 <<
	.long	.Lset443
.Lset444 = .Ltmp1711-.Ltmp1710          #   Call between .Ltmp1710 and .Ltmp1711
	.long	.Lset444
.Lset445 = .Ltmp1712-.Leh_func_begin255 #     jumps to .Ltmp1712
	.long	.Lset445
	.byte	0                       #   On action: cleanup
.Lset446 = .Ltmp1711-.Leh_func_begin255 # >> Call Site 2 <<
	.long	.Lset446
.Lset447 = .Leh_func_end255-.Ltmp1711   #   Call between .Ltmp1711 and .Leh_func_end255
	.long	.Lset447
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1721:
	.cfi_def_cfa_offset 16
.Ltmp1722:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1723:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1724:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev, .Ltmp1724-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1727:
	.cfi_def_cfa_offset 16
.Ltmp1728:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1729:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1730:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev, .Ltmp1730-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1733:
	.cfi_def_cfa_offset 16
.Ltmp1734:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1735:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1736:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev, .Ltmp1736-_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1737:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev, .Ltmp1737-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin260:
	.cfi_lsda 3, .Lexception260
# BB#0:
	pushq	%rbp
.Ltmp1748:
	.cfi_def_cfa_offset 16
.Ltmp1749:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1750:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE+16, (%rdi)
	movq	%rdi, %rax
.Ltmp1738:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
.Ltmp1739:
	jmp	.LBB260_1
.LBB260_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	je	.LBB260_4
# BB#2:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp1740:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp1741:
	jmp	.LBB260_3
.LBB260_3:
	jmp	.LBB260_4
.LBB260_4:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB260_5:
.Ltmp1742:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp1743:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
.Ltmp1744:
	jmp	.LBB260_6
.LBB260_6:
	jmp	.LBB260_7
.LBB260_7:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB260_8:
.Ltmp1745:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp1751:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev, .Ltmp1751-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED2Ev
	.cfi_endproc
.Leh_func_end260:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table260:
.Lexception260:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset448 = .Ltmp1738-.Leh_func_begin260 # >> Call Site 1 <<
	.long	.Lset448
.Lset449 = .Ltmp1741-.Ltmp1738          #   Call between .Ltmp1738 and .Ltmp1741
	.long	.Lset449
.Lset450 = .Ltmp1742-.Leh_func_begin260 #     jumps to .Ltmp1742
	.long	.Lset450
	.byte	0                       #   On action: cleanup
.Lset451 = .Ltmp1741-.Leh_func_begin260 # >> Call Site 2 <<
	.long	.Lset451
.Lset452 = .Ltmp1743-.Ltmp1741          #   Call between .Ltmp1741 and .Ltmp1743
	.long	.Lset452
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset453 = .Ltmp1743-.Leh_func_begin260 # >> Call Site 3 <<
	.long	.Lset453
.Lset454 = .Ltmp1744-.Ltmp1743          #   Call between .Ltmp1743 and .Ltmp1744
	.long	.Lset454
.Lset455 = .Ltmp1745-.Leh_func_begin260 #     jumps to .Ltmp1745
	.long	.Lset455
	.byte	1                       #   On action: 1
.Lset456 = .Ltmp1744-.Leh_func_begin260 # >> Call Site 4 <<
	.long	.Lset456
.Lset457 = .Leh_func_end260-.Ltmp1744   #   Call between .Ltmp1744 and .Leh_func_end260
	.long	.Lset457
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin261:
	.cfi_lsda 3, .Lexception261
# BB#0:
	pushq	%rbp
.Ltmp1760:
	.cfi_def_cfa_offset 16
.Ltmp1761:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1762:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB261_14
# BB#1:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %ecx
	subl	$1, %ecx
	movl	%ecx, -12(%rbp)
.LBB261_2:                              # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB261_9
# BB#3:                                 #   in Loop: Header=BB261_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	cmpq	$0, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB261_6
# BB#4:                                 #   in Loop: Header=BB261_2 Depth=1
.Ltmp1755:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core15sc_trace_paramsD1Ev
.Ltmp1756:
	jmp	.LBB261_5
.LBB261_5:                              #   in Loop: Header=BB261_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB261_6:                              #   in Loop: Header=BB261_2 Depth=1
	jmp	.LBB261_7
.LBB261_7:                              #   in Loop: Header=BB261_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -12(%rbp)
	jmp	.LBB261_2
.LBB261_8:
.Ltmp1757:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB261_15
.LBB261_9:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	je	.LBB261_12
# BB#10:
.Ltmp1752:
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EED1Ev
.Ltmp1753:
	jmp	.LBB261_11
.LBB261_11:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
.LBB261_12:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	$0, 128(%rax)
	jmp	.LBB261_14
.LBB261_13:
.Ltmp1754:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	jmp	.LBB261_15
.LBB261_14:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB261_15:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1763:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv, .Ltmp1763-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
	.cfi_endproc
.Leh_func_end261:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table261:
.Lexception261:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.byte	41                      # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	39                      # Call site table length
.Lset458 = .Ltmp1755-.Leh_func_begin261 # >> Call Site 1 <<
	.long	.Lset458
.Lset459 = .Ltmp1756-.Ltmp1755          #   Call between .Ltmp1755 and .Ltmp1756
	.long	.Lset459
.Lset460 = .Ltmp1757-.Leh_func_begin261 #     jumps to .Ltmp1757
	.long	.Lset460
	.byte	0                       #   On action: cleanup
.Lset461 = .Ltmp1752-.Leh_func_begin261 # >> Call Site 2 <<
	.long	.Lset461
.Lset462 = .Ltmp1753-.Ltmp1752          #   Call between .Ltmp1752 and .Ltmp1753
	.long	.Lset462
.Lset463 = .Ltmp1754-.Leh_func_begin261 #     jumps to .Ltmp1754
	.long	.Lset463
	.byte	0                       #   On action: cleanup
.Lset464 = .Ltmp1753-.Leh_func_begin261 # >> Call Site 3 <<
	.long	.Lset464
.Lset465 = .Leh_func_end261-.Ltmp1753   #   Call between .Ltmp1753 and .Leh_func_end261
	.long	.Lset465
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1766:
	.cfi_def_cfa_offset 16
.Ltmp1767:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1768:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1769:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp1769-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv,"axG",@progbits,_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv,comdat
	.weak	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv,@function
_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv: # @_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str23, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp1770:
	.size	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv, .Ltmp1770-_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin264:
	.cfi_lsda 3, .Lexception264
# BB#0:
	pushq	%rbp
.Ltmp1776:
	.cfi_def_cfa_offset 16
.Ltmp1777:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1778:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp1771:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp1772:
	jmp	.LBB264_1
.LBB264_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB264_2:
.Ltmp1773:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp1779:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev, .Ltmp1779-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_endproc
.Leh_func_end264:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table264:
.Lexception264:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset466 = .Ltmp1771-.Leh_func_begin264 # >> Call Site 1 <<
	.long	.Lset466
.Lset467 = .Ltmp1772-.Ltmp1771          #   Call between .Ltmp1771 and .Ltmp1772
	.long	.Lset467
.Lset468 = .Ltmp1773-.Leh_func_begin264 #     jumps to .Ltmp1773
	.long	.Lset468
	.byte	0                       #   On action: cleanup
.Lset469 = .Ltmp1772-.Leh_func_begin264 # >> Call Site 2 <<
	.long	.Lset469
.Lset470 = .Leh_func_end264-.Ltmp1772   #   Call between .Ltmp1772 and .Leh_func_end264
	.long	.Lset470
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB265_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB265_3
.LBB265_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB265_3
.LBB265_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp1780:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv, .Ltmp1780-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB266_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB266_3
.LBB266_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB266_3
.LBB266_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp1781:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv, .Ltmp1781-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1784:
	.cfi_def_cfa_offset 16
.Ltmp1785:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1786:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1787:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE, .Ltmp1787-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1790:
	.cfi_def_cfa_offset 16
.Ltmp1791:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1792:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	je	.LBB268_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	movabsq	$-1, %rdx
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-64(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB268_3
.LBB268_2:
	movabsq	$0, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB268_3
.LBB268_3:
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB268_5
# BB#4:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
	jmp	.LBB268_11
.LBB268_5:
	movq	-24(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	je	.LBB268_7
# BB#6:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	movabsq	$-1, %rdx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-88(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB268_8
.LBB268_7:
	movabsq	$0, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB268_8
.LBB268_8:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB268_10
# BB#9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
	jmp	.LBB268_11
.LBB268_10:
	movl	$2, -4(%rbp)
.LBB268_11:
	movl	-4(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp1793:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE, .Ltmp1793-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1796:
	.cfi_def_cfa_offset 16
.Ltmp1797:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1798:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB269_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB269_3
.LBB269_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB269_3
.LBB269_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB269_5
# BB#4:
	jmp	.LBB269_6
.LBB269_5:
	leaq	.L.str18, %rdi
	leaq	.L.str17, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB269_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB269_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB269_12
# BB#8:                                 #   in Loop: Header=BB269_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB269_10
# BB#9:                                 #   in Loop: Header=BB269_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str19, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB269_10:                             #   in Loop: Header=BB269_7 Depth=1
	jmp	.LBB269_11
.LBB269_11:                             #   in Loop: Header=BB269_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB269_7
.LBB269_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp1799:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp1799-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1802:
	.cfi_def_cfa_offset 16
.Ltmp1803:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1804:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1805:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv, .Ltmp1805-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1808:
	.cfi_def_cfa_offset 16
.Ltmp1809:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1810:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1811:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv, .Ltmp1811-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1814:
	.cfi_def_cfa_offset 16
.Ltmp1815:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1816:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 128(%rdi)
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	je	.LBB272_9
# BB#1:
	movl	$0, -12(%rbp)
.LBB272_2:                              # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movq	128(%rcx), %rdi
	movl	%eax, -44(%rbp)         # 4-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EE4sizeEv
	movl	%eax, %edx
	movl	-44(%rbp), %esi         # 4-byte Reload
	cmpl	%edx, %esi
	jge	.LBB272_8
# BB#3:                                 #   in Loop: Header=BB272_2 Depth=1
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	128(%rax), %rdi
	movslq	-12(%rbp), %rsi
	callq	_ZNSt6vectorIPN7sc_core15sc_trace_paramsESaIS2_EEixEm
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	(%rsi), %rdi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-56(%rbp), %rax         # 8-byte Reload
	callq	*112(%rax)
	cmpq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	je	.LBB272_5
# BB#4:                                 #   in Loop: Header=BB272_2 Depth=1
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-72(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB272_6
.LBB272_5:                              #   in Loop: Header=BB272_2 Depth=1
	movabsq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB272_6
.LBB272_6:                              #   in Loop: Header=BB272_2 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	*40(%rcx)
	movq	-24(%rbp), %rcx
	addq	$8, %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	_ZN7sc_core8sc_traceEPNS_13sc_trace_fileERKN5sc_dt12sc_uint_baseERKSs
# BB#7:                                 #   in Loop: Header=BB272_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB272_2
.LBB272_8:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE13remove_tracesEv
.LBB272_9:
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp1817:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv, .Ltmp1817-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1820:
	.cfi_def_cfa_offset 16
.Ltmp1821:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1822:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB273_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB273_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB273_8
# BB#3:                                 #   in Loop: Header=BB273_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB273_5
# BB#4:                                 #   in Loop: Header=BB273_2 Depth=1
	jmp	.LBB273_6
.LBB273_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB273_6:                              #   in Loop: Header=BB273_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB273_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB273_2
.LBB273_8:
	jmp	.LBB273_10
.LBB273_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB273_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp1823:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp1823-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1826:
	.cfi_def_cfa_offset 16
.Ltmp1827:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1828:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB274_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB274_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB274_8
# BB#3:                                 #   in Loop: Header=BB274_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB274_5
# BB#4:                                 #   in Loop: Header=BB274_2 Depth=1
	jmp	.LBB274_6
.LBB274_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB274_6:                              #   in Loop: Header=BB274_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB274_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB274_2
.LBB274_8:
	jmp	.LBB274_10
.LBB274_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB274_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp1829:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp1829-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1832:
	.cfi_def_cfa_offset 16
.Ltmp1833:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1834:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	232(%rdi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	-24(%rbp), %rax         # 8-byte Reload
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1835:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE, .Ltmp1835-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1838:
	.cfi_def_cfa_offset 16
.Ltmp1839:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1840:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1841:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE, .Ltmp1841-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1844:
	.cfi_def_cfa_offset 16
.Ltmp1845:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1846:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1847:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE, .Ltmp1847-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1850:
	.cfi_def_cfa_offset 16
.Ltmp1851:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1852:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1853:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE, .Ltmp1853-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1856:
	.cfi_def_cfa_offset 16
.Ltmp1857:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1858:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1859:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE, .Ltmp1859-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp1860:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv, .Ltmp1860-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp1861:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm, .Ltmp1861-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp1862:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm, .Ltmp1862-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1865:
	.cfi_def_cfa_offset 16
.Ltmp1866:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1867:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB283_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB283_3
.LBB283_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
.LBB283_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp1868:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_, .Ltmp1868-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE9push_backERKS6_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB284_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB284_2:
	ret
.Ltmp1869:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_, .Ltmp1869-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin285:
	.cfi_lsda 3, .Lexception285
# BB#0:
	pushq	%rbp
.Ltmp1901:
	.cfi_def_cfa_offset 16
.Ltmp1902:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1903:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB285_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB285_22
.LBB285_2:
	movl	$1, %esi
	movl	$.L.str20, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp1870:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE9constructEPS7_RKS7_
.Ltmp1871:
	jmp	.LBB285_3
.LBB285_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp1872:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp1873:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB285_4
.LBB285_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp1874:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp1875:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB285_5
.LBB285_5:
.Ltmp1876:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp1877:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB285_6
.LBB285_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp1878:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
.Ltmp1879:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB285_7
.LBB285_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp1880:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp1881:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB285_8
.LBB285_8:
.Ltmp1882:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
.Ltmp1883:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB285_9
.LBB285_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB285_21
.LBB285_10:
.Ltmp1884:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB285_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp1885:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
.Ltmp1886:
	jmp	.LBB285_13
.LBB285_13:
	jmp	.LBB285_18
.LBB285_14:
.Ltmp1895:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp1896:
	callq	__cxa_end_catch
.Ltmp1897:
	jmp	.LBB285_20
.LBB285_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp1887:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp1888:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB285_16
.LBB285_16:
.Ltmp1889:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
.Ltmp1890:
	jmp	.LBB285_17
.LBB285_17:
	jmp	.LBB285_18
.LBB285_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp1891:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp1892:
	jmp	.LBB285_19
.LBB285_19:
.Ltmp1893:
	callq	__cxa_rethrow
.Ltmp1894:
	jmp	.LBB285_25
.LBB285_20:
	jmp	.LBB285_23
.LBB285_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB285_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB285_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB285_24:
.Ltmp1898:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB285_25:
.Ltmp1904:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_, .Ltmp1904-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS6_S8_EERKS6_
	.cfi_endproc
.Leh_func_end285:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table285:
.Lexception285:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset471 = .Leh_func_begin285-.Leh_func_begin285 # >> Call Site 1 <<
	.long	.Lset471
.Lset472 = .Ltmp1870-.Leh_func_begin285 #   Call between .Leh_func_begin285 and .Ltmp1870
	.long	.Lset472
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset473 = .Ltmp1870-.Leh_func_begin285 # >> Call Site 2 <<
	.long	.Lset473
.Lset474 = .Ltmp1883-.Ltmp1870          #   Call between .Ltmp1870 and .Ltmp1883
	.long	.Lset474
.Lset475 = .Ltmp1884-.Leh_func_begin285 #     jumps to .Ltmp1884
	.long	.Lset475
	.byte	1                       #   On action: 1
.Lset476 = .Ltmp1883-.Leh_func_begin285 # >> Call Site 3 <<
	.long	.Lset476
.Lset477 = .Ltmp1885-.Ltmp1883          #   Call between .Ltmp1883 and .Ltmp1885
	.long	.Lset477
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset478 = .Ltmp1885-.Leh_func_begin285 # >> Call Site 4 <<
	.long	.Lset478
.Lset479 = .Ltmp1886-.Ltmp1885          #   Call between .Ltmp1885 and .Ltmp1886
	.long	.Lset479
.Lset480 = .Ltmp1895-.Leh_func_begin285 #     jumps to .Ltmp1895
	.long	.Lset480
	.byte	0                       #   On action: cleanup
.Lset481 = .Ltmp1896-.Leh_func_begin285 # >> Call Site 5 <<
	.long	.Lset481
.Lset482 = .Ltmp1897-.Ltmp1896          #   Call between .Ltmp1896 and .Ltmp1897
	.long	.Lset482
.Lset483 = .Ltmp1898-.Leh_func_begin285 #     jumps to .Ltmp1898
	.long	.Lset483
	.byte	1                       #   On action: 1
.Lset484 = .Ltmp1887-.Leh_func_begin285 # >> Call Site 6 <<
	.long	.Lset484
.Lset485 = .Ltmp1894-.Ltmp1887          #   Call between .Ltmp1887 and .Ltmp1894
	.long	.Lset485
.Lset486 = .Ltmp1895-.Leh_func_begin285 #     jumps to .Ltmp1895
	.long	.Lset486
	.byte	0                       #   On action: cleanup
.Lset487 = .Ltmp1894-.Leh_func_begin285 # >> Call Site 7 <<
	.long	.Lset487
.Lset488 = .Leh_func_end285-.Ltmp1894   #   Call between .Ltmp1894 and .Leh_func_end285
	.long	.Lset488
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1907:
	.cfi_def_cfa_offset 16
.Ltmp1908:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1909:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1910:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv, .Ltmp1910-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1913:
	.cfi_def_cfa_offset 16
.Ltmp1914:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1915:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1916:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_, .Ltmp1916-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp1917:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_, .Ltmp1917-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC2ERKS8_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1920:
	.cfi_def_cfa_offset 16
.Ltmp1921:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1922:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1923:
	.size	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp1923-_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp1924:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv, .Ltmp1924-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp1925:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv, .Ltmp1925-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1928:
	.cfi_def_cfa_offset 16
.Ltmp1929:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1930:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB292_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB292_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB292_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB292_5
.LBB292_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB292_6
.LBB292_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB292_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp1931:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc, .Ltmp1931-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_,@function
_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_: # @_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1934:
	.cfi_def_cfa_offset 16
.Ltmp1935:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1936:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1937:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_, .Ltmp1937-_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSF_SI_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1940:
	.cfi_def_cfa_offset 16
.Ltmp1941:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1942:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESt6vectorIS7_SaIS7_EEEC1ERKS8_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1943:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv, .Ltmp1943-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1946:
	.cfi_def_cfa_offset 16
.Ltmp1947:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1948:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB295_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB295_3
.LBB295_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB295_3
.LBB295_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1949:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm, .Ltmp1949-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1952:
	.cfi_def_cfa_offset 16
.Ltmp1953:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1954:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1955:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_, .Ltmp1955-_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_SaIS6_EET0_T_SA_S9_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp1956:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp1956-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1957:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_, .Ltmp1957-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE7destroyEPS7_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1960:
	.cfi_def_cfa_offset 16
.Ltmp1961:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1962:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1963:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E, .Ltmp1963-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1966:
	.cfi_def_cfa_offset 16
.Ltmp1967:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1968:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB300_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
.LBB300_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1969:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m, .Ltmp1969-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1972:
	.cfi_def_cfa_offset 16
.Ltmp1973:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1974:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1975:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m, .Ltmp1975-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE10deallocateEPS7_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1978:
	.cfi_def_cfa_offset 16
.Ltmp1979:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1980:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp1981:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_, .Ltmp1981-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEvT_S8_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp1982:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_, .Ltmp1982-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEvT_SA_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1985:
	.cfi_def_cfa_offset 16
.Ltmp1986:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1987:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1988:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E, .Ltmp1988-_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_S6_ET0_T_S9_S8_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1991:
	.cfi_def_cfa_offset 16
.Ltmp1992:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1993:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp1994:
	.size	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp1994-_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1997:
	.cfi_def_cfa_offset 16
.Ltmp1998:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1999:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2000:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_, .Ltmp2000-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES9_EET0_T_SB_SA_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,"axG",@progbits,_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,comdat
	.weak	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_,@function
_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_: # @_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2003:
	.cfi_def_cfa_offset 16
.Ltmp2004:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2005:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2006:
	.size	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_, .Ltmp2006-_ZSt4copyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET0_T_S9_S8_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2009:
	.cfi_def_cfa_offset 16
.Ltmp2010:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2011:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2012:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp2012-_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_,@function
_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_: # @_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2015:
	.cfi_def_cfa_offset 16
.Ltmp2016:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2017:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2018:
	.size	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_, .Ltmp2018-_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Miter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_,@function
_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_: # @_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp2019:
	.size	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_, .Ltmp2019-_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2022:
	.cfi_def_cfa_offset 16
.Ltmp2023:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2024:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2025:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp2025-_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_,@function
_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_: # @_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2028:
	.cfi_def_cfa_offset 16
.Ltmp2029:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2030:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELb0EE7_S_baseES7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2031:
	.size	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_, .Ltmp2031-_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2034:
	.cfi_def_cfa_offset 16
.Ltmp2035:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2036:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB313_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB313_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2037:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_, .Ltmp2037-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2040:
	.cfi_def_cfa_offset 16
.Ltmp2041:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2042:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB314_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB314_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2043:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv, .Ltmp2043-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2044:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv, .Ltmp2044-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2047:
	.cfi_def_cfa_offset 16
.Ltmp2048:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2049:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2050:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv, .Ltmp2050-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp2051:
	.size	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv, .Ltmp2051-_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2054:
	.cfi_def_cfa_offset 16
.Ltmp2055:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2056:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEENSt11_Niter_baseIT_E13iterator_typeES9_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2057:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp2057-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2060:
	.cfi_def_cfa_offset 16
.Ltmp2061:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2062:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2063:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_, .Ltmp2063-_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES7_ET1_T0_S9_S8_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2066:
	.cfi_def_cfa_offset 16
.Ltmp2067:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2068:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB320_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB320_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2069:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_, .Ltmp2069-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEEPT_PKSA_SD_SB_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2072:
	.cfi_def_cfa_offset 16
.Ltmp2073:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2074:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB321_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB321_3
.LBB321_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB321_3
.LBB321_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB321_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB321_6
.LBB321_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB321_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2075:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE, .Ltmp2075-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin322:
	.cfi_lsda 3, .Lexception322
# BB#0:
	pushq	%rbp
.Ltmp2084:
	.cfi_def_cfa_offset 16
.Ltmp2085:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2086:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp2076:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
.Ltmp2077:
	jmp	.LBB322_1
.LBB322_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB322_2:
.Ltmp2078:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2079:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp2080:
	jmp	.LBB322_3
.LBB322_3:
	jmp	.LBB322_4
.LBB322_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB322_5:
.Ltmp2081:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2087:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp2087-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc
.Leh_func_end322:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table322:
.Lexception322:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset489 = .Ltmp2076-.Leh_func_begin322 # >> Call Site 1 <<
	.long	.Lset489
.Lset490 = .Ltmp2077-.Ltmp2076          #   Call between .Ltmp2076 and .Ltmp2077
	.long	.Lset490
.Lset491 = .Ltmp2078-.Leh_func_begin322 #     jumps to .Ltmp2078
	.long	.Lset491
	.byte	0                       #   On action: cleanup
.Lset492 = .Ltmp2077-.Leh_func_begin322 # >> Call Site 2 <<
	.long	.Lset492
.Lset493 = .Ltmp2079-.Ltmp2077          #   Call between .Ltmp2077 and .Ltmp2079
	.long	.Lset493
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset494 = .Ltmp2079-.Leh_func_begin322 # >> Call Site 3 <<
	.long	.Lset494
.Lset495 = .Ltmp2080-.Ltmp2079          #   Call between .Ltmp2079 and .Ltmp2080
	.long	.Lset495
.Lset496 = .Ltmp2081-.Leh_func_begin322 #     jumps to .Ltmp2081
	.long	.Lset496
	.byte	1                       #   On action: 1
.Lset497 = .Ltmp2080-.Leh_func_begin322 # >> Call Site 4 <<
	.long	.Lset497
.Lset498 = .Leh_func_end322-.Ltmp2080   #   Call between .Ltmp2080 and .Leh_func_end322
	.long	.Lset498
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2090:
	.cfi_def_cfa_offset 16
.Ltmp2091:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2092:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2093:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev, .Ltmp2093-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2096:
	.cfi_def_cfa_offset 16
.Ltmp2097:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2098:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2099:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev, .Ltmp2099-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin325:
	.cfi_lsda 3, .Lexception325
# BB#0:
	pushq	%rbp
.Ltmp2105:
	.cfi_def_cfa_offset 16
.Ltmp2106:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2107:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2100:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
.Ltmp2101:
	jmp	.LBB325_1
.LBB325_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB325_2:
.Ltmp2102:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2108:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev, .Ltmp2108-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.cfi_endproc
.Leh_func_end325:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table325:
.Lexception325:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset499 = .Ltmp2100-.Leh_func_begin325 # >> Call Site 1 <<
	.long	.Lset499
.Lset500 = .Ltmp2101-.Ltmp2100          #   Call between .Ltmp2100 and .Ltmp2101
	.long	.Lset500
.Lset501 = .Ltmp2102-.Leh_func_begin325 #     jumps to .Ltmp2102
	.long	.Lset501
	.byte	0                       #   On action: cleanup
.Lset502 = .Ltmp2101-.Leh_func_begin325 # >> Call Site 2 <<
	.long	.Lset502
.Lset503 = .Leh_func_end325-.Ltmp2101   #   Call between .Ltmp2101 and .Leh_func_end325
	.long	.Lset503
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2111:
	.cfi_def_cfa_offset 16
.Ltmp2112:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2113:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB326_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB326_3
.LBB326_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB326_3
.LBB326_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB326_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB326_6
.LBB326_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB326_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2114:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE, .Ltmp2114-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2117:
	.cfi_def_cfa_offset 16
.Ltmp2118:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2119:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2120:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_, .Ltmp2120-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2123:
	.cfi_def_cfa_offset 16
.Ltmp2124:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2125:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2126:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_, .Ltmp2126-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin329:
	.cfi_lsda 3, .Lexception329
# BB#0:
	pushq	%rbp
.Ltmp2137:
	.cfi_def_cfa_offset 16
.Ltmp2138:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2139:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp2127:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE19_M_get_Tp_allocatorEv
.Ltmp2128:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB329_1
.LBB329_1:
.Ltmp2129:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEES6_EvT_S8_RSaIT0_E
.Ltmp2130:
	jmp	.LBB329_2
.LBB329_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB329_3:
.Ltmp2131:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2132:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
.Ltmp2133:
	jmp	.LBB329_4
.LBB329_4:
	jmp	.LBB329_5
.LBB329_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB329_6:
.Ltmp2134:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2140:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev, .Ltmp2140-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end329:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table329:
.Lexception329:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset504 = .Ltmp2127-.Leh_func_begin329 # >> Call Site 1 <<
	.long	.Lset504
.Lset505 = .Ltmp2130-.Ltmp2127          #   Call between .Ltmp2127 and .Ltmp2130
	.long	.Lset505
.Lset506 = .Ltmp2131-.Leh_func_begin329 #     jumps to .Ltmp2131
	.long	.Lset506
	.byte	0                       #   On action: cleanup
.Lset507 = .Ltmp2130-.Leh_func_begin329 # >> Call Site 2 <<
	.long	.Lset507
.Lset508 = .Ltmp2132-.Ltmp2130          #   Call between .Ltmp2130 and .Ltmp2132
	.long	.Lset508
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset509 = .Ltmp2132-.Leh_func_begin329 # >> Call Site 3 <<
	.long	.Lset509
.Lset510 = .Ltmp2133-.Ltmp2132          #   Call between .Ltmp2132 and .Ltmp2133
	.long	.Lset510
.Lset511 = .Ltmp2134-.Leh_func_begin329 #     jumps to .Ltmp2134
	.long	.Lset511
	.byte	1                       #   On action: 1
.Lset512 = .Ltmp2133-.Leh_func_begin329 # >> Call Site 4 <<
	.long	.Lset512
.Lset513 = .Leh_func_end329-.Ltmp2133   #   Call between .Ltmp2133 and .Leh_func_end329
	.long	.Lset513
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin330:
	.cfi_lsda 3, .Lexception330
# BB#0:
	pushq	%rbp
.Ltmp2146:
	.cfi_def_cfa_offset 16
.Ltmp2147:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2148:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp2141:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE13_M_deallocateEPS6_m
.Ltmp2142:
	jmp	.LBB330_1
.LBB330_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB330_2:
.Ltmp2143:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2149:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev, .Ltmp2149-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EED2Ev
	.cfi_endproc
.Leh_func_end330:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table330:
.Lexception330:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset514 = .Ltmp2141-.Leh_func_begin330 # >> Call Site 1 <<
	.long	.Lset514
.Lset515 = .Ltmp2142-.Ltmp2141          #   Call between .Ltmp2141 and .Ltmp2142
	.long	.Lset515
.Lset516 = .Ltmp2143-.Leh_func_begin330 #     jumps to .Ltmp2143
	.long	.Lset516
	.byte	0                       #   On action: cleanup
.Lset517 = .Ltmp2142-.Leh_func_begin330 # >> Call Site 2 <<
	.long	.Lset517
.Lset518 = .Leh_func_end330-.Ltmp2142   #   Call between .Ltmp2142 and .Leh_func_end330
	.long	.Lset518
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2152:
	.cfi_def_cfa_offset 16
.Ltmp2153:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2154:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2155:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev, .Ltmp2155-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2158:
	.cfi_def_cfa_offset 16
.Ltmp2159:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2160:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2161:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev, .Ltmp2161-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2164:
	.cfi_def_cfa_offset 16
.Ltmp2165:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2166:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2167:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp2167-_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2168:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev, .Ltmp2168-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EEC2Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EEC2Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EEC2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EEC2Ev,@function
_ZN5sc_dt7sc_uintILi1EEC2Ev:            # @_ZN5sc_dt7sc_uintILi1EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2171:
	.cfi_def_cfa_offset 16
.Ltmp2172:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2173:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN5sc_dt12sc_uint_baseC2Ei
	leaq	_ZTVN5sc_dt7sc_uintILi1EEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2174:
	.size	_ZN5sc_dt7sc_uintILi1EEC2Ev, .Ltmp2174-_ZN5sc_dt7sc_uintILi1EEC2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EED0Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EED0Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EED0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EED0Ev,@function
_ZN5sc_dt7sc_uintILi1EED0Ev:            # @_ZN5sc_dt7sc_uintILi1EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin336:
	.cfi_lsda 3, .Lexception336
# BB#0:
	pushq	%rbp
.Ltmp2180:
	.cfi_def_cfa_offset 16
.Ltmp2181:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2182:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2175:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi1EED1Ev
.Ltmp2176:
	jmp	.LBB336_1
.LBB336_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB336_2:
.Ltmp2177:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2183:
	.size	_ZN5sc_dt7sc_uintILi1EED0Ev, .Ltmp2183-_ZN5sc_dt7sc_uintILi1EED0Ev
	.cfi_endproc
.Leh_func_end336:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table336:
.Lexception336:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset519 = .Ltmp2175-.Leh_func_begin336 # >> Call Site 1 <<
	.long	.Lset519
.Lset520 = .Ltmp2176-.Ltmp2175          #   Call between .Ltmp2175 and .Ltmp2176
	.long	.Lset520
.Lset521 = .Ltmp2177-.Leh_func_begin336 #     jumps to .Ltmp2177
	.long	.Lset521
	.byte	0                       #   On action: cleanup
.Lset522 = .Ltmp2176-.Leh_func_begin336 # >> Call Site 2 <<
	.long	.Lset522
.Lset523 = .Leh_func_end336-.Ltmp2176   #   Call between .Ltmp2176 and .Leh_func_end336
	.long	.Lset523
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core6sc_outIbEC2Ev,"axG",@progbits,_ZN7sc_core6sc_outIbEC2Ev,comdat
	.weak	_ZN7sc_core6sc_outIbEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbEC2Ev,@function
_ZN7sc_core6sc_outIbEC2Ev:              # @_ZN7sc_core6sc_outIbEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2186:
	.cfi_def_cfa_offset 16
.Ltmp2187:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2188:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIbEC2Ev
	leaq	_ZTVN7sc_core6sc_outIbEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2189:
	.size	_ZN7sc_core6sc_outIbEC2Ev, .Ltmp2189-_ZN7sc_core6sc_outIbEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIbEC2Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIbEC2Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIbEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIbEC2Ev,@function
_ZN7sc_core8sc_inoutIbEC2Ev:            # @_ZN7sc_core8sc_inoutIbEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2192:
	.cfi_def_cfa_offset 16
.Ltmp2193:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2194:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core8sc_inoutIbEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	movq	$0, 144(%rdi)
	movq	$0, 152(%rdi)
	movq	$0, 160(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2195:
	.size	_ZN7sc_core8sc_inoutIbEC2Ev, .Ltmp2195-_ZN7sc_core8sc_inoutIbEC2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core6sc_outIbE4kindEv,"axG",@progbits,_ZNK7sc_core6sc_outIbE4kindEv,comdat
	.weak	_ZNK7sc_core6sc_outIbE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core6sc_outIbE4kindEv,@function
_ZNK7sc_core6sc_outIbE4kindEv:          # @_ZNK7sc_core6sc_outIbE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str24, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2196:
	.size	_ZNK7sc_core6sc_outIbE4kindEv, .Ltmp2196-_ZNK7sc_core6sc_outIbE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIbED0Ev,"axG",@progbits,_ZN7sc_core6sc_outIbED0Ev,comdat
	.weak	_ZN7sc_core6sc_outIbED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIbED0Ev,@function
_ZN7sc_core6sc_outIbED0Ev:              # @_ZN7sc_core6sc_outIbED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin340:
	.cfi_lsda 3, .Lexception340
# BB#0:
	pushq	%rbp
.Ltmp2202:
	.cfi_def_cfa_offset 16
.Ltmp2203:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2204:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2197:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core6sc_outIbED1Ev
.Ltmp2198:
	jmp	.LBB340_1
.LBB340_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB340_2:
.Ltmp2199:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2205:
	.size	_ZN7sc_core6sc_outIbED0Ev, .Ltmp2205-_ZN7sc_core6sc_outIbED0Ev
	.cfi_endproc
.Leh_func_end340:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table340:
.Lexception340:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset524 = .Ltmp2197-.Leh_func_begin340 # >> Call Site 1 <<
	.long	.Lset524
.Lset525 = .Ltmp2198-.Ltmp2197          #   Call between .Ltmp2197 and .Ltmp2198
	.long	.Lset525
.Lset526 = .Ltmp2199-.Leh_func_begin340 #     jumps to .Ltmp2199
	.long	.Lset526
	.byte	0                       #   On action: cleanup
.Lset527 = .Ltmp2198-.Leh_func_begin340 # >> Call Site 2 <<
	.long	.Lset527
.Lset528 = .Leh_func_end340-.Ltmp2198   #   Call between .Ltmp2198 and .Leh_func_end340
	.long	.Lset528
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB341_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB341_3
.LBB341_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB341_3
.LBB341_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp2206:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv, .Ltmp2206-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB342_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB342_3
.LBB342_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB342_3
.LBB342_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp2207:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv, .Ltmp2207-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2210:
	.cfi_def_cfa_offset 16
.Ltmp2211:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2212:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB343_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB343_3
.LBB343_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB343_3
.LBB343_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB343_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB343_6
.LBB343_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB343_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2213:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE, .Ltmp2213-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2216:
	.cfi_def_cfa_offset 16
.Ltmp2217:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2218:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB344_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB344_3
.LBB344_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB344_3
.LBB344_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB344_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB344_6
.LBB344_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB344_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2219:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE, .Ltmp2219-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2222:
	.cfi_def_cfa_offset 16
.Ltmp2223:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2224:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB345_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB345_3
.LBB345_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB345_3
.LBB345_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB345_5
# BB#4:
	jmp	.LBB345_6
.LBB345_5:
	leaq	.L.str18, %rdi
	leaq	.L.str17, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB345_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB345_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB345_12
# BB#8:                                 #   in Loop: Header=BB345_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB345_10
# BB#9:                                 #   in Loop: Header=BB345_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str19, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB345_10:                             #   in Loop: Header=BB345_7 Depth=1
	jmp	.LBB345_11
.LBB345_11:                             #   in Loop: Header=BB345_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB345_7
.LBB345_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp2225:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp2225-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2228:
	.cfi_def_cfa_offset 16
.Ltmp2229:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2230:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2231:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv, .Ltmp2231-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2234:
	.cfi_def_cfa_offset 16
.Ltmp2235:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2236:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core18sc_signal_inout_ifIbEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2237:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv, .Ltmp2237-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2240:
	.cfi_def_cfa_offset 16
.Ltmp2241:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2242:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB348_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB348_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB348_8
# BB#3:                                 #   in Loop: Header=BB348_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB348_5
# BB#4:                                 #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_6
.LBB348_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB348_6:                              #   in Loop: Header=BB348_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB348_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB348_2
.LBB348_8:
	jmp	.LBB348_10
.LBB348_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB348_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2243:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp2243-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2246:
	.cfi_def_cfa_offset 16
.Ltmp2247:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2248:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB349_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB349_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB349_8
# BB#3:                                 #   in Loop: Header=BB349_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB349_5
# BB#4:                                 #   in Loop: Header=BB349_2 Depth=1
	jmp	.LBB349_6
.LBB349_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB349_6:                              #   in Loop: Header=BB349_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB349_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB349_2
.LBB349_8:
	jmp	.LBB349_10
.LBB349_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB349_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2249:
	.size	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp2249-_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2252:
	.cfi_def_cfa_offset 16
.Ltmp2253:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2254:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2255:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_, .Ltmp2255-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2258:
	.cfi_def_cfa_offset 16
.Ltmp2259:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2260:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2261:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_, .Ltmp2261-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp2262:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv, .Ltmp2262-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp2263:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm, .Ltmp2263-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp2264:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm, .Ltmp2264-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2267:
	.cfi_def_cfa_offset 16
.Ltmp2268:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2269:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB355_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB355_3
.LBB355_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
.LBB355_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2270:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_, .Ltmp2270-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE9push_backERKS3_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB356_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB356_2:
	ret
.Ltmp2271:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_, .Ltmp2271-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin357:
	.cfi_lsda 3, .Lexception357
# BB#0:
	pushq	%rbp
.Ltmp2303:
	.cfi_def_cfa_offset 16
.Ltmp2304:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2305:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB357_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB357_22
.LBB357_2:
	movl	$1, %esi
	movl	$.L.str20, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp2272:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE9constructEPS4_RKS4_
.Ltmp2273:
	jmp	.LBB357_3
.LBB357_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp2274:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
.Ltmp2275:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB357_4
.LBB357_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp2276:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp2277:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB357_5
.LBB357_5:
.Ltmp2278:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
.Ltmp2279:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB357_6
.LBB357_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp2280:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
.Ltmp2281:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB357_7
.LBB357_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp2282:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp2283:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB357_8
.LBB357_8:
.Ltmp2284:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
.Ltmp2285:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB357_9
.LBB357_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB357_21
.LBB357_10:
.Ltmp2286:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB357_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp2287:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_
.Ltmp2288:
	jmp	.LBB357_13
.LBB357_13:
	jmp	.LBB357_18
.LBB357_14:
.Ltmp2297:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp2298:
	callq	__cxa_end_catch
.Ltmp2299:
	jmp	.LBB357_20
.LBB357_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp2289:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp2290:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB357_16
.LBB357_16:
.Ltmp2291:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
.Ltmp2292:
	jmp	.LBB357_17
.LBB357_17:
	jmp	.LBB357_18
.LBB357_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp2293:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
.Ltmp2294:
	jmp	.LBB357_19
.LBB357_19:
.Ltmp2295:
	callq	__cxa_rethrow
.Ltmp2296:
	jmp	.LBB357_25
.LBB357_20:
	jmp	.LBB357_23
.LBB357_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB357_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB357_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB357_24:
.Ltmp2300:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB357_25:
.Ltmp2306:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_, .Ltmp2306-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.cfi_endproc
.Leh_func_end357:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table357:
.Lexception357:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset529 = .Leh_func_begin357-.Leh_func_begin357 # >> Call Site 1 <<
	.long	.Lset529
.Lset530 = .Ltmp2272-.Leh_func_begin357 #   Call between .Leh_func_begin357 and .Ltmp2272
	.long	.Lset530
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset531 = .Ltmp2272-.Leh_func_begin357 # >> Call Site 2 <<
	.long	.Lset531
.Lset532 = .Ltmp2285-.Ltmp2272          #   Call between .Ltmp2272 and .Ltmp2285
	.long	.Lset532
.Lset533 = .Ltmp2286-.Leh_func_begin357 #     jumps to .Ltmp2286
	.long	.Lset533
	.byte	1                       #   On action: 1
.Lset534 = .Ltmp2285-.Leh_func_begin357 # >> Call Site 3 <<
	.long	.Lset534
.Lset535 = .Ltmp2287-.Ltmp2285          #   Call between .Ltmp2285 and .Ltmp2287
	.long	.Lset535
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset536 = .Ltmp2287-.Leh_func_begin357 # >> Call Site 4 <<
	.long	.Lset536
.Lset537 = .Ltmp2288-.Ltmp2287          #   Call between .Ltmp2287 and .Ltmp2288
	.long	.Lset537
.Lset538 = .Ltmp2297-.Leh_func_begin357 #     jumps to .Ltmp2297
	.long	.Lset538
	.byte	0                       #   On action: cleanup
.Lset539 = .Ltmp2298-.Leh_func_begin357 # >> Call Site 5 <<
	.long	.Lset539
.Lset540 = .Ltmp2299-.Ltmp2298          #   Call between .Ltmp2298 and .Ltmp2299
	.long	.Lset540
.Lset541 = .Ltmp2300-.Leh_func_begin357 #     jumps to .Ltmp2300
	.long	.Lset541
	.byte	1                       #   On action: 1
.Lset542 = .Ltmp2289-.Leh_func_begin357 # >> Call Site 6 <<
	.long	.Lset542
.Lset543 = .Ltmp2296-.Ltmp2289          #   Call between .Ltmp2289 and .Ltmp2296
	.long	.Lset543
.Lset544 = .Ltmp2297-.Leh_func_begin357 #     jumps to .Ltmp2297
	.long	.Lset544
	.byte	0                       #   On action: cleanup
.Lset545 = .Ltmp2296-.Leh_func_begin357 # >> Call Site 7 <<
	.long	.Lset545
.Lset546 = .Leh_func_end357-.Ltmp2296   #   Call between .Ltmp2296 and .Leh_func_end357
	.long	.Lset546
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2309:
	.cfi_def_cfa_offset 16
.Ltmp2310:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2311:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2312:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv, .Ltmp2312-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2315:
	.cfi_def_cfa_offset 16
.Ltmp2316:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2317:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2318:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_, .Ltmp2318-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp2319:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_, .Ltmp2319-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_: # @_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2322:
	.cfi_def_cfa_offset 16
.Ltmp2323:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2324:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2325:
	.size	_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_, .Ltmp2325-_ZSt13copy_backwardIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp2326:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv, .Ltmp2326-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp2327:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv, .Ltmp2327-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2330:
	.cfi_def_cfa_offset 16
.Ltmp2331:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2332:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB364_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB364_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB364_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB364_5
.LBB364_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB364_6
.LBB364_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB364_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp2333:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc, .Ltmp2333-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,@function
_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_: # @_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2336:
	.cfi_def_cfa_offset 16
.Ltmp2337:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2338:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2339:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_, .Ltmp2339-_ZN9__gnu_cxxmiIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2342:
	.cfi_def_cfa_offset 16
.Ltmp2343:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2344:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core18sc_signal_inout_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2345:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv, .Ltmp2345-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2348:
	.cfi_def_cfa_offset 16
.Ltmp2349:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2350:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB367_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB367_3
.LBB367_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB367_3
.LBB367_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2351:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm, .Ltmp2351-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2354:
	.cfi_def_cfa_offset 16
.Ltmp2355:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2356:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2357:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_, .Ltmp2357-_ZSt22__uninitialized_move_aIPPN7sc_core18sc_signal_inout_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp2358:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv, .Ltmp2358-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp2359:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_, .Ltmp2359-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE7destroyEPS4_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2362:
	.cfi_def_cfa_offset 16
.Ltmp2363:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2364:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2365:
	.size	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E, .Ltmp2365-_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2368:
	.cfi_def_cfa_offset 16
.Ltmp2369:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2370:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB372_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m
.LBB372_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2371:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m, .Ltmp2371-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2374:
	.cfi_def_cfa_offset 16
.Ltmp2375:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2376:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2377:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m, .Ltmp2377-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE10deallocateEPS4_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_,@function
_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_: # @_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2380:
	.cfi_def_cfa_offset 16
.Ltmp2381:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2382:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2383:
	.size	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_, .Ltmp2383-_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEEEvT_S5_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp2384:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_, .Ltmp2384-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core18sc_signal_inout_ifIbEEEEvT_S7_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2387:
	.cfi_def_cfa_offset 16
.Ltmp2388:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2389:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2390:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E, .Ltmp2390-_ZSt22__uninitialized_copy_aIPPN7sc_core18sc_signal_inout_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_: # @_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2393:
	.cfi_def_cfa_offset 16
.Ltmp2394:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2395:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2396:
	.size	_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_, .Ltmp2396-_ZSt18uninitialized_copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2399:
	.cfi_def_cfa_offset 16
.Ltmp2400:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2401:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2402:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_, .Ltmp2402-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core18sc_signal_inout_ifIbEES6_EET0_T_S8_S7_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_: # @_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2405:
	.cfi_def_cfa_offset 16
.Ltmp2406:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2407:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2408:
	.size	_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_, .Ltmp2408-_ZSt4copyIPPN7sc_core18sc_signal_inout_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2411:
	.cfi_def_cfa_offset 16
.Ltmp2412:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2413:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2414:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_, .Ltmp2414-_ZSt14__copy_move_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,@function
_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_: # @_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2417:
	.cfi_def_cfa_offset 16
.Ltmp2418:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2419:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2420:
	.size	_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_, .Ltmp2420-_ZSt12__miter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_,@function
_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_: # @_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp2421:
	.size	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_, .Ltmp2421-_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2424:
	.cfi_def_cfa_offset 16
.Ltmp2425:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2426:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2427:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_, .Ltmp2427-_ZSt13__copy_move_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,@function
_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_: # @_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2430:
	.cfi_def_cfa_offset 16
.Ltmp2431:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2432:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core18sc_signal_inout_ifIbEELb0EE7_S_baseES4_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2433:
	.size	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_, .Ltmp2433-_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2436:
	.cfi_def_cfa_offset 16
.Ltmp2437:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2438:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB385_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB385_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2439:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_, .Ltmp2439-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2442:
	.cfi_def_cfa_offset 16
.Ltmp2443:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2444:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB386_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB386_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2445:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv, .Ltmp2445-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2446:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv, .Ltmp2446-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2449:
	.cfi_def_cfa_offset 16
.Ltmp2450:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2451:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2452:
	.size	_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv, .Ltmp2452-_ZNKSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp2453:
	.size	_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv, .Ltmp2453-_ZNKSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2456:
	.cfi_def_cfa_offset 16
.Ltmp2457:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2458:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core18sc_signal_inout_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp2459:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_, .Ltmp2459-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2462:
	.cfi_def_cfa_offset 16
.Ltmp2463:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2464:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2465:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_, .Ltmp2465-_ZSt22__copy_move_backward_aILb0EPPN7sc_core18sc_signal_inout_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2468:
	.cfi_def_cfa_offset 16
.Ltmp2469:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2470:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB392_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB392_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2471:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_, .Ltmp2471-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core18sc_signal_inout_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2474:
	.cfi_def_cfa_offset 16
.Ltmp2475:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2476:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2477:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp2477-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin394:
	.cfi_lsda 3, .Lexception394
# BB#0:
	pushq	%rbp
.Ltmp2486:
	.cfi_def_cfa_offset 16
.Ltmp2487:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2488:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp2478:
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev
.Ltmp2479:
	jmp	.LBB394_1
.LBB394_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB394_2:
.Ltmp2480:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp2481:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp2482:
	jmp	.LBB394_3
.LBB394_3:
	jmp	.LBB394_4
.LBB394_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB394_5:
.Ltmp2483:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2489:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE, .Ltmp2489-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end394:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table394:
.Lexception394:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset547 = .Leh_func_begin394-.Leh_func_begin394 # >> Call Site 1 <<
	.long	.Lset547
.Lset548 = .Ltmp2478-.Leh_func_begin394 #   Call between .Leh_func_begin394 and .Ltmp2478
	.long	.Lset548
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset549 = .Ltmp2478-.Leh_func_begin394 # >> Call Site 2 <<
	.long	.Lset549
.Lset550 = .Ltmp2479-.Ltmp2478          #   Call between .Ltmp2478 and .Ltmp2479
	.long	.Lset550
.Lset551 = .Ltmp2480-.Leh_func_begin394 #     jumps to .Ltmp2480
	.long	.Lset551
	.byte	0                       #   On action: cleanup
.Lset552 = .Ltmp2481-.Leh_func_begin394 # >> Call Site 3 <<
	.long	.Lset552
.Lset553 = .Ltmp2482-.Ltmp2481          #   Call between .Ltmp2481 and .Ltmp2482
	.long	.Lset553
.Lset554 = .Ltmp2483-.Leh_func_begin394 #     jumps to .Ltmp2483
	.long	.Lset554
	.byte	1                       #   On action: 1
.Lset555 = .Ltmp2482-.Leh_func_begin394 # >> Call Site 4 <<
	.long	.Lset555
.Lset556 = .Leh_func_end394-.Ltmp2482   #   Call between .Ltmp2482 and .Leh_func_end394
	.long	.Lset556
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str25, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2490:
	.size	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp2490-_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2493:
	.cfi_def_cfa_offset 16
.Ltmp2494:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2495:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2496:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp2496-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin397:
	.cfi_lsda 3, .Lexception397
# BB#0:
	pushq	%rbp
.Ltmp2502:
	.cfi_def_cfa_offset 16
.Ltmp2503:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2504:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2497:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp2498:
	jmp	.LBB397_1
.LBB397_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB397_2:
.Ltmp2499:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2505:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp2505-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end397:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table397:
.Lexception397:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset557 = .Ltmp2497-.Leh_func_begin397 # >> Call Site 1 <<
	.long	.Lset557
.Lset558 = .Ltmp2498-.Ltmp2497          #   Call between .Ltmp2497 and .Ltmp2498
	.long	.Lset558
.Lset559 = .Ltmp2499-.Leh_func_begin397 #     jumps to .Ltmp2499
	.long	.Lset559
	.byte	0                       #   On action: cleanup
.Lset560 = .Ltmp2498-.Leh_func_begin397 # >> Call Site 2 <<
	.long	.Lset560
.Lset561 = .Leh_func_end397-.Ltmp2498   #   Call between .Ltmp2498 and .Leh_func_end397
	.long	.Lset561
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2508:
	.cfi_def_cfa_offset 16
.Ltmp2509:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2510:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2511:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp2511-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin399:
	.cfi_lsda 3, .Lexception399
# BB#0:
	pushq	%rbp
.Ltmp2520:
	.cfi_def_cfa_offset 16
.Ltmp2521:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2522:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp2512:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev
.Ltmp2513:
	jmp	.LBB399_1
.LBB399_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB399_2:
.Ltmp2514:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2515:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp2516:
	jmp	.LBB399_3
.LBB399_3:
	jmp	.LBB399_4
.LBB399_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB399_5:
.Ltmp2517:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2523:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev, .Ltmp2523-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	.cfi_endproc
.Leh_func_end399:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table399:
.Lexception399:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset562 = .Ltmp2512-.Leh_func_begin399 # >> Call Site 1 <<
	.long	.Lset562
.Lset563 = .Ltmp2513-.Ltmp2512          #   Call between .Ltmp2512 and .Ltmp2513
	.long	.Lset563
.Lset564 = .Ltmp2514-.Leh_func_begin399 #     jumps to .Ltmp2514
	.long	.Lset564
	.byte	0                       #   On action: cleanup
.Lset565 = .Ltmp2513-.Leh_func_begin399 # >> Call Site 2 <<
	.long	.Lset565
.Lset566 = .Ltmp2515-.Ltmp2513          #   Call between .Ltmp2513 and .Ltmp2515
	.long	.Lset566
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset567 = .Ltmp2515-.Leh_func_begin399 # >> Call Site 3 <<
	.long	.Lset567
.Lset568 = .Ltmp2516-.Ltmp2515          #   Call between .Ltmp2515 and .Ltmp2516
	.long	.Lset568
.Lset569 = .Ltmp2517-.Leh_func_begin399 #     jumps to .Ltmp2517
	.long	.Lset569
	.byte	1                       #   On action: 1
.Lset570 = .Ltmp2516-.Leh_func_begin399 # >> Call Site 4 <<
	.long	.Lset570
.Lset571 = .Leh_func_end399-.Ltmp2516   #   Call between .Ltmp2516 and .Leh_func_end399
	.long	.Lset571
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2526:
	.cfi_def_cfa_offset 16
.Ltmp2527:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2528:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2529:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev, .Ltmp2529-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2532:
	.cfi_def_cfa_offset 16
.Ltmp2533:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2534:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2535:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev, .Ltmp2535-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin402:
	.cfi_lsda 3, .Lexception402
# BB#0:
	pushq	%rbp
.Ltmp2541:
	.cfi_def_cfa_offset 16
.Ltmp2542:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2543:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2536:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
.Ltmp2537:
	jmp	.LBB402_1
.LBB402_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB402_2:
.Ltmp2538:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2544:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev, .Ltmp2544-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev
	.cfi_endproc
.Leh_func_end402:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table402:
.Lexception402:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset572 = .Ltmp2536-.Leh_func_begin402 # >> Call Site 1 <<
	.long	.Lset572
.Lset573 = .Ltmp2537-.Ltmp2536          #   Call between .Ltmp2536 and .Ltmp2537
	.long	.Lset573
.Lset574 = .Ltmp2538-.Leh_func_begin402 #     jumps to .Ltmp2538
	.long	.Lset574
	.byte	0                       #   On action: cleanup
.Lset575 = .Ltmp2537-.Leh_func_begin402 # >> Call Site 2 <<
	.long	.Lset575
.Lset576 = .Leh_func_end402-.Ltmp2537   #   Call between .Ltmp2537 and .Leh_func_end402
	.long	.Lset576
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin403:
	.cfi_lsda 3, .Lexception403
# BB#0:
	pushq	%rbp
.Ltmp2555:
	.cfi_def_cfa_offset 16
.Ltmp2556:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2557:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp2545:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp2546:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB403_1
.LBB403_1:
.Ltmp2547:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core18sc_signal_inout_ifIbEES3_EvT_S5_RSaIT0_E
.Ltmp2548:
	jmp	.LBB403_2
.LBB403_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB403_3:
.Ltmp2549:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2550:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
.Ltmp2551:
	jmp	.LBB403_4
.LBB403_4:
	jmp	.LBB403_5
.LBB403_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB403_6:
.Ltmp2552:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2558:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev, .Ltmp2558-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.cfi_endproc
.Leh_func_end403:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table403:
.Lexception403:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset577 = .Ltmp2545-.Leh_func_begin403 # >> Call Site 1 <<
	.long	.Lset577
.Lset578 = .Ltmp2548-.Ltmp2545          #   Call between .Ltmp2545 and .Ltmp2548
	.long	.Lset578
.Lset579 = .Ltmp2549-.Leh_func_begin403 #     jumps to .Ltmp2549
	.long	.Lset579
	.byte	0                       #   On action: cleanup
.Lset580 = .Ltmp2548-.Leh_func_begin403 # >> Call Site 2 <<
	.long	.Lset580
.Lset581 = .Ltmp2550-.Ltmp2548          #   Call between .Ltmp2548 and .Ltmp2550
	.long	.Lset581
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset582 = .Ltmp2550-.Leh_func_begin403 # >> Call Site 3 <<
	.long	.Lset582
.Lset583 = .Ltmp2551-.Ltmp2550          #   Call between .Ltmp2550 and .Ltmp2551
	.long	.Lset583
.Lset584 = .Ltmp2552-.Leh_func_begin403 #     jumps to .Ltmp2552
	.long	.Lset584
	.byte	1                       #   On action: 1
.Lset585 = .Ltmp2551-.Leh_func_begin403 # >> Call Site 4 <<
	.long	.Lset585
.Lset586 = .Leh_func_end403-.Ltmp2551   #   Call between .Ltmp2551 and .Leh_func_end403
	.long	.Lset586
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin404:
	.cfi_lsda 3, .Lexception404
# BB#0:
	pushq	%rbp
.Ltmp2564:
	.cfi_def_cfa_offset 16
.Ltmp2565:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2566:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp2559:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE13_M_deallocateEPS3_m
.Ltmp2560:
	jmp	.LBB404_1
.LBB404_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB404_2:
.Ltmp2561:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2567:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev, .Ltmp2567-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EED2Ev
	.cfi_endproc
.Leh_func_end404:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table404:
.Lexception404:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset587 = .Ltmp2559-.Leh_func_begin404 # >> Call Site 1 <<
	.long	.Lset587
.Lset588 = .Ltmp2560-.Ltmp2559          #   Call between .Ltmp2559 and .Ltmp2560
	.long	.Lset588
.Lset589 = .Ltmp2561-.Leh_func_begin404 #     jumps to .Ltmp2561
	.long	.Lset589
	.byte	0                       #   On action: cleanup
.Lset590 = .Ltmp2560-.Leh_func_begin404 # >> Call Site 2 <<
	.long	.Lset590
.Lset591 = .Leh_func_end404-.Ltmp2560   #   Call between .Ltmp2560 and .Leh_func_end404
	.long	.Lset591
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2570:
	.cfi_def_cfa_offset 16
.Ltmp2571:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2572:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2573:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev, .Ltmp2573-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2576:
	.cfi_def_cfa_offset 16
.Ltmp2577:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2578:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2579:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev, .Ltmp2579-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,@function
_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev: # @_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2582:
	.cfi_def_cfa_offset 16
.Ltmp2583:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2584:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2585:
	.size	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev, .Ltmp2585-_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2586:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev, .Ltmp2586-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2589:
	.cfi_def_cfa_offset 16
.Ltmp2590:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2591:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2592:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev, .Ltmp2592-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2595:
	.cfi_def_cfa_offset 16
.Ltmp2596:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2597:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2598:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev, .Ltmp2598-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2601:
	.cfi_def_cfa_offset 16
.Ltmp2602:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2603:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2604:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev, .Ltmp2604-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2607:
	.cfi_def_cfa_offset 16
.Ltmp2608:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2609:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2610:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev, .Ltmp2610-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2613:
	.cfi_def_cfa_offset 16
.Ltmp2614:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2615:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2616:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev, .Ltmp2616-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIbEESaIS3_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,@function
_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev: # @_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2619:
	.cfi_def_cfa_offset 16
.Ltmp2620:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2621:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2622:
	.size	_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev, .Ltmp2622-_ZNSaIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2623:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev, .Ltmp2623-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIbEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2626:
	.cfi_def_cfa_offset 16
.Ltmp2627:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2628:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev
	leaq	_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2629:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev, .Ltmp2629-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev,"axG",@progbits,_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev,comdat
	.weak	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev,@function
_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev: # @_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2632:
	.cfi_def_cfa_offset 16
.Ltmp2633:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2634:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	movq	$0, 144(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2635:
	.size	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev, .Ltmp2635-_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv,"axG",@progbits,_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv,comdat
	.weak	_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv,@function
_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv: # @_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str24, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2636:
	.size	_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv, .Ltmp2636-_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev,"axG",@progbits,_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev,comdat
	.weak	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev,@function
_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev: # @_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin419:
	.cfi_lsda 3, .Lexception419
# BB#0:
	pushq	%rbp
.Ltmp2642:
	.cfi_def_cfa_offset 16
.Ltmp2643:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2644:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2637:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
.Ltmp2638:
	jmp	.LBB419_1
.LBB419_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB419_2:
.Ltmp2639:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2645:
	.size	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev, .Ltmp2645-_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev
	.cfi_endproc
.Leh_func_end419:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table419:
.Lexception419:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset592 = .Ltmp2637-.Leh_func_begin419 # >> Call Site 1 <<
	.long	.Lset592
.Lset593 = .Ltmp2638-.Ltmp2637          #   Call between .Ltmp2637 and .Ltmp2638
	.long	.Lset593
.Lset594 = .Ltmp2639-.Leh_func_begin419 #     jumps to .Ltmp2639
	.long	.Lset594
	.byte	0                       #   On action: cleanup
.Lset595 = .Ltmp2638-.Leh_func_begin419 # >> Call Site 2 <<
	.long	.Lset595
.Lset596 = .Leh_func_end419-.Ltmp2638   #   Call between .Ltmp2638 and .Leh_func_end419
	.long	.Lset596
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2648:
	.cfi_def_cfa_offset 16
.Ltmp2649:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2650:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2651:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp2651-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin421:
	.cfi_lsda 3, .Lexception421
# BB#0:
	pushq	%rbp
.Ltmp2660:
	.cfi_def_cfa_offset 16
.Ltmp2661:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2662:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp2652:
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
.Ltmp2653:
	jmp	.LBB421_1
.LBB421_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB421_2:
.Ltmp2654:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp2655:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp2656:
	jmp	.LBB421_3
.LBB421_3:
	jmp	.LBB421_4
.LBB421_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB421_5:
.Ltmp2657:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2663:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE, .Ltmp2663-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end421:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table421:
.Lexception421:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset597 = .Leh_func_begin421-.Leh_func_begin421 # >> Call Site 1 <<
	.long	.Lset597
.Lset598 = .Ltmp2652-.Leh_func_begin421 #   Call between .Leh_func_begin421 and .Ltmp2652
	.long	.Lset598
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset599 = .Ltmp2652-.Leh_func_begin421 # >> Call Site 2 <<
	.long	.Lset599
.Lset600 = .Ltmp2653-.Ltmp2652          #   Call between .Ltmp2652 and .Ltmp2653
	.long	.Lset600
.Lset601 = .Ltmp2654-.Leh_func_begin421 #     jumps to .Ltmp2654
	.long	.Lset601
	.byte	0                       #   On action: cleanup
.Lset602 = .Ltmp2655-.Leh_func_begin421 # >> Call Site 3 <<
	.long	.Lset602
.Lset603 = .Ltmp2656-.Ltmp2655          #   Call between .Ltmp2655 and .Ltmp2656
	.long	.Lset603
.Lset604 = .Ltmp2657-.Leh_func_begin421 #     jumps to .Ltmp2657
	.long	.Lset604
	.byte	1                       #   On action: 1
.Lset605 = .Ltmp2656-.Leh_func_begin421 # >> Call Site 4 <<
	.long	.Lset605
.Lset606 = .Leh_func_end421-.Ltmp2656   #   Call between .Ltmp2656 and .Leh_func_end421
	.long	.Lset606
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str25, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2664:
	.size	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp2664-_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2667:
	.cfi_def_cfa_offset 16
.Ltmp2668:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2669:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2670:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp2670-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin424:
	.cfi_lsda 3, .Lexception424
# BB#0:
	pushq	%rbp
.Ltmp2676:
	.cfi_def_cfa_offset 16
.Ltmp2677:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2678:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2671:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp2672:
	jmp	.LBB424_1
.LBB424_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB424_2:
.Ltmp2673:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2679:
	.size	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp2679-_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end424:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table424:
.Lexception424:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset607 = .Ltmp2671-.Leh_func_begin424 # >> Call Site 1 <<
	.long	.Lset607
.Lset608 = .Ltmp2672-.Ltmp2671          #   Call between .Ltmp2671 and .Ltmp2672
	.long	.Lset608
.Lset609 = .Ltmp2673-.Leh_func_begin424 #     jumps to .Ltmp2673
	.long	.Lset609
	.byte	0                       #   On action: cleanup
.Lset610 = .Ltmp2672-.Leh_func_begin424 # >> Call Site 2 <<
	.long	.Lset610
.Lset611 = .Leh_func_end424-.Ltmp2672   #   Call between .Ltmp2672 and .Leh_func_end424
	.long	.Lset611
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2682:
	.cfi_def_cfa_offset 16
.Ltmp2683:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2684:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2685:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev, .Ltmp2685-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev: # @_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2688:
	.cfi_def_cfa_offset 16
.Ltmp2689:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2690:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2691:
	.size	_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev, .Ltmp2691-_ZNSt6vectorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2694:
	.cfi_def_cfa_offset 16
.Ltmp2695:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2696:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2697:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev, .Ltmp2697-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2700:
	.cfi_def_cfa_offset 16
.Ltmp2701:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2702:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2703:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev, .Ltmp2703-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2706:
	.cfi_def_cfa_offset 16
.Ltmp2707:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2708:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2709:
	.size	_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev, .Ltmp2709-_ZNSt12_Vector_baseIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,@function
_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev: # @_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2712:
	.cfi_def_cfa_offset 16
.Ltmp2713:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2714:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2715:
	.size	_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev, .Ltmp2715-_ZNSaIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2716:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev, .Ltmp2716-_ZN9__gnu_cxx13new_allocatorIPN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2719:
	.cfi_def_cfa_offset 16
.Ltmp2720:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2721:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2722:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev, .Ltmp2722-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2725:
	.cfi_def_cfa_offset 16
.Ltmp2726:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2727:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2728:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp2728-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin434:
	.cfi_lsda 3, .Lexception434
# BB#0:
	pushq	%rbp
.Ltmp2737:
	.cfi_def_cfa_offset 16
.Ltmp2738:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2739:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp2729:
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev
.Ltmp2730:
	jmp	.LBB434_1
.LBB434_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB434_2:
.Ltmp2731:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp2732:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp2733:
	jmp	.LBB434_3
.LBB434_3:
	jmp	.LBB434_4
.LBB434_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB434_5:
.Ltmp2734:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2740:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE, .Ltmp2740-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end434:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table434:
.Lexception434:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset612 = .Leh_func_begin434-.Leh_func_begin434 # >> Call Site 1 <<
	.long	.Lset612
.Lset613 = .Ltmp2729-.Leh_func_begin434 #   Call between .Leh_func_begin434 and .Ltmp2729
	.long	.Lset613
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset614 = .Ltmp2729-.Leh_func_begin434 # >> Call Site 2 <<
	.long	.Lset614
.Lset615 = .Ltmp2730-.Ltmp2729          #   Call between .Ltmp2729 and .Ltmp2730
	.long	.Lset615
.Lset616 = .Ltmp2731-.Leh_func_begin434 #     jumps to .Ltmp2731
	.long	.Lset616
	.byte	0                       #   On action: cleanup
.Lset617 = .Ltmp2732-.Leh_func_begin434 # >> Call Site 3 <<
	.long	.Lset617
.Lset618 = .Ltmp2733-.Ltmp2732          #   Call between .Ltmp2732 and .Ltmp2733
	.long	.Lset618
.Lset619 = .Ltmp2734-.Leh_func_begin434 #     jumps to .Ltmp2734
	.long	.Lset619
	.byte	1                       #   On action: 1
.Lset620 = .Ltmp2733-.Leh_func_begin434 # >> Call Site 4 <<
	.long	.Lset620
.Lset621 = .Leh_func_end434-.Ltmp2733   #   Call between .Ltmp2733 and .Leh_func_end434
	.long	.Lset621
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str25, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2741:
	.size	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp2741-_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2744:
	.cfi_def_cfa_offset 16
.Ltmp2745:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2746:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2747:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp2747-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin437:
	.cfi_lsda 3, .Lexception437
# BB#0:
	pushq	%rbp
.Ltmp2753:
	.cfi_def_cfa_offset 16
.Ltmp2754:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2755:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2748:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp2749:
	jmp	.LBB437_1
.LBB437_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB437_2:
.Ltmp2750:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2756:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp2756-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end437:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table437:
.Lexception437:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset622 = .Ltmp2748-.Leh_func_begin437 # >> Call Site 1 <<
	.long	.Lset622
.Lset623 = .Ltmp2749-.Ltmp2748          #   Call between .Ltmp2748 and .Ltmp2749
	.long	.Lset623
.Lset624 = .Ltmp2750-.Leh_func_begin437 #     jumps to .Ltmp2750
	.long	.Lset624
	.byte	0                       #   On action: cleanup
.Lset625 = .Ltmp2749-.Leh_func_begin437 # >> Call Site 2 <<
	.long	.Lset625
.Lset626 = .Leh_func_end437-.Ltmp2749   #   Call between .Ltmp2749 and .Leh_func_end437
	.long	.Lset626
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2759:
	.cfi_def_cfa_offset 16
.Ltmp2760:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2761:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2762:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev, .Ltmp2762-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2765:
	.cfi_def_cfa_offset 16
.Ltmp2766:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2767:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2768:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev, .Ltmp2768-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2771:
	.cfi_def_cfa_offset 16
.Ltmp2772:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2773:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2774:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev, .Ltmp2774-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2777:
	.cfi_def_cfa_offset 16
.Ltmp2778:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2779:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2780:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev, .Ltmp2780-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2783:
	.cfi_def_cfa_offset 16
.Ltmp2784:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2785:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2786:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev, .Ltmp2786-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2789:
	.cfi_def_cfa_offset 16
.Ltmp2790:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2791:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2792:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev, .Ltmp2792-_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2793:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev, .Ltmp2793-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev,"axG",@progbits,_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev,comdat
	.weak	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev,@function
_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev: # @_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2796:
	.cfi_def_cfa_offset 16
.Ltmp2797:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2798:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2799:
	.size	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev, .Ltmp2799-_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2802:
	.cfi_def_cfa_offset 16
.Ltmp2803:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2804:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp2805:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp2805-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin447:
	.cfi_lsda 3, .Lexception447
# BB#0:
	pushq	%rbp
.Ltmp2814:
	.cfi_def_cfa_offset 16
.Ltmp2815:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2816:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp2806:
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
.Ltmp2807:
	jmp	.LBB447_1
.LBB447_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB447_2:
.Ltmp2808:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp2809:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp2810:
	jmp	.LBB447_3
.LBB447_3:
	jmp	.LBB447_4
.LBB447_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB447_5:
.Ltmp2811:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2817:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE, .Ltmp2817-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end447:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table447:
.Lexception447:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset627 = .Leh_func_begin447-.Leh_func_begin447 # >> Call Site 1 <<
	.long	.Lset627
.Lset628 = .Ltmp2806-.Leh_func_begin447 #   Call between .Leh_func_begin447 and .Ltmp2806
	.long	.Lset628
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset629 = .Ltmp2806-.Leh_func_begin447 # >> Call Site 2 <<
	.long	.Lset629
.Lset630 = .Ltmp2807-.Ltmp2806          #   Call between .Ltmp2806 and .Ltmp2807
	.long	.Lset630
.Lset631 = .Ltmp2808-.Leh_func_begin447 #     jumps to .Ltmp2808
	.long	.Lset631
	.byte	0                       #   On action: cleanup
.Lset632 = .Ltmp2809-.Leh_func_begin447 # >> Call Site 3 <<
	.long	.Lset632
.Lset633 = .Ltmp2810-.Ltmp2809          #   Call between .Ltmp2809 and .Ltmp2810
	.long	.Lset633
.Lset634 = .Ltmp2811-.Leh_func_begin447 #     jumps to .Ltmp2811
	.long	.Lset634
	.byte	1                       #   On action: 1
.Lset635 = .Ltmp2810-.Leh_func_begin447 # >> Call Site 4 <<
	.long	.Lset635
.Lset636 = .Leh_func_end447-.Ltmp2810   #   Call between .Ltmp2810 and .Leh_func_end447
	.long	.Lset636
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str25, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2818:
	.size	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp2818-_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2821:
	.cfi_def_cfa_offset 16
.Ltmp2822:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2823:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2824:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp2824-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin450:
	.cfi_lsda 3, .Lexception450
# BB#0:
	pushq	%rbp
.Ltmp2830:
	.cfi_def_cfa_offset 16
.Ltmp2831:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2832:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2825:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp2826:
	jmp	.LBB450_1
.LBB450_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB450_2:
.Ltmp2827:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2833:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp2833-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end450:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table450:
.Lexception450:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset637 = .Ltmp2825-.Leh_func_begin450 # >> Call Site 1 <<
	.long	.Lset637
.Lset638 = .Ltmp2826-.Ltmp2825          #   Call between .Ltmp2825 and .Ltmp2826
	.long	.Lset638
.Lset639 = .Ltmp2827-.Leh_func_begin450 #     jumps to .Ltmp2827
	.long	.Lset639
	.byte	0                       #   On action: cleanup
.Lset640 = .Ltmp2826-.Leh_func_begin450 # >> Call Site 2 <<
	.long	.Lset640
.Lset641 = .Leh_func_end450-.Ltmp2826   #   Call between .Ltmp2826 and .Leh_func_end450
	.long	.Lset641
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2836:
	.cfi_def_cfa_offset 16
.Ltmp2837:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2838:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2839:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev, .Ltmp2839-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2842:
	.cfi_def_cfa_offset 16
.Ltmp2843:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2844:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2845:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev, .Ltmp2845-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2848:
	.cfi_def_cfa_offset 16
.Ltmp2849:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2850:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2851:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev, .Ltmp2851-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2854:
	.cfi_def_cfa_offset 16
.Ltmp2855:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2856:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2857:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev, .Ltmp2857-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2860:
	.cfi_def_cfa_offset 16
.Ltmp2861:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2862:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2863:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev, .Ltmp2863-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEESaIS6_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2866:
	.cfi_def_cfa_offset 16
.Ltmp2867:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2868:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2869:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev, .Ltmp2869-_ZNSaIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2870:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev, .Ltmp2870-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEC2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi3EEC2EPKc,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EEC2EPKc,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EEC2EPKc
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EEC2EPKc,@function
_ZN5sc_dt7sc_uintILi3EEC2EPKc:          # @_ZN5sc_dt7sc_uintILi3EEC2EPKc
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin458:
	.cfi_lsda 3, .Lexception458
# BB#0:
	pushq	%rbp
.Ltmp2879:
	.cfi_def_cfa_offset 16
.Ltmp2880:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2881:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movl	$3, %eax
	movq	%rsi, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movl	%eax, %esi
	callq	_ZN5sc_dt12sc_uint_baseC2Ei
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN5sc_dt7sc_uintILi3EEE+16, (%rdi)
	movq	-16(%rbp), %rsi
.Ltmp2871:
	callq	_ZN5sc_dt12sc_uint_baseaSEPKc
.Ltmp2872:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB458_1
.LBB458_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB458_2:
.Ltmp2873:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp2874:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
.Ltmp2875:
	jmp	.LBB458_3
.LBB458_3:
	jmp	.LBB458_4
.LBB458_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB458_5:
.Ltmp2876:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2882:
	.size	_ZN5sc_dt7sc_uintILi3EEC2EPKc, .Ltmp2882-_ZN5sc_dt7sc_uintILi3EEC2EPKc
	.cfi_endproc
.Leh_func_end458:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table458:
.Lexception458:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset642 = .Leh_func_begin458-.Leh_func_begin458 # >> Call Site 1 <<
	.long	.Lset642
.Lset643 = .Ltmp2871-.Leh_func_begin458 #   Call between .Leh_func_begin458 and .Ltmp2871
	.long	.Lset643
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset644 = .Ltmp2871-.Leh_func_begin458 # >> Call Site 2 <<
	.long	.Lset644
.Lset645 = .Ltmp2872-.Ltmp2871          #   Call between .Ltmp2871 and .Ltmp2872
	.long	.Lset645
.Lset646 = .Ltmp2873-.Leh_func_begin458 #     jumps to .Ltmp2873
	.long	.Lset646
	.byte	0                       #   On action: cleanup
.Lset647 = .Ltmp2874-.Leh_func_begin458 # >> Call Site 3 <<
	.long	.Lset647
.Lset648 = .Ltmp2875-.Ltmp2874          #   Call between .Ltmp2874 and .Ltmp2875
	.long	.Lset648
.Lset649 = .Ltmp2876-.Leh_func_begin458 #     jumps to .Ltmp2876
	.long	.Lset649
	.byte	1                       #   On action: 1
.Lset650 = .Ltmp2875-.Leh_func_begin458 # >> Call Site 4 <<
	.long	.Lset650
.Lset651 = .Leh_func_end458-.Ltmp2875   #   Call between .Ltmp2875 and .Leh_func_end458
	.long	.Lset651
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN5sc_dt7sc_uintILi3EED0Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EED0Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EED0Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EED0Ev,@function
_ZN5sc_dt7sc_uintILi3EED0Ev:            # @_ZN5sc_dt7sc_uintILi3EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin459:
	.cfi_lsda 3, .Lexception459
# BB#0:
	pushq	%rbp
.Ltmp2888:
	.cfi_def_cfa_offset 16
.Ltmp2889:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2890:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2883:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN5sc_dt7sc_uintILi3EED1Ev
.Ltmp2884:
	jmp	.LBB459_1
.LBB459_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB459_2:
.Ltmp2885:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2891:
	.size	_ZN5sc_dt7sc_uintILi3EED0Ev, .Ltmp2891-_ZN5sc_dt7sc_uintILi3EED0Ev
	.cfi_endproc
.Leh_func_end459:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table459:
.Lexception459:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset652 = .Ltmp2883-.Leh_func_begin459 # >> Call Site 1 <<
	.long	.Lset652
.Lset653 = .Ltmp2884-.Ltmp2883          #   Call between .Ltmp2883 and .Ltmp2884
	.long	.Lset653
.Lset654 = .Ltmp2885-.Leh_func_begin459 #     jumps to .Ltmp2885
	.long	.Lset654
	.byte	0                       #   On action: cleanup
.Lset655 = .Ltmp2884-.Leh_func_begin459 # >> Call Site 2 <<
	.long	.Lset655
.Lset656 = .Leh_func_end459-.Ltmp2884   #   Call between .Ltmp2884 and .Leh_func_end459
	.long	.Lset656
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core18sc_process_monitorD2Ev,"axG",@progbits,_ZN7sc_core18sc_process_monitorD2Ev,comdat
	.weak	_ZN7sc_core18sc_process_monitorD2Ev
	.align	16, 0x90
	.type	_ZN7sc_core18sc_process_monitorD2Ev,@function
_ZN7sc_core18sc_process_monitorD2Ev:    # @_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2892:
	.size	_ZN7sc_core18sc_process_monitorD2Ev, .Ltmp2892-_ZN7sc_core18sc_process_monitorD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxnum_fast_observerD2Ev,"axG",@progbits,_ZN5sc_dt22sc_fxnum_fast_observerD2Ev,comdat
	.weak	_ZN5sc_dt22sc_fxnum_fast_observerD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxnum_fast_observerD2Ev,@function
_ZN5sc_dt22sc_fxnum_fast_observerD2Ev:  # @_ZN5sc_dt22sc_fxnum_fast_observerD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2893:
	.size	_ZN5sc_dt22sc_fxnum_fast_observerD2Ev, .Ltmp2893-_ZN5sc_dt22sc_fxnum_fast_observerD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxnum_observerD2Ev,"axG",@progbits,_ZN5sc_dt17sc_fxnum_observerD2Ev,comdat
	.weak	_ZN5sc_dt17sc_fxnum_observerD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxnum_observerD2Ev,@function
_ZN5sc_dt17sc_fxnum_observerD2Ev:       # @_ZN5sc_dt17sc_fxnum_observerD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2894:
	.size	_ZN5sc_dt17sc_fxnum_observerD2Ev, .Ltmp2894-_ZN5sc_dt17sc_fxnum_observerD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt22sc_fxval_fast_observerD2Ev,"axG",@progbits,_ZN5sc_dt22sc_fxval_fast_observerD2Ev,comdat
	.weak	_ZN5sc_dt22sc_fxval_fast_observerD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt22sc_fxval_fast_observerD2Ev,@function
_ZN5sc_dt22sc_fxval_fast_observerD2Ev:  # @_ZN5sc_dt22sc_fxval_fast_observerD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2895:
	.size	_ZN5sc_dt22sc_fxval_fast_observerD2Ev, .Ltmp2895-_ZN5sc_dt22sc_fxval_fast_observerD2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt17sc_fxval_observerD2Ev,"axG",@progbits,_ZN5sc_dt17sc_fxval_observerD2Ev,comdat
	.weak	_ZN5sc_dt17sc_fxval_observerD2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt17sc_fxval_observerD2Ev,@function
_ZN5sc_dt17sc_fxval_observerD2Ev:       # @_ZN5sc_dt17sc_fxval_observerD2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp2896:
	.size	_ZN5sc_dt17sc_fxval_observerD2Ev, .Ltmp2896-_ZN5sc_dt17sc_fxval_observerD2Ev
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_object10simcontextEv,"axG",@progbits,_ZNK7sc_core9sc_object10simcontextEv,comdat
	.weak	_ZNK7sc_core9sc_object10simcontextEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_object10simcontextEv,@function
_ZNK7sc_core9sc_object10simcontextEv:   # @_ZNK7sc_core9sc_object10simcontextEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	80(%rdi), %rax
	ret
.Ltmp2897:
	.size	_ZNK7sc_core9sc_object10simcontextEv, .Ltmp2897-_ZNK7sc_core9sc_object10simcontextEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2900:
	.cfi_def_cfa_offset 16
.Ltmp2901:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2902:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB466_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str15, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB466_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2903:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv, .Ltmp2903-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEptEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv,@function
_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv: # @_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2906:
	.cfi_def_cfa_offset 16
.Ltmp2907:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2908:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB467_2
# BB#1:
	leaq	_ZN7sc_core13SC_ID_GET_IF_E, %rsi
	leaq	.L.str15, %rdx
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB467_2:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	96(%rax), %rax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2909:
	.size	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv, .Ltmp2909-_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEptEv
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi32EED2Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi32EED2Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi32EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi32EED2Ev,@function
_ZN5sc_dt7sc_uintILi32EED2Ev:           # @_ZN5sc_dt7sc_uintILi32EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2912:
	.cfi_def_cfa_offset 16
.Ltmp2913:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2914:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2915:
	.size	_ZN5sc_dt7sc_uintILi32EED2Ev, .Ltmp2915-_ZN5sc_dt7sc_uintILi32EED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIbED2Ev,"axG",@progbits,_ZN7sc_core5sc_inIbED2Ev,comdat
	.weak	_ZN7sc_core5sc_inIbED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIbED2Ev,@function
_ZN7sc_core5sc_inIbED2Ev:               # @_ZN7sc_core5sc_inIbED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin469:
	.cfi_lsda 3, .Lexception469
# BB#0:
	pushq	%rbp
.Ltmp2930:
	.cfi_def_cfa_offset 16
.Ltmp2931:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2932:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core5sc_inIbEE+16, (%rdi)
	movq	%rdi, %rax
.Ltmp2916:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZNK7sc_core5sc_inIbE13remove_tracesEv
.Ltmp2917:
	jmp	.LBB469_1
.LBB469_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	136(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	je	.LBB469_4
# BB#2:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp2918:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp2919:
	jmp	.LBB469_3
.LBB469_3:
	jmp	.LBB469_4
.LBB469_4:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	144(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	je	.LBB469_7
# BB#5:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp2920:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp2921:
	jmp	.LBB469_6
.LBB469_6:
	jmp	.LBB469_7
.LBB469_7:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	152(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	je	.LBB469_10
# BB#8:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rcx), %rcx
.Ltmp2922:
	movq	%rax, %rdi
	callq	*%rcx
.Ltmp2923:
	jmp	.LBB469_9
.LBB469_9:
	jmp	.LBB469_10
.LBB469_10:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB469_11:
.Ltmp2924:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2925:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
.Ltmp2926:
	jmp	.LBB469_12
.LBB469_12:
	jmp	.LBB469_13
.LBB469_13:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB469_14:
.Ltmp2927:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2933:
	.size	_ZN7sc_core5sc_inIbED2Ev, .Ltmp2933-_ZN7sc_core5sc_inIbED2Ev
	.cfi_endproc
.Leh_func_end469:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table469:
.Lexception469:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset657 = .Ltmp2916-.Leh_func_begin469 # >> Call Site 1 <<
	.long	.Lset657
.Lset658 = .Ltmp2923-.Ltmp2916          #   Call between .Ltmp2916 and .Ltmp2923
	.long	.Lset658
.Lset659 = .Ltmp2924-.Leh_func_begin469 #     jumps to .Ltmp2924
	.long	.Lset659
	.byte	0                       #   On action: cleanup
.Lset660 = .Ltmp2923-.Leh_func_begin469 # >> Call Site 2 <<
	.long	.Lset660
.Lset661 = .Ltmp2925-.Ltmp2923          #   Call between .Ltmp2923 and .Ltmp2925
	.long	.Lset661
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset662 = .Ltmp2925-.Leh_func_begin469 # >> Call Site 3 <<
	.long	.Lset662
.Lset663 = .Ltmp2926-.Ltmp2925          #   Call between .Ltmp2925 and .Ltmp2926
	.long	.Lset663
.Lset664 = .Ltmp2927-.Leh_func_begin469 #     jumps to .Ltmp2927
	.long	.Lset664
	.byte	1                       #   On action: 1
.Lset665 = .Ltmp2926-.Leh_func_begin469 # >> Call Site 4 <<
	.long	.Lset665
.Lset666 = .Leh_func_end469-.Ltmp2926   #   Call between .Ltmp2926 and .Leh_func_end469
	.long	.Lset666
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2936:
	.cfi_def_cfa_offset 16
.Ltmp2937:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2938:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2939:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev, .Ltmp2939-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin471:
	.cfi_lsda 3, .Lexception471
# BB#0:
	pushq	%rbp
.Ltmp2948:
	.cfi_def_cfa_offset 16
.Ltmp2949:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2950:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE+16, (%rdi)
	movq	%rdi, %rax
	addq	$104, %rax
.Ltmp2940:
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev
.Ltmp2941:
	jmp	.LBB471_1
.LBB471_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZN7sc_core12sc_port_baseD2Ev
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB471_2:
.Ltmp2942:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp2943:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp2944:
	jmp	.LBB471_3
.LBB471_3:
	jmp	.LBB471_4
.LBB471_4:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB471_5:
.Ltmp2945:
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp2951:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev, .Ltmp2951-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	.cfi_endproc
.Leh_func_end471:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table471:
.Lexception471:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset667 = .Ltmp2940-.Leh_func_begin471 # >> Call Site 1 <<
	.long	.Lset667
.Lset668 = .Ltmp2941-.Ltmp2940          #   Call between .Ltmp2940 and .Ltmp2941
	.long	.Lset668
.Lset669 = .Ltmp2942-.Leh_func_begin471 #     jumps to .Ltmp2942
	.long	.Lset669
	.byte	0                       #   On action: cleanup
.Lset670 = .Ltmp2941-.Leh_func_begin471 # >> Call Site 2 <<
	.long	.Lset670
.Lset671 = .Ltmp2943-.Ltmp2941          #   Call between .Ltmp2941 and .Ltmp2943
	.long	.Lset671
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset672 = .Ltmp2943-.Leh_func_begin471 # >> Call Site 3 <<
	.long	.Lset672
.Lset673 = .Ltmp2944-.Ltmp2943          #   Call between .Ltmp2943 and .Ltmp2944
	.long	.Lset673
.Lset674 = .Ltmp2945-.Leh_func_begin471 #     jumps to .Ltmp2945
	.long	.Lset674
	.byte	1                       #   On action: 1
.Lset675 = .Ltmp2944-.Leh_func_begin471 # >> Call Site 4 <<
	.long	.Lset675
.Lset676 = .Leh_func_end471-.Ltmp2944   #   Call between .Ltmp2944 and .Leh_func_end471
	.long	.Lset676
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2954:
	.cfi_def_cfa_offset 16
.Ltmp2955:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2956:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2957:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev, .Ltmp2957-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2960:
	.cfi_def_cfa_offset 16
.Ltmp2961:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2962:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2963:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev, .Ltmp2963-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin474:
	.cfi_lsda 3, .Lexception474
# BB#0:
	pushq	%rbp
.Ltmp2969:
	.cfi_def_cfa_offset 16
.Ltmp2970:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2971:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp2964:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
.Ltmp2965:
	jmp	.LBB474_1
.LBB474_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB474_2:
.Ltmp2966:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp2972:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev, .Ltmp2972-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev
	.cfi_endproc
.Leh_func_end474:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table474:
.Lexception474:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset677 = .Ltmp2964-.Leh_func_begin474 # >> Call Site 1 <<
	.long	.Lset677
.Lset678 = .Ltmp2965-.Ltmp2964          #   Call between .Ltmp2964 and .Ltmp2965
	.long	.Lset678
.Lset679 = .Ltmp2966-.Leh_func_begin474 #     jumps to .Ltmp2966
	.long	.Lset679
	.byte	0                       #   On action: cleanup
.Lset680 = .Ltmp2965-.Leh_func_begin474 # >> Call Site 2 <<
	.long	.Lset680
.Lset681 = .Leh_func_end474-.Ltmp2965   #   Call between .Ltmp2965 and .Leh_func_end474
	.long	.Lset681
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB475_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB475_3
.LBB475_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB475_3
.LBB475_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp2973:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv, .Ltmp2973-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	96(%rdi), %rdi
	cmpq	$0, %rdi
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB476_2
# BB#1:
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rcx
	movq	-48(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB476_3
.LBB476_2:
	movabsq	$0, %rax
	movq	%rax, -24(%rsp)         # 8-byte Spill
	jmp	.LBB476_3
.LBB476_3:
	movq	-24(%rsp), %rax         # 8-byte Reload
	ret
.Ltmp2974:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv, .Ltmp2974-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2977:
	.cfi_def_cfa_offset 16
.Ltmp2978:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2979:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB477_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB477_3
.LBB477_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB477_3
.LBB477_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB477_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB477_6
.LBB477_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	movl	$0, -4(%rbp)
.LBB477_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2980:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE, .Ltmp2980-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2983:
	.cfi_def_cfa_offset 16
.Ltmp2984:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2985:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB478_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_port_baseE, %rax
	leaq	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB478_3
.LBB478_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB478_3
.LBB478_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB478_5
# BB#4:
	movl	$2, -4(%rbp)
	jmp	.LBB478_6
.LBB478_5:
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	movl	$0, -4(%rbp)
.LBB478_6:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp2986:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE, .Ltmp2986-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2989:
	.cfi_def_cfa_offset 16
.Ltmp2990:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2991:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	$0, %rdi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB479_2
# BB#1:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB479_3
.LBB479_2:
	movabsq	$0, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB479_3
.LBB479_3:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB479_5
# BB#4:
	jmp	.LBB479_6
.LBB479_5:
	leaq	.L.str18, %rdi
	leaq	.L.str17, %rsi
	movl	$541, %edx              # imm = 0x21D
	leaq	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, %rcx
	callq	__assert_fail
.LBB479_6:
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB479_7:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB479_12
# BB#8:                                 #   in Loop: Header=BB479_7 Depth=1
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx         # 8-byte Reload
	addq	$104, %rcx
	movslq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	(%rax), %rcx
	jne	.LBB479_10
# BB#9:                                 #   in Loop: Header=BB479_7 Depth=1
	leaq	_ZN7sc_core22SC_ID_BIND_IF_TO_PORT_E, %rsi
	leaq	.L.str19, %rdx
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base12report_errorEPKcS2_
.LBB479_10:                             #   in Loop: Header=BB479_7 Depth=1
	jmp	.LBB479_11
.LBB479_11:                             #   in Loop: Header=BB479_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB479_7
.LBB479_12:
	leaq	-24(%rbp), %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_
	movabsq	$0, %rsi
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, 96(%rsi)
	addq	$80, %rsp
	popq	%rbp
	ret
.Ltmp2992:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, .Ltmp2992-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp2995:
	.cfi_def_cfa_offset 16
.Ltmp2996:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2997:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$104, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp2998:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv, .Ltmp2998-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3001:
	.cfi_def_cfa_offset 16
.Ltmp3002:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3003:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rax
	movq	%rdi, -8(%rbp)
	movq	%rax, %rdi
	callq	_ZNKSt9type_info4nameEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3004:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv, .Ltmp3004-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3007:
	.cfi_def_cfa_offset 16
.Ltmp3008:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3009:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB482_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB482_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB482_8
# BB#3:                                 #   in Loop: Header=BB482_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB482_5
# BB#4:                                 #   in Loop: Header=BB482_2 Depth=1
	jmp	.LBB482_6
.LBB482_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$588, %edx              # imm = 0x24C
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB482_6:                              #   in Loop: Header=BB482_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_thread_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB482_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB482_2
.LBB482_8:
	jmp	.LBB482_10
.LBB482_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.LBB482_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3010:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, .Ltmp3010-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,"axG",@progbits,_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,comdat
	.weak	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.align	16, 0x90
	.type	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@function
_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE: # @_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3013:
	.cfi_def_cfa_offset 16
.Ltmp3014:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3015:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 88(%rdx)
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	jne	.LBB483_9
# BB#1:
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -32(%rbp)
.LBB483_2:                              # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB483_8
# BB#3:                                 #   in Loop: Header=BB483_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	addq	$104, %rax
	movslq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB483_5
# BB#4:                                 #   in Loop: Header=BB483_2 Depth=1
	jmp	.LBB483_6
.LBB483_5:
	leaq	.L.str16, %rdi
	leaq	.L.str17, %rsi
	movl	$609, %edx              # imm = 0x261
	leaq	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, %rcx
	callq	__assert_fail
.LBB483_6:                              #   in Loop: Header=BB483_2 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-48(%rdx), %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movq	(%rcx,%rdx), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	*8(%rcx)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZNK7sc_core12sc_port_base16add_static_eventEPNS_17sc_method_processERKNS_8sc_eventE
# BB#7:                                 #   in Loop: Header=BB483_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB483_2
.LBB483_8:
	jmp	.LBB483_10
.LBB483_9:
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZNK7sc_core12sc_port_base14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.LBB483_10:
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3016:
	.size	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, .Ltmp3016-_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3019:
	.cfi_def_cfa_offset 16
.Ltmp3020:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3021:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	-48(%rax), %rax
	addq	%rax, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERNS_12sc_interfaceE
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3022:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_, .Ltmp3022-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3025:
	.cfi_def_cfa_offset 16
.Ltmp3026:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3027:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_base4bindERS0_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3028:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_, .Ltmp3028-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	ret
.Ltmp3029:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv, .Ltmp3029-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp3030:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm, .Ltmp3030-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	(%rsi), %rsi
	movq	-16(%rsp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rsi
	movq	%rsi, %rax
	ret
.Ltmp3031:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm, .Ltmp3031-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEixEm
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3034:
	.cfi_def_cfa_offset 16
.Ltmp3035:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3036:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB489_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-16(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB489_3
.LBB489_2:
	leaq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv
	leaq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	(%rsi), %rsi
	movq	%rsi, (%rsp)
	movq	-40(%rbp), %rsi         # 8-byte Reload
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
.LBB489_3:
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3037:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_, .Ltmp3037-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE9push_backERKS3_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	%rdx, -24(%rsp)
	movq	-16(%rsp), %rdx
	cmpq	$0, %rdx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	je	.LBB490_2
# BB#1:
	movq	-32(%rsp), %rax         # 8-byte Reload
	movq	-24(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rax, -40(%rsp)         # 8-byte Spill
.LBB490_2:
	ret
.Ltmp3038:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_, .Ltmp3038-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin491:
	.cfi_lsda 3, .Lexception491
# BB#0:
	pushq	%rbp
.Ltmp3070:
	.cfi_def_cfa_offset 16
.Ltmp3071:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3072:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rdi
	cmpq	16(%rsi), %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	je	.LBB491_2
# BB#1:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	8(%rcx), %rdx
	addq	$-8, %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	addq	$-16, %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rcx, %rsi
	callq	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	movq	-24(%rbp), %rcx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	movq	-112(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	jmp	.LBB491_22
.LBB491_2:
	movl	$1, %esi
	movl	$.L.str20, %edx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc
	movq	%rax, -32(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
.Ltmp3039:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE9constructEPS4_RKS4_
.Ltmp3040:
	jmp	.LBB491_3
.LBB491_3:
	movq	$0, -64(%rbp)
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
.Ltmp3041:
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	%rdi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
.Ltmp3042:
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB491_4
.LBB491_4:
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	movq	-56(%rbp), %rdx
.Ltmp3043:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp3044:
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB491_5
.LBB491_5:
.Ltmp3045:
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
.Ltmp3046:
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB491_6
.LBB491_6:
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	addq	$8, %rax
	movq	%rax, -64(%rbp)
.Ltmp3047:
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
.Ltmp3048:
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB491_7
.LBB491_7:
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rdi
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rsi
	movq	-64(%rbp), %rdx
.Ltmp3049:
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp3050:
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB491_8
.LBB491_8:
.Ltmp3051:
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
.Ltmp3052:
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB491_9
.LBB491_9:
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	jmp	.LBB491_21
.LBB491_10:
.Ltmp3053:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
# BB#11:
	movq	-72(%rbp), %rdi
	callq	__cxa_begin_catch
	cmpq	$0, -64(%rbp)
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jne	.LBB491_15
# BB#12:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rsi
.Ltmp3054:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_
.Ltmp3055:
	jmp	.LBB491_13
.LBB491_13:
	jmp	.LBB491_18
.LBB491_14:
.Ltmp3064:
	movl	%edx, %ecx
	movq	%rax, -72(%rbp)
	movl	%ecx, -76(%rbp)
.Ltmp3065:
	callq	__cxa_end_catch
.Ltmp3066:
	jmp	.LBB491_20
.LBB491_15:
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
.Ltmp3056:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rdi, -232(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp3057:
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB491_16
.LBB491_16:
.Ltmp3058:
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-240(%rbp), %rsi        # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
.Ltmp3059:
	jmp	.LBB491_17
.LBB491_17:
	jmp	.LBB491_18
.LBB491_18:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
.Ltmp3060:
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
.Ltmp3061:
	jmp	.LBB491_19
.LBB491_19:
.Ltmp3062:
	callq	__cxa_rethrow
.Ltmp3063:
	jmp	.LBB491_25
.LBB491_20:
	jmp	.LBB491_23
.LBB491_21:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	movq	%rdi, -256(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-264(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	(%rdx), %rsi
	movq	16(%rdx), %rdi
	movq	(%rdx), %rcx
	subq	%rcx, %rdi
	sarq	$3, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-272(%rbp), %rdx        # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
.LBB491_22:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	ret
.LBB491_23:
	movq	-72(%rbp), %rdi
	callq	_Unwind_Resume
.LBB491_24:
.Ltmp3067:
	movq	%rax, -280(%rbp)        # 8-byte Spill
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	callq	_ZSt9terminatev
.LBB491_25:
.Ltmp3073:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_, .Ltmp3073-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS3_S5_EERKS3_
	.cfi_endproc
.Leh_func_end491:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table491:
.Lexception491:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\343\200"             # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	91                      # Call site table length
.Lset682 = .Leh_func_begin491-.Leh_func_begin491 # >> Call Site 1 <<
	.long	.Lset682
.Lset683 = .Ltmp3039-.Leh_func_begin491 #   Call between .Leh_func_begin491 and .Ltmp3039
	.long	.Lset683
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset684 = .Ltmp3039-.Leh_func_begin491 # >> Call Site 2 <<
	.long	.Lset684
.Lset685 = .Ltmp3052-.Ltmp3039          #   Call between .Ltmp3039 and .Ltmp3052
	.long	.Lset685
.Lset686 = .Ltmp3053-.Leh_func_begin491 #     jumps to .Ltmp3053
	.long	.Lset686
	.byte	1                       #   On action: 1
.Lset687 = .Ltmp3052-.Leh_func_begin491 # >> Call Site 3 <<
	.long	.Lset687
.Lset688 = .Ltmp3054-.Ltmp3052          #   Call between .Ltmp3052 and .Ltmp3054
	.long	.Lset688
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset689 = .Ltmp3054-.Leh_func_begin491 # >> Call Site 4 <<
	.long	.Lset689
.Lset690 = .Ltmp3055-.Ltmp3054          #   Call between .Ltmp3054 and .Ltmp3055
	.long	.Lset690
.Lset691 = .Ltmp3064-.Leh_func_begin491 #     jumps to .Ltmp3064
	.long	.Lset691
	.byte	0                       #   On action: cleanup
.Lset692 = .Ltmp3065-.Leh_func_begin491 # >> Call Site 5 <<
	.long	.Lset692
.Lset693 = .Ltmp3066-.Ltmp3065          #   Call between .Ltmp3065 and .Ltmp3066
	.long	.Lset693
.Lset694 = .Ltmp3067-.Leh_func_begin491 #     jumps to .Ltmp3067
	.long	.Lset694
	.byte	1                       #   On action: 1
.Lset695 = .Ltmp3056-.Leh_func_begin491 # >> Call Site 6 <<
	.long	.Lset695
.Lset696 = .Ltmp3063-.Ltmp3056          #   Call between .Ltmp3056 and .Ltmp3063
	.long	.Lset696
.Lset697 = .Ltmp3064-.Leh_func_begin491 #     jumps to .Ltmp3064
	.long	.Lset697
	.byte	0                       #   On action: cleanup
.Lset698 = .Ltmp3063-.Leh_func_begin491 # >> Call Site 7 <<
	.long	.Lset698
.Lset699 = .Leh_func_end491-.Ltmp3063   #   Call between .Ltmp3063 and .Leh_func_end491
	.long	.Lset699
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3076:
	.cfi_def_cfa_offset 16
.Ltmp3077:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3078:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3079:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv, .Ltmp3079-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE3endEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3082:
	.cfi_def_cfa_offset 16
.Ltmp3083:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3084:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3085:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_, .Ltmp3085-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,"axG",@progbits,_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,comdat
	.weak	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_,@function
_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_: # @_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	movq	-8(%rsp), %rsi
	movq	-16(%rsp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	ret
.Ltmp3086:
	.size	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_, .Ltmp3086-_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	.cfi_endproc

	.section	.text._ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_: # @_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3089:
	.cfi_def_cfa_offset 16
.Ltmp3090:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3091:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3092:
	.size	_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_, .Ltmp3092-_ZSt13copy_backwardIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp3093:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv, .Ltmp3093-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,"axG",@progbits,_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,comdat
	.weak	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv,@function
_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv: # @_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	(%rdi), %rax
	ret
.Ltmp3094:
	.size	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv, .Ltmp3094-_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEdeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3097:
	.cfi_def_cfa_offset 16
.Ltmp3098:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3099:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movq	-56(%rbp), %rdx         # 8-byte Reload
	subq	%rax, %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB498_2
# BB#1:
	movq	-24(%rbp), %rdi
	callq	_ZSt20__throw_length_errorPKc
.LBB498_2:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	leaq	-40(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)
	callq	_ZSt3maxImERKT_S2_S2_
	movq	-64(%rbp), %rsi         # 8-byte Reload
	addq	(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE4sizeEv
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jb	.LBB498_4
# BB#3:
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jbe	.LBB498_5
.LBB498_4:
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB498_6
.LBB498_5:
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB498_6:
	movq	-88(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	ret
.Ltmp3100:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc, .Ltmp3100-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_M_check_lenEmPKc
	.cfi_endproc

	.section	.text._ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,"axG",@progbits,_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,comdat
	.weak	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.align	16, 0x90
	.type	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_,@function
_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_: # @_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3103:
	.cfi_def_cfa_offset 16
.Ltmp3104:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3105:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEE4baseEv
	movq	(%rax), %rax
	movq	-24(%rbp), %rsi         # 8-byte Reload
	subq	%rax, %rsi
	sarq	$3, %rsi
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3106:
	.size	_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_, .Ltmp3106-_ZN9__gnu_cxxmiIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3109:
	.cfi_def_cfa_offset 16
.Ltmp3110:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3111:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	_ZN9__gnu_cxx17__normal_iteratorIPPN7sc_core15sc_signal_in_ifIbEESt6vectorIS4_SaIS4_EEEC1ERKS5_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3112:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv, .Ltmp3112-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE5beginEv
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3115:
	.cfi_def_cfa_offset 16
.Ltmp3116:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3117:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	je	.LBB501_2
# BB#1:
	movabsq	$0, %rdx
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB501_3
.LBB501_2:
	movabsq	$0, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB501_3
.LBB501_3:
	movq	-32(%rbp), %rax         # 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3118:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm, .Ltmp3118-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE11_M_allocateEm
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,"axG",@progbits,_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,comdat
	.weak	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.align	16, 0x90
	.type	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_,@function
_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_: # @_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3121:
	.cfi_def_cfa_offset 16
.Ltmp3122:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3123:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3124:
	.size	_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_, .Ltmp3124-_ZSt22__uninitialized_move_aIPPN7sc_core15sc_signal_in_ifIbEES4_SaIS3_EET0_T_S7_S6_RT1_
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp3125:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv, .Ltmp3125-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp3126:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_, .Ltmp3126-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE7destroyEPS4_
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3129:
	.cfi_def_cfa_offset 16
.Ltmp3130:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3131:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3132:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E, .Ltmp3132-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3135:
	.cfi_def_cfa_offset 16
.Ltmp3136:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3137:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, -16(%rbp)
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	je	.LBB506_2
# BB#1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m
.LBB506_2:
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3138:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m, .Ltmp3138-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3141:
	.cfi_def_cfa_offset 16
.Ltmp3142:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3143:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3144:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m, .Ltmp3144-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE10deallocateEPS4_m
	.cfi_endproc

	.section	.text._ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_,"axG",@progbits,_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_,comdat
	.weak	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_
	.align	16, 0x90
	.type	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_,@function
_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_: # @_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3147:
	.cfi_def_cfa_offset 16
.Ltmp3148:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3149:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3150:
	.size	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_, .Ltmp3150-_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEEEvT_S5_
	.cfi_endproc

	.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_,"axG",@progbits,_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_,comdat
	.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_
	.align	16, 0x90
	.type	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_,@function
_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_: # @_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	%rsi, -16(%rsp)
	ret
.Ltmp3151:
	.size	_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_, .Ltmp3151-_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7sc_core15sc_signal_in_ifIbEEEEvT_S7_
	.cfi_endproc

	.section	.text._ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,"axG",@progbits,_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,comdat
	.weak	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.align	16, 0x90
	.type	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E,@function
_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E: # @_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3154:
	.cfi_def_cfa_offset 16
.Ltmp3155:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3156:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3157:
	.size	_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E, .Ltmp3157-_ZSt22__uninitialized_copy_aIPPN7sc_core15sc_signal_in_ifIbEES4_S3_ET0_T_S6_S5_RSaIT1_E
	.cfi_endproc

	.section	.text._ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_: # @_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3160:
	.cfi_def_cfa_offset 16
.Ltmp3161:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3162:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3163:
	.size	_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_, .Ltmp3163-_ZSt18uninitialized_copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_,"axG",@progbits,_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_,comdat
	.weak	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_
	.align	16, 0x90
	.type	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_,@function
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_: # @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3166:
	.cfi_def_cfa_offset 16
.Ltmp3167:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3168:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3169:
	.size	_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_, .Ltmp3169-_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPPN7sc_core15sc_signal_in_ifIbEES6_EET0_T_S8_S7_
	.cfi_endproc

	.section	.text._ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,"axG",@progbits,_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,comdat
	.weak	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.align	16, 0x90
	.type	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_,@function
_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_: # @_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3172:
	.cfi_def_cfa_offset 16
.Ltmp3173:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3174:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3175:
	.size	_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_, .Ltmp3175-_ZSt4copyIPPN7sc_core15sc_signal_in_ifIbEES4_ET0_T_S6_S5_
	.cfi_endproc

	.section	.text._ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3178:
	.cfi_def_cfa_offset 16
.Ltmp3179:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3180:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3181:
	.size	_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_, .Ltmp3181-_ZSt14__copy_move_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,"axG",@progbits,_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,comdat
	.weak	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.align	16, 0x90
	.type	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_,@function
_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_: # @_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3184:
	.cfi_def_cfa_offset 16
.Ltmp3185:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3186:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3187:
	.size	_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_, .Ltmp3187-_ZSt12__miter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Miter_baseIT_E13iterator_typeES6_
	.cfi_endproc

	.section	.text._ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_,"axG",@progbits,_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_,comdat
	.weak	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	.align	16, 0x90
	.type	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_,@function
_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_: # @_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rax
	ret
.Ltmp3188:
	.size	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_, .Ltmp3188-_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	.cfi_endproc

	.section	.text._ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3191:
	.cfi_def_cfa_offset 16
.Ltmp3192:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3193:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3194:
	.size	_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_, .Ltmp3194-_ZSt13__copy_move_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,"axG",@progbits,_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,comdat
	.weak	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.align	16, 0x90
	.type	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_,@function
_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_: # @_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3197:
	.cfi_def_cfa_offset 16
.Ltmp3198:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3199:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt10_Iter_baseIPPN7sc_core15sc_signal_in_ifIbEELb0EE7_S_baseES4_
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3200:
	.size	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_, .Ltmp3200-_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	.cfi_endproc

	.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,"axG",@progbits,_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,comdat
	.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.align	16, 0x90
	.type	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,@function
_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_: # @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3203:
	.cfi_def_cfa_offset 16
.Ltmp3204:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3205:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB519_2
# BB#1:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB519_2:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3206:
	.size	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_, .Ltmp3206-_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3209:
	.cfi_def_cfa_offset 16
.Ltmp3210:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3211:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jbe	.LBB520_2
# BB#1:
	callq	_ZSt17__throw_bad_allocv
.LBB520_2:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_Znwm
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3212:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv, .Ltmp3212-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8allocateEmPKv
	.cfi_endproc

	.section	.text._ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv,comdat
	.weak	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	.align	16, 0x90
	.type	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv,@function
_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv: # @_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	.cfi_startproc
# BB#0:
	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3213:
	.size	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv, .Ltmp3213-_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv,comdat
	.weak	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	.align	16, 0x90
	.type	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv,@function
_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv: # @_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3216:
	.cfi_def_cfa_offset 16
.Ltmp3217:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3218:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	movq	%rax, %rdi
	callq	_ZNK9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEE8max_sizeEv
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3219:
	.size	_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv, .Ltmp3219-_ZNKSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE8max_sizeEv
	.cfi_endproc

	.section	.text._ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,comdat
	.weak	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.align	16, 0x90
	.type	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv,@function
_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv: # @_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	%rdi, %rax
	ret
.Ltmp3220:
	.size	_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv, .Ltmp3220-_ZNKSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
	.cfi_endproc

	.section	.text._ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3223:
	.cfi_def_cfa_offset 16
.Ltmp3224:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3225:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	_ZSt12__niter_baseIPPN7sc_core15sc_signal_in_ifIbEEENSt11_Niter_baseIT_E13iterator_typeES6_
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	addq	$48, %rsp
	popq	%rbp
	ret
.Ltmp3226:
	.size	_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_, .Ltmp3226-_ZSt23__copy_move_backward_a2ILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,"axG",@progbits,_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,comdat
	.weak	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.align	16, 0x90
	.type	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_,@function
_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_: # @_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3229:
	.cfi_def_cfa_offset 16
.Ltmp3230:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3231:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3232:
	.size	_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_, .Ltmp3232-_ZSt22__copy_move_backward_aILb0EPPN7sc_core15sc_signal_in_ifIbEES4_ET1_T0_S6_S5_
	.cfi_endproc

	.section	.text._ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,"axG",@progbits,_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,comdat
	.weak	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.align	16, 0x90
	.type	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_,@function
_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_: # @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3235:
	.cfi_def_cfa_offset 16
.Ltmp3236:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3237:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB526_2
# BB#1:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memmove
.LBB526_2:
	movq	-24(%rbp), %rax
	movabsq	$0, %rcx
	subq	-32(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3238:
	.size	_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_, .Ltmp3238-_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN7sc_core15sc_signal_in_ifIbEEEEPT_PKS7_SA_S8_
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin527:
	.cfi_lsda 3, .Lexception527
# BB#0:
	pushq	%rbp
.Ltmp3249:
	.cfi_def_cfa_offset 16
.Ltmp3250:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3251:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	%rdi, %rcx
.Ltmp3239:
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE19_M_get_Tp_allocatorEv
.Ltmp3240:
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB527_1
.LBB527_1:
.Ltmp3241:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	_ZSt8_DestroyIPPN7sc_core15sc_signal_in_ifIbEES3_EvT_S5_RSaIT0_E
.Ltmp3242:
	jmp	.LBB527_2
.LBB527_2:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	addq	$80, %rsp
	popq	%rbp
	ret
.LBB527_3:
.Ltmp3243:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp3244:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
.Ltmp3245:
	jmp	.LBB527_4
.LBB527_4:
	jmp	.LBB527_5
.LBB527_5:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB527_6:
.Ltmp3246:
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3252:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev, .Ltmp3252-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.cfi_endproc
.Leh_func_end527:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table527:
.Lexception527:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset700 = .Ltmp3239-.Leh_func_begin527 # >> Call Site 1 <<
	.long	.Lset700
.Lset701 = .Ltmp3242-.Ltmp3239          #   Call between .Ltmp3239 and .Ltmp3242
	.long	.Lset701
.Lset702 = .Ltmp3243-.Leh_func_begin527 #     jumps to .Ltmp3243
	.long	.Lset702
	.byte	0                       #   On action: cleanup
.Lset703 = .Ltmp3242-.Leh_func_begin527 # >> Call Site 2 <<
	.long	.Lset703
.Lset704 = .Ltmp3244-.Ltmp3242          #   Call between .Ltmp3242 and .Ltmp3244
	.long	.Lset704
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset705 = .Ltmp3244-.Leh_func_begin527 # >> Call Site 3 <<
	.long	.Lset705
.Lset706 = .Ltmp3245-.Ltmp3244          #   Call between .Ltmp3244 and .Ltmp3245
	.long	.Lset706
.Lset707 = .Ltmp3246-.Leh_func_begin527 #     jumps to .Ltmp3246
	.long	.Lset707
	.byte	1                       #   On action: 1
.Lset708 = .Ltmp3245-.Leh_func_begin527 # >> Call Site 4 <<
	.long	.Lset708
.Lset709 = .Leh_func_end527-.Ltmp3245   #   Call between .Ltmp3245 and .Leh_func_end527
	.long	.Lset709
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin528:
	.cfi_lsda 3, .Lexception528
# BB#0:
	pushq	%rbp
.Ltmp3258:
	.cfi_def_cfa_offset 16
.Ltmp3259:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3260:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	(%rdi), %rax
	movq	16(%rdi), %rcx
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rdi, %rdx
.Ltmp3253:
	movq	%rax, %rsi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE13_M_deallocateEPS3_m
.Ltmp3254:
	jmp	.LBB528_1
.LBB528_1:
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB528_2:
.Ltmp3255:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rdi         # 8-byte Reload
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3261:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev, .Ltmp3261-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EED2Ev
	.cfi_endproc
.Leh_func_end528:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table528:
.Lexception528:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset710 = .Ltmp3253-.Leh_func_begin528 # >> Call Site 1 <<
	.long	.Lset710
.Lset711 = .Ltmp3254-.Ltmp3253          #   Call between .Ltmp3253 and .Ltmp3254
	.long	.Lset711
.Lset712 = .Ltmp3255-.Leh_func_begin528 #     jumps to .Ltmp3255
	.long	.Lset712
	.byte	0                       #   On action: cleanup
.Lset713 = .Ltmp3254-.Leh_func_begin528 # >> Call Site 2 <<
	.long	.Lset713
.Lset714 = .Leh_func_end528-.Ltmp3254   #   Call between .Ltmp3254 and .Leh_func_end528
	.long	.Lset714
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3264:
	.cfi_def_cfa_offset 16
.Ltmp3265:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3266:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3267:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev, .Ltmp3267-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3270:
	.cfi_def_cfa_offset 16
.Ltmp3271:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3272:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3273:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev, .Ltmp3273-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implD2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3276:
	.cfi_def_cfa_offset 16
.Ltmp3277:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3278:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3279:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev, .Ltmp3279-_ZNSaIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3280:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev, .Ltmp3280-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi1EED2Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi1EED2Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi1EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi1EED2Ev,@function
_ZN5sc_dt7sc_uintILi1EED2Ev:            # @_ZN5sc_dt7sc_uintILi1EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3283:
	.cfi_def_cfa_offset 16
.Ltmp3284:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3285:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3286:
	.size	_ZN5sc_dt7sc_uintILi1EED2Ev, .Ltmp3286-_ZN5sc_dt7sc_uintILi1EED2Ev
	.cfi_endproc

	.section	.text._ZN5sc_dt7sc_uintILi3EED2Ev,"axG",@progbits,_ZN5sc_dt7sc_uintILi3EED2Ev,comdat
	.weak	_ZN5sc_dt7sc_uintILi3EED2Ev
	.align	16, 0x90
	.type	_ZN5sc_dt7sc_uintILi3EED2Ev,@function
_ZN5sc_dt7sc_uintILi3EED2Ev:            # @_ZN5sc_dt7sc_uintILi3EED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3289:
	.cfi_def_cfa_offset 16
.Ltmp3290:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3291:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN5sc_dt12sc_uint_baseD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3292:
	.size	_ZN5sc_dt7sc_uintILi3EED2Ev, .Ltmp3292-_ZN5sc_dt7sc_uintILi3EED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_process_handleD2Ev,"axG",@progbits,_ZN7sc_core17sc_process_handleD2Ev,comdat
	.weak	_ZN7sc_core17sc_process_handleD2Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_process_handleD2Ev,@function
_ZN7sc_core17sc_process_handleD2Ev:     # @_ZN7sc_core17sc_process_handleD2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3295:
	.cfi_def_cfa_offset 16
.Ltmp3296:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3297:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, (%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	je	.LBB535_2
# BB#1:
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdi
	callq	_ZN7sc_core12sc_process_b19reference_decrementEv
.LBB535_2:
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3298:
	.size	_ZN7sc_core17sc_process_handleD2Ev, .Ltmp3298-_ZN7sc_core17sc_process_handleD2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core12sc_process_b19reference_decrementEv,"axG",@progbits,_ZN7sc_core12sc_process_b19reference_decrementEv,comdat
	.weak	_ZN7sc_core12sc_process_b19reference_decrementEv
	.align	16, 0x90
	.type	_ZN7sc_core12sc_process_b19reference_decrementEv,@function
_ZN7sc_core12sc_process_b19reference_decrementEv: # @_ZN7sc_core12sc_process_b19reference_decrementEv
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3301:
	.cfi_def_cfa_offset 16
.Ltmp3302:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3303:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	180(%rdi), %eax
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, 180(%rdi)
	cmpl	$0, 180(%rdi)
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	jne	.LBB536_2
# BB#1:
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_process_b14delete_processEv
.LBB536_2:
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3304:
	.size	_ZN7sc_core12sc_process_b19reference_decrementEv, .Ltmp3304-_ZN7sc_core12sc_process_b19reference_decrementEv
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3307:
	.cfi_def_cfa_offset 16
.Ltmp3308:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3309:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-32(%rbp), %rdx
	movq	%rcx, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-8(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rcx
	callq	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3310:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE, .Ltmp3310-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC1ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3313:
	.cfi_def_cfa_offset 16
.Ltmp3314:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3315:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-32(%rbp), %rdx
	movq	%rcx, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core15sc_event_finderC2ERKNS_12sc_port_baseE
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	$_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE+16, (%rcx)
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	%rsi, 24(%rcx)
	movq	%rdx, 16(%rcx)
	addq	$64, %rsp
	popq	%rbp
	ret
.Ltmp3316:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE, .Ltmp3316-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEC2ERKNS_12sc_port_baseEMS2_KFRKNS_8sc_eventEvE
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3319:
	.cfi_def_cfa_offset 16
.Ltmp3320:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3321:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3322:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev, .Ltmp3322-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin540:
	.cfi_lsda 3, .Lexception540
# BB#0:
	pushq	%rbp
.Ltmp3328:
	.cfi_def_cfa_offset 16
.Ltmp3329:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3330:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp3323:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
.Ltmp3324:
	jmp	.LBB540_1
.LBB540_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB540_2:
.Ltmp3325:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3331:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev, .Ltmp3331-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev
	.cfi_endproc
.Leh_func_end540:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table540:
.Lexception540:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset715 = .Ltmp3323-.Leh_func_begin540 # >> Call Site 1 <<
	.long	.Lset715
.Lset716 = .Ltmp3324-.Ltmp3323          #   Call between .Ltmp3323 and .Ltmp3324
	.long	.Lset716
.Lset717 = .Ltmp3325-.Leh_func_begin540 #     jumps to .Ltmp3325
	.long	.Lset717
	.byte	0                       #   On action: cleanup
.Lset718 = .Ltmp3324-.Leh_func_begin540 # >> Call Site 2 <<
	.long	.Lset718
.Lset719 = .Leh_func_end540-.Ltmp3324   #   Call between .Ltmp3324 and .Leh_func_end540
	.long	.Lset719
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE,"axG",@progbits,_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE,comdat
	.weak	_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE
	.align	16, 0x90
	.type	_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE,@function
_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE: # @_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3334:
	.cfi_def_cfa_offset 16
.Ltmp3335:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3336:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$0, -16(%rbp)
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB541_5
# BB#1:
	movq	-16(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	je	.LBB541_3
# BB#2:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-48(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB541_4
.LBB541_3:
	movabsq	$0, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB541_4
.LBB541_4:
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB541_9
.LBB541_5:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core15sc_event_finder4portEv
	movq	(%rax), %rdi
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	-72(%rbp), %rax         # 8-byte Reload
	callq	*120(%rax)
	cmpq	$0, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	je	.LBB541_7
# BB#6:
	leaq	_ZTIN7sc_core12sc_interfaceE, %rax
	leaq	_ZTIN7sc_core15sc_signal_in_ifIbEE, %rcx
	movabsq	$-1, %rdx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-88(%rbp), %rcx         # 8-byte Reload
	callq	__dynamic_cast
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB541_8
.LBB541_7:
	movabsq	$0, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB541_8
.LBB541_8:
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB541_9:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB541_11
# BB#10:
	leaq	_ZN7sc_core17SC_ID_FIND_EVENT_E, %rsi
	leaq	.L.str15, %rdx
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZNK7sc_core15sc_event_finder12report_errorEPKcS2_
.LBB541_11:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	16(%rax), %rcx
	movq	24(%rax), %rdx
	movq	-24(%rbp), %rsi
	addq	%rdx, %rsi
	movq	%rcx, %rdx
	andq	$1, %rdx
	cmpq	$0, %rdx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%rsi, -112(%rbp)        # 8-byte Spill
	je	.LBB541_13
# BB#12:
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	-104(%rbp), %rdx        # 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	jmp	.LBB541_14
.LBB541_13:
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB541_14:
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-112(%rbp), %rdi        # 8-byte Reload
	callq	*%rax
	addq	$128, %rsp
	popq	%rbp
	ret
.Ltmp3337:
	.size	_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE, .Ltmp3337-_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE
	.cfi_endproc

	.section	.text._ZNK7sc_core15sc_event_finder4portEv,"axG",@progbits,_ZNK7sc_core15sc_event_finder4portEv,comdat
	.weak	_ZNK7sc_core15sc_event_finder4portEv
	.align	16, 0x90
	.type	_ZNK7sc_core15sc_event_finder4portEv,@function
_ZNK7sc_core15sc_event_finder4portEv:   # @_ZNK7sc_core15sc_event_finder4portEv
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	movq	-8(%rsp), %rdi
	movq	8(%rdi), %rax
	ret
.Ltmp3338:
	.size	_ZNK7sc_core15sc_event_finder4portEv, .Ltmp3338-_ZNK7sc_core15sc_event_finder4portEv
	.cfi_endproc

	.section	.text._ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev,"axG",@progbits,_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev,comdat
	.weak	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev
	.align	16, 0x90
	.type	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev,@function
_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev: # @_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3341:
	.cfi_def_cfa_offset 16
.Ltmp3342:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3343:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core15sc_event_finderD2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3344:
	.size	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev, .Ltmp3344-_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core5sc_inIbEC2Ev,"axG",@progbits,_ZN7sc_core5sc_inIbEC2Ev,comdat
	.weak	_ZN7sc_core5sc_inIbEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core5sc_inIbEC2Ev,@function
_ZN7sc_core5sc_inIbEC2Ev:               # @_ZN7sc_core5sc_inIbEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3347:
	.cfi_def_cfa_offset 16
.Ltmp3348:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3349:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	leaq	_ZTVN7sc_core5sc_inIbEE, %rax
	addq	$16, %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rax, (%rdi)
	movq	$0, 128(%rdi)
	movq	$0, 136(%rdi)
	movq	$0, 144(%rdi)
	movq	$0, 152(%rdi)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3350:
	.size	_ZN7sc_core5sc_inIbEC2Ev, .Ltmp3350-_ZN7sc_core5sc_inIbEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3353:
	.cfi_def_cfa_offset 16
.Ltmp3354:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3355:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movl	$1, %esi
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE
	leaq	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE, %rcx
	addq	$16, %rcx
	movq	-16(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, (%rdi)
	addq	$32, %rsp
	popq	%rbp
	ret
.Ltmp3356:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev, .Ltmp3356-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEC2Ev
	.cfi_endproc

	.section	.text._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE,"axG",@progbits,_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE,comdat
	.weak	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE
	.align	16, 0x90
	.type	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE,@function
_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE: # @_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin546:
	.cfi_lsda 3, .Lexception546
# BB#0:
	pushq	%rbp
.Ltmp3365:
	.cfi_def_cfa_offset 16
.Ltmp3366:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3367:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$3, %al
	movb	%al, -13(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movzbl	-13(%rbp), %edx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core12sc_port_baseC2EiNS_14sc_port_policyE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	$_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE+16, (%rdi)
	movq	$0, 96(%rdi)
	addq	$104, %rdi
.Ltmp3357:
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev
.Ltmp3358:
	jmp	.LBB546_1
.LBB546_1:
	addq	$64, %rsp
	popq	%rbp
	ret
.LBB546_2:
.Ltmp3359:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
.Ltmp3360:
	movq	-40(%rbp), %rdi         # 8-byte Reload
	callq	_ZN7sc_core12sc_port_baseD2Ev
.Ltmp3361:
	jmp	.LBB546_3
.LBB546_3:
	jmp	.LBB546_4
.LBB546_4:
	movq	-24(%rbp), %rdi
	callq	_Unwind_Resume
.LBB546_5:
.Ltmp3362:
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp3368:
	.size	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE, .Ltmp3368-_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEC2EiNS_14sc_port_policyE
	.cfi_endproc
.Leh_func_end546:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table546:
.Lexception546:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\274"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	52                      # Call site table length
.Lset720 = .Leh_func_begin546-.Leh_func_begin546 # >> Call Site 1 <<
	.long	.Lset720
.Lset721 = .Ltmp3357-.Leh_func_begin546 #   Call between .Leh_func_begin546 and .Ltmp3357
	.long	.Lset721
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset722 = .Ltmp3357-.Leh_func_begin546 # >> Call Site 2 <<
	.long	.Lset722
.Lset723 = .Ltmp3358-.Ltmp3357          #   Call between .Ltmp3357 and .Ltmp3358
	.long	.Lset723
.Lset724 = .Ltmp3359-.Leh_func_begin546 #     jumps to .Ltmp3359
	.long	.Lset724
	.byte	0                       #   On action: cleanup
.Lset725 = .Ltmp3360-.Leh_func_begin546 # >> Call Site 3 <<
	.long	.Lset725
.Lset726 = .Ltmp3361-.Ltmp3360          #   Call between .Ltmp3360 and .Ltmp3361
	.long	.Lset726
.Lset727 = .Ltmp3362-.Leh_func_begin546 #     jumps to .Ltmp3362
	.long	.Lset727
	.byte	1                       #   On action: 1
.Lset728 = .Ltmp3361-.Leh_func_begin546 # >> Call Site 4 <<
	.long	.Lset728
.Lset729 = .Leh_func_end546-.Ltmp3361   #   Call between .Ltmp3361 and .Leh_func_end546
	.long	.Lset729
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text._ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,"axG",@progbits,_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,comdat
	.weak	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.align	16, 0x90
	.type	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv,@function
_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv: # @_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_startproc
# BB#0:
	leaq	.L.str25, %rax
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3369:
	.size	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv, .Ltmp3369-_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3372:
	.cfi_def_cfa_offset 16
.Ltmp3373:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3374:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3375:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev, .Ltmp3375-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.cfi_endproc

	.section	.text._ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,"axG",@progbits,_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,comdat
	.weak	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.align	16, 0x90
	.type	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev,@function
_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev: # @_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin549:
	.cfi_lsda 3, .Lexception549
# BB#0:
	pushq	%rbp
.Ltmp3381:
	.cfi_def_cfa_offset 16
.Ltmp3382:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3383:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
.Ltmp3376:
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
.Ltmp3377:
	jmp	.LBB549_1
.LBB549_1:
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
	addq	$32, %rsp
	popq	%rbp
	ret
.LBB549_2:
.Ltmp3378:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	_ZdlPv
# BB#3:
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.Ltmp3384:
	.size	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev, .Ltmp3384-_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.cfi_endproc
.Leh_func_end549:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table549:
.Lexception549:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\234"                 # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset730 = .Ltmp3376-.Leh_func_begin549 # >> Call Site 1 <<
	.long	.Lset730
.Lset731 = .Ltmp3377-.Ltmp3376          #   Call between .Ltmp3376 and .Ltmp3377
	.long	.Lset731
.Lset732 = .Ltmp3378-.Leh_func_begin549 #     jumps to .Ltmp3378
	.long	.Lset732
	.byte	0                       #   On action: cleanup
.Lset733 = .Ltmp3377-.Leh_func_begin549 # >> Call Site 2 <<
	.long	.Lset733
.Lset734 = .Leh_func_end549-.Ltmp3377   #   Call between .Ltmp3377 and .Leh_func_end549
	.long	.Lset734
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.align	4

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3387:
	.cfi_def_cfa_offset 16
.Ltmp3388:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3389:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3390:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev, .Ltmp3390-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC1Ev
	.cfi_endproc

	.section	.text._ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,"axG",@progbits,_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,comdat
	.weak	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,@function
_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev: # @_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3393:
	.cfi_def_cfa_offset 16
.Ltmp3394:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3395:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3396:
	.size	_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev, .Ltmp3396-_ZNSt6vectorIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3399:
	.cfi_def_cfa_offset 16
.Ltmp3400:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3401:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3402:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev, .Ltmp3402-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EEC2Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3405:
	.cfi_def_cfa_offset 16
.Ltmp3406:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3407:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3408:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev, .Ltmp3408-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC1Ev
	.cfi_endproc

	.section	.text._ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev,comdat
	.weak	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev
	.align	16, 0x90
	.type	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev,@function
_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev: # @_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3411:
	.cfi_def_cfa_offset 16
.Ltmp3412:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3413:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3414:
	.size	_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev, .Ltmp3414-_ZNSt12_Vector_baseIPN7sc_core15sc_signal_in_ifIbEESaIS3_EE12_Vector_implC2Ev
	.cfi_endproc

	.section	.text._ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,"axG",@progbits,_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,comdat
	.weak	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.align	16, 0x90
	.type	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,@function
_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev: # @_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3417:
	.cfi_def_cfa_offset 16
.Ltmp3418:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3419:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp3420:
	.size	_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev, .Ltmp3420-_ZNSaIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.cfi_endproc

	.section	.text._ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,comdat
	.weak	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.align	16, 0x90
	.type	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev,@function
_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev: # @_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.cfi_startproc
# BB#0:
	movq	%rdi, -8(%rsp)
	ret
.Ltmp3421:
	.size	_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev, .Ltmp3421-_ZN9__gnu_cxx13new_allocatorIPN7sc_core15sc_signal_in_ifIbEEEC2Ev
	.cfi_endproc

	.section	.text.startup,"ax",@progbits
	.align	16, 0x90
	.type	_GLOBAL__I_a,@function
_GLOBAL__I_a:                           # @_GLOBAL__I_a
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp3424:
	.cfi_def_cfa_offset 16
.Ltmp3425:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp3426:
	.cfi_def_cfa_register %rbp
	callq	__cxx_global_var_init
	callq	__cxx_global_var_init1
	popq	%rbp
	ret
.Ltmp3427:
	.size	_GLOBAL__I_a, .Ltmp3427-_GLOBAL__I_a
	.cfi_endproc

	.type	_ZStL8__ioinit,@object  # @_ZStL8__ioinit
	.local	_ZStL8__ioinit
	.comm	_ZStL8__ioinit,1,1
	.type	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE,@object # @_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE
	.section	.rodata,"a",@progbits
_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE:
	.byte	1                       # 0x1
	.size	_ZN7sc_coreL26PHASH_DEFAULT_REORDER_FLAGE, 1

	.type	_ZN7sc_coreL17api_version_checkE,@object # @_ZN7sc_coreL17api_version_checkE
	.local	_ZN7sc_coreL17api_version_checkE
	.comm	_ZN7sc_coreL17api_version_checkE,1,1
	.type	_ZTV7WBSlave,@object    # @_ZTV7WBSlave
	.section	.rodata._ZTV7WBSlave,"aG",@progbits,_ZTV7WBSlave,comdat
	.weak	_ZTV7WBSlave
	.align	16
_ZTV7WBSlave:
	.quad	0
	.quad	_ZTI7WBSlave
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core9sc_module4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_module17get_child_objectsEv
	.quad	_ZN7WBSlaveD1Ev
	.quad	_ZN7WBSlaveD0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_module25before_end_of_elaborationEv
	.quad	_ZN7sc_core9sc_module18end_of_elaborationEv
	.quad	_ZN7sc_core9sc_module19start_of_simulationEv
	.quad	_ZN7sc_core9sc_module17end_of_simulationEv
	.quad	-88
	.quad	_ZTI7WBSlave
	.quad	_ZThn88_N7WBSlaveD1Ev
	.quad	_ZThn88_N7WBSlaveD0Ev
	.size	_ZTV7WBSlave, 192

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	 "000"
	.size	.L.str, 4

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	 "001"
	.size	.L.str2, 4

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	 "010"
	.size	.L.str3, 4

	.type	.L.str4,@object         # @.str4
.L.str4:
	.asciz	 "011"
	.size	.L.str4, 4

	.type	.L.str5,@object         # @.str5
.L.str5:
	.asciz	 "100"
	.size	.L.str5, 4

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	 "101"
	.size	.L.str6, 4

	.type	.L.str7,@object         # @.str7
.L.str7:
	.asciz	 "110"
	.size	.L.str7, 4

	.type	.L.str8,@object         # @.str8
.L.str8:
	.asciz	 "111"
	.size	.L.str8, 4

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	 "processBus"
	.size	.L.str9, 11

	.type	.L.str10,@object        # @.str10
.L.str10:
	.asciz	 "processSlave"
	.size	.L.str10, 13

	.type	.L.str11,@object        # @.str11
.L.str11:
	.asciz	 "getLog"
	.size	.L.str11, 7

	.type	_ZZN7WBSlave6getLogEvE9offsetLUT,@object # @_ZZN7WBSlave6getLogEvE9offsetLUT
	.data
	.align	16
_ZZN7WBSlave6getLogEvE9offsetLUT:
	.long	3241969977              # float -1.178350e+01
	.long	3241243160              # float -1.109035e+01
	.long	3240516342              # float -1.039721e+01
	.long	3240091182              # float -9.991743e+00
	.long	3239789525              # float -9.704061e+00
	.long	3239364364              # float -9.298595e+00
	.long	3239062709              # float -9.010915e+00
	.long	3238637547              # float -8.605449e+00
	.long	3238335893              # float -8.317769e+00
	.long	3237818774              # float -7.912303e+00
	.long	3237215458              # float -7.624619e+00
	.long	3236365138              # float -7.219155e+00
	.long	3235761819              # float -6.931470e+00
	.long	3235331331              # float -6.726198e+00
	.long	3234911498              # float -6.526006e+00
	.long	3234667351              # float -6.409587e+00
	.long	3234308187              # float -6.238325e+00
	.long	3234011441              # float -6.096825e+00
	.long	3233457864              # float -5.832859e+00
	.long	3233408128              # float -5.809143e+00
	.long	3232854552              # float -5.545177e+00
	.long	3232557806              # float -5.403678e+00
	.long	3232004230              # float -5.139712e+00
	.long	3231847277              # float -5.064871e+00
	.long	3231400917              # float -4.852030e+00
	.long	3231020657              # float -4.670708e+00
	.long	3230550595              # float -4.446565e+00
	.long	3230294100              # float -4.324259e+00
	.long	3229947282              # float -4.158883e+00
	.long	3229245078              # float -3.912023e+00
	.long	3228579840              # float -3.753418e+00
	.long	3228309146              # float -3.688879e+00
	.long	3227585810              # float -3.516423e+00
	.long	3226758296              # float -3.319128e+00
	.long	3225233638              # float -2.955621e+00
	.long	3224999422              # float -2.899780e+00
	.size	_ZZN7WBSlave6getLogEvE9offsetLUT, 144

	.type	_ZZN7WBSlave6getLogEvE11gradientLUT,@object # @_ZZN7WBSlave6getLogEvE11gradientLUT
	.align	16
_ZZN7WBSlave6getLogEvE11gradientLUT:
	.long	1194422808              # float 4.542609e+04
	.long	1186034200              # float 2.271305e+04
	.long	1177645592              # float 1.135652e+04
	.long	1173133344              # float 7.571016e+03
	.long	1169256984              # float 5.678262e+03
	.long	1164744736              # float 3.785508e+03
	.long	1160868393              # float 2.839135e+03
	.long	1156356143              # float 1.892756e+03
	.long	1152479798              # float 1.419569e+03
	.long	1147967554              # float 9.463790e+02
	.long	1144091157              # float 7.097825e+02
	.long	1139578922              # float 4.731888e+02
	.long	1135702539              # float 3.548910e+02
	.long	1133703769              # float 2.938933e+02
	.long	1131190291              # float 2.365940e+02
	.long	1129814334              # float 2.155986e+02
	.long	1127313944              # float 1.774457e+02
	.long	1125779551              # float 1.540327e+02
	.long	1122801690              # float 1.182971e+02
	.long	1122438287              # float 1.155245e+02
	.long	1118925336              # float 8.872284e+01
	.long	1117390943              # float 7.701635e+01
	.long	1114413088              # float 5.914856e+01
	.long	1112932848              # float 5.350189e+01
	.long	1110536728              # float 4.436142e+01
	.long	1108422375              # float 3.629580e+01
	.long	1106024480              # float 2.957428e+01
	.long	1104449652              # float 2.657053e+01
	.long	1102148120              # float 2.218071e+01
	.long	1099604259              # float 1.732868e+01
	.long	1097635872              # float 1.478714e+01
	.long	1096666782              # float 1.386294e+01
	.long	1094609895              # float 1.190134e+01
	.long	1092529675              # float 9.917491e+00
	.long	1086906291              # float 6.277307e+00
	.long	1086265904              # float 5.971947e+00
	.size	_ZZN7WBSlave6getLogEvE11gradientLUT, 144

	.type	_ZZN7WBSlave6getLogEvE6logLUT,@object # @_ZZN7WBSlave6getLogEvE6logLUT
	.align	16
_ZZN7WBSlave6getLogEvE6logLUT:
	.long	3241243160              # float -1.109035e+01
	.long	3240516342              # float -1.039721e+01
	.long	3239789525              # float -9.704061e+00
	.long	3239364364              # float -9.298595e+00
	.long	3239062707              # float -9.010913e+00
	.long	3238637547              # float -8.605449e+00
	.long	3238335890              # float -8.317766e+00
	.long	3237818770              # float -7.912301e+00
	.long	3237215462              # float -7.624621e+00
	.long	3236365139              # float -7.219156e+00
	.long	3235761827              # float -6.931474e+00
	.long	3234911505              # float -6.526009e+00
	.long	3234308182              # float -6.238322e+00
	.long	3233790484              # float -5.991465e+00
	.long	3233457863              # float -5.832859e+00
	.long	3233084850              # float -5.654992e+00
	.long	3232854552              # float -5.545177e+00
	.long	3232557806              # float -5.403678e+00
	.long	3232004228              # float -5.139711e+00
	.long	3231954493              # float -5.115996e+00
	.long	3231400917              # float -4.852030e+00
	.long	3231104171              # float -4.710531e+00
	.long	3230550595              # float -4.446565e+00
	.long	3230500858              # float -4.422849e+00
	.long	3229947282              # float -4.158883e+00
	.long	3229650536              # float -4.017384e+00
	.long	3228579840              # float -3.753418e+00
	.long	3227909386              # float -3.593569e+00
	.long	3227373214              # float -3.465736e+00
	.long	3226337808              # float -3.218876e+00
	.long	3225672570              # float -3.060271e+00
	.long	3225401876              # float -2.995732e+00
	.long	3224465944              # float -2.772589e+00
	.long	3223430538              # float -2.525729e+00
	.long	3222765300              # float -2.367124e+00
	.long	3222494606              # float -2.302585e+00
	.size	_ZZN7WBSlave6getLogEvE6logLUT, 144

	.type	_ZZN7WBSlave6getLogEvE8inputLUT,@object # @_ZZN7WBSlave6getLogEvE8inputLUT
	.align	16
_ZZN7WBSlave6getLogEvE8inputLUT:
	.long	931135488               # float 1.525879e-05
	.long	939524096               # float 3.051758e-05
	.long	947912704               # float 6.103516e-05
	.long	952107008               # float 9.155273e-05
	.long	956301312               # float 1.220703e-04
	.long	960495616               # float 1.831055e-04
	.long	964689920               # float 2.441406e-04
	.long	968884224               # float 3.662109e-04
	.long	973078485               # float 4.882800e-04
	.long	977272810               # float 7.324206e-04
	.long	981467093               # float 9.765600e-04
	.long	985661408               # float 1.464840e-03
	.long	989855765               # float 1.953130e-03
	.long	992204554               # float 2.500000e-03
	.long	994050059               # float 2.929690e-03
	.long	996499522               # float 3.500000e-03
	.long	998244352               # float 3.906250e-03
	.long	999519420               # float 4.500000e-03
	.long	1002438667              # float 5.859380e-03
	.long	1002740646              # float 6.000000e-03
	.long	1006632960              # float 7.812500e-03
	.long	1007908028              # float 9.000000e-03
	.long	1010827264              # float 1.171875e-02
	.long	1011129254              # float 1.200000e-02
	.long	1015021568              # float 1.562500e-02
	.long	1016296636              # float 1.800000e-02
	.long	1019215872              # float 2.343750e-02
	.long	1021396910              # float 2.750000e-02
	.long	1023410176              # float 3.125000e-02
	.long	1025758986              # float 4.000000e-02
	.long	1027604480              # float 4.687500e-02
	.long	1028443341              # float 5.000000e-02
	.long	1031798784              # float 6.250000e-02
	.long	1034147594              # float 8.000000e-02
	.long	1035993088              # float 9.375000e-02
	.long	1036831949              # float 1.000000e-01
	.size	_ZZN7WBSlave6getLogEvE8inputLUT, 144

	.type	.L.str12,@object        # @.str12
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str12:
	.asciz	 "Threshold is found to be "
	.size	.L.str12, 26

	.type	.L.str13,@object        # @.str13
.L.str13:
	.asciz	 "\n"
	.size	.L.str13, 2

	.type	_ZTVN5sc_dt17sc_fxval_observerE,@object # @_ZTVN5sc_dt17sc_fxval_observerE
	.section	.rodata._ZTVN5sc_dt17sc_fxval_observerE,"aG",@progbits,_ZTVN5sc_dt17sc_fxval_observerE,comdat
	.weak	_ZTVN5sc_dt17sc_fxval_observerE
	.align	16
_ZTVN5sc_dt17sc_fxval_observerE:
	.quad	0
	.quad	_ZTIN5sc_dt17sc_fxval_observerE
	.quad	_ZN5sc_dt17sc_fxval_observerD1Ev
	.quad	_ZN5sc_dt17sc_fxval_observerD0Ev
	.quad	_ZN5sc_dt17sc_fxval_observer9constructERKNS_8sc_fxvalE
	.quad	_ZN5sc_dt17sc_fxval_observer8destructERKNS_8sc_fxvalE
	.quad	_ZN5sc_dt17sc_fxval_observer4readERKNS_8sc_fxvalE
	.quad	_ZN5sc_dt17sc_fxval_observer5writeERKNS_8sc_fxvalE
	.size	_ZTVN5sc_dt17sc_fxval_observerE, 64

	.type	_ZTSN5sc_dt17sc_fxval_observerE,@object # @_ZTSN5sc_dt17sc_fxval_observerE
	.section	.rodata._ZTSN5sc_dt17sc_fxval_observerE,"aG",@progbits,_ZTSN5sc_dt17sc_fxval_observerE,comdat
	.weak	_ZTSN5sc_dt17sc_fxval_observerE
	.align	16
_ZTSN5sc_dt17sc_fxval_observerE:
	.asciz	 "N5sc_dt17sc_fxval_observerE"
	.size	_ZTSN5sc_dt17sc_fxval_observerE, 28

	.type	_ZTIN5sc_dt17sc_fxval_observerE,@object # @_ZTIN5sc_dt17sc_fxval_observerE
	.section	.rodata._ZTIN5sc_dt17sc_fxval_observerE,"aG",@progbits,_ZTIN5sc_dt17sc_fxval_observerE,comdat
	.weak	_ZTIN5sc_dt17sc_fxval_observerE
	.align	8
_ZTIN5sc_dt17sc_fxval_observerE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN5sc_dt17sc_fxval_observerE
	.size	_ZTIN5sc_dt17sc_fxval_observerE, 16

	.type	_ZTVN5sc_dt22sc_fxval_fast_observerE,@object # @_ZTVN5sc_dt22sc_fxval_fast_observerE
	.section	.rodata._ZTVN5sc_dt22sc_fxval_fast_observerE,"aG",@progbits,_ZTVN5sc_dt22sc_fxval_fast_observerE,comdat
	.weak	_ZTVN5sc_dt22sc_fxval_fast_observerE
	.align	16
_ZTVN5sc_dt22sc_fxval_fast_observerE:
	.quad	0
	.quad	_ZTIN5sc_dt22sc_fxval_fast_observerE
	.quad	_ZN5sc_dt22sc_fxval_fast_observerD1Ev
	.quad	_ZN5sc_dt22sc_fxval_fast_observerD0Ev
	.quad	_ZN5sc_dt22sc_fxval_fast_observer9constructERKNS_13sc_fxval_fastE
	.quad	_ZN5sc_dt22sc_fxval_fast_observer8destructERKNS_13sc_fxval_fastE
	.quad	_ZN5sc_dt22sc_fxval_fast_observer4readERKNS_13sc_fxval_fastE
	.quad	_ZN5sc_dt22sc_fxval_fast_observer5writeERKNS_13sc_fxval_fastE
	.size	_ZTVN5sc_dt22sc_fxval_fast_observerE, 64

	.type	_ZTSN5sc_dt22sc_fxval_fast_observerE,@object # @_ZTSN5sc_dt22sc_fxval_fast_observerE
	.section	.rodata._ZTSN5sc_dt22sc_fxval_fast_observerE,"aG",@progbits,_ZTSN5sc_dt22sc_fxval_fast_observerE,comdat
	.weak	_ZTSN5sc_dt22sc_fxval_fast_observerE
	.align	16
_ZTSN5sc_dt22sc_fxval_fast_observerE:
	.asciz	 "N5sc_dt22sc_fxval_fast_observerE"
	.size	_ZTSN5sc_dt22sc_fxval_fast_observerE, 33

	.type	_ZTIN5sc_dt22sc_fxval_fast_observerE,@object # @_ZTIN5sc_dt22sc_fxval_fast_observerE
	.section	.rodata._ZTIN5sc_dt22sc_fxval_fast_observerE,"aG",@progbits,_ZTIN5sc_dt22sc_fxval_fast_observerE,comdat
	.weak	_ZTIN5sc_dt22sc_fxval_fast_observerE
	.align	8
_ZTIN5sc_dt22sc_fxval_fast_observerE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN5sc_dt22sc_fxval_fast_observerE
	.size	_ZTIN5sc_dt22sc_fxval_fast_observerE, 16

	.type	_ZTVN5sc_dt17sc_fxnum_observerE,@object # @_ZTVN5sc_dt17sc_fxnum_observerE
	.section	.rodata._ZTVN5sc_dt17sc_fxnum_observerE,"aG",@progbits,_ZTVN5sc_dt17sc_fxnum_observerE,comdat
	.weak	_ZTVN5sc_dt17sc_fxnum_observerE
	.align	16
_ZTVN5sc_dt17sc_fxnum_observerE:
	.quad	0
	.quad	_ZTIN5sc_dt17sc_fxnum_observerE
	.quad	_ZN5sc_dt17sc_fxnum_observerD1Ev
	.quad	_ZN5sc_dt17sc_fxnum_observerD0Ev
	.quad	_ZN5sc_dt17sc_fxnum_observer9constructERKNS_8sc_fxnumE
	.quad	_ZN5sc_dt17sc_fxnum_observer8destructERKNS_8sc_fxnumE
	.quad	_ZN5sc_dt17sc_fxnum_observer4readERKNS_8sc_fxnumE
	.quad	_ZN5sc_dt17sc_fxnum_observer5writeERKNS_8sc_fxnumE
	.size	_ZTVN5sc_dt17sc_fxnum_observerE, 64

	.type	_ZTSN5sc_dt17sc_fxnum_observerE,@object # @_ZTSN5sc_dt17sc_fxnum_observerE
	.section	.rodata._ZTSN5sc_dt17sc_fxnum_observerE,"aG",@progbits,_ZTSN5sc_dt17sc_fxnum_observerE,comdat
	.weak	_ZTSN5sc_dt17sc_fxnum_observerE
	.align	16
_ZTSN5sc_dt17sc_fxnum_observerE:
	.asciz	 "N5sc_dt17sc_fxnum_observerE"
	.size	_ZTSN5sc_dt17sc_fxnum_observerE, 28

	.type	_ZTIN5sc_dt17sc_fxnum_observerE,@object # @_ZTIN5sc_dt17sc_fxnum_observerE
	.section	.rodata._ZTIN5sc_dt17sc_fxnum_observerE,"aG",@progbits,_ZTIN5sc_dt17sc_fxnum_observerE,comdat
	.weak	_ZTIN5sc_dt17sc_fxnum_observerE
	.align	8
_ZTIN5sc_dt17sc_fxnum_observerE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN5sc_dt17sc_fxnum_observerE
	.size	_ZTIN5sc_dt17sc_fxnum_observerE, 16

	.type	_ZTVN5sc_dt22sc_fxnum_fast_observerE,@object # @_ZTVN5sc_dt22sc_fxnum_fast_observerE
	.section	.rodata._ZTVN5sc_dt22sc_fxnum_fast_observerE,"aG",@progbits,_ZTVN5sc_dt22sc_fxnum_fast_observerE,comdat
	.weak	_ZTVN5sc_dt22sc_fxnum_fast_observerE
	.align	16
_ZTVN5sc_dt22sc_fxnum_fast_observerE:
	.quad	0
	.quad	_ZTIN5sc_dt22sc_fxnum_fast_observerE
	.quad	_ZN5sc_dt22sc_fxnum_fast_observerD1Ev
	.quad	_ZN5sc_dt22sc_fxnum_fast_observerD0Ev
	.quad	_ZN5sc_dt22sc_fxnum_fast_observer9constructERKNS_13sc_fxnum_fastE
	.quad	_ZN5sc_dt22sc_fxnum_fast_observer8destructERKNS_13sc_fxnum_fastE
	.quad	_ZN5sc_dt22sc_fxnum_fast_observer4readERKNS_13sc_fxnum_fastE
	.quad	_ZN5sc_dt22sc_fxnum_fast_observer5writeERKNS_13sc_fxnum_fastE
	.size	_ZTVN5sc_dt22sc_fxnum_fast_observerE, 64

	.type	_ZTSN5sc_dt22sc_fxnum_fast_observerE,@object # @_ZTSN5sc_dt22sc_fxnum_fast_observerE
	.section	.rodata._ZTSN5sc_dt22sc_fxnum_fast_observerE,"aG",@progbits,_ZTSN5sc_dt22sc_fxnum_fast_observerE,comdat
	.weak	_ZTSN5sc_dt22sc_fxnum_fast_observerE
	.align	16
_ZTSN5sc_dt22sc_fxnum_fast_observerE:
	.asciz	 "N5sc_dt22sc_fxnum_fast_observerE"
	.size	_ZTSN5sc_dt22sc_fxnum_fast_observerE, 33

	.type	_ZTIN5sc_dt22sc_fxnum_fast_observerE,@object # @_ZTIN5sc_dt22sc_fxnum_fast_observerE
	.section	.rodata._ZTIN5sc_dt22sc_fxnum_fast_observerE,"aG",@progbits,_ZTIN5sc_dt22sc_fxnum_fast_observerE,comdat
	.weak	_ZTIN5sc_dt22sc_fxnum_fast_observerE
	.align	8
_ZTIN5sc_dt22sc_fxnum_fast_observerE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN5sc_dt22sc_fxnum_fast_observerE
	.size	_ZTIN5sc_dt22sc_fxnum_fast_observerE, 16

	.type	_ZTVN7sc_core18sc_process_monitorE,@object # @_ZTVN7sc_core18sc_process_monitorE
	.section	.rodata._ZTVN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTVN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTVN7sc_core18sc_process_monitorE
	.align	16
_ZTVN7sc_core18sc_process_monitorE:
	.quad	0
	.quad	_ZTIN7sc_core18sc_process_monitorE
	.quad	_ZN7sc_core18sc_process_monitorD1Ev
	.quad	_ZN7sc_core18sc_process_monitorD0Ev
	.quad	_ZN7sc_core18sc_process_monitor6signalEPNS_17sc_thread_processEi
	.size	_ZTVN7sc_core18sc_process_monitorE, 40

	.type	_ZTSN7sc_core18sc_process_monitorE,@object # @_ZTSN7sc_core18sc_process_monitorE
	.section	.rodata._ZTSN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTSN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTSN7sc_core18sc_process_monitorE
	.align	16
_ZTSN7sc_core18sc_process_monitorE:
	.asciz	 "N7sc_core18sc_process_monitorE"
	.size	_ZTSN7sc_core18sc_process_monitorE, 31

	.type	_ZTIN7sc_core18sc_process_monitorE,@object # @_ZTIN7sc_core18sc_process_monitorE
	.section	.rodata._ZTIN7sc_core18sc_process_monitorE,"aG",@progbits,_ZTIN7sc_core18sc_process_monitorE,comdat
	.weak	_ZTIN7sc_core18sc_process_monitorE
	.align	8
_ZTIN7sc_core18sc_process_monitorE:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_process_monitorE
	.size	_ZTIN7sc_core18sc_process_monitorE, 16

	.type	_ZTS7WBSlave,@object    # @_ZTS7WBSlave
	.section	.rodata._ZTS7WBSlave,"aG",@progbits,_ZTS7WBSlave,comdat
	.weak	_ZTS7WBSlave
_ZTS7WBSlave:
	.asciz	 "7WBSlave"
	.size	_ZTS7WBSlave, 9

	.type	_ZTI7WBSlave,@object    # @_ZTI7WBSlave
	.section	.rodata._ZTI7WBSlave,"aG",@progbits,_ZTI7WBSlave,comdat
	.weak	_ZTI7WBSlave
	.align	16
_ZTI7WBSlave:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTS7WBSlave
	.quad	_ZTIN7sc_core9sc_moduleE
	.size	_ZTI7WBSlave, 24

	.type	.L.str14,@object        # @.str14
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str14:
	.asciz	 "sc_module"
	.size	.L.str14, 10

	.type	.L.str15,@object        # @.str15
.L.str15:
	.asciz	 "port is not bound"
	.size	.L.str15, 18

	.type	_ZTVN5sc_dt7sc_uintILi32EEE,@object # @_ZTVN5sc_dt7sc_uintILi32EEE
	.section	.rodata._ZTVN5sc_dt7sc_uintILi32EEE,"aG",@progbits,_ZTVN5sc_dt7sc_uintILi32EEE,comdat
	.weak	_ZTVN5sc_dt7sc_uintILi32EEE
	.align	16
_ZTVN5sc_dt7sc_uintILi32EEE:
	.quad	0
	.quad	_ZTIN5sc_dt7sc_uintILi32EEE
	.quad	_ZN5sc_dt13sc_value_base17concat_clear_dataEb
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_ctrlEPji
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_dataEPji
	.quad	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.quad	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.quad	_ZN5sc_dt12sc_uint_base10concat_setExi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_9sc_signedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_11sc_unsignedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setEyi
	.quad	_ZN5sc_dt7sc_uintILi32EED1Ev
	.quad	_ZN5sc_dt7sc_uintILi32EED0Ev
	.size	_ZTVN5sc_dt7sc_uintILi32EEE, 104

	.type	_ZTSN5sc_dt7sc_uintILi32EEE,@object # @_ZTSN5sc_dt7sc_uintILi32EEE
	.section	.rodata._ZTSN5sc_dt7sc_uintILi32EEE,"aG",@progbits,_ZTSN5sc_dt7sc_uintILi32EEE,comdat
	.weak	_ZTSN5sc_dt7sc_uintILi32EEE
	.align	16
_ZTSN5sc_dt7sc_uintILi32EEE:
	.asciz	 "N5sc_dt7sc_uintILi32EEE"
	.size	_ZTSN5sc_dt7sc_uintILi32EEE, 24

	.type	_ZTIN5sc_dt7sc_uintILi32EEE,@object # @_ZTIN5sc_dt7sc_uintILi32EEE
	.section	.rodata._ZTIN5sc_dt7sc_uintILi32EEE,"aG",@progbits,_ZTIN5sc_dt7sc_uintILi32EEE,comdat
	.weak	_ZTIN5sc_dt7sc_uintILi32EEE
	.align	16
_ZTIN5sc_dt7sc_uintILi32EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN5sc_dt7sc_uintILi32EEE
	.quad	_ZTIN5sc_dt12sc_uint_baseE
	.size	_ZTIN5sc_dt7sc_uintILi32EEE, 24

	.type	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE:
	.quad	0
	.quad	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED1Ev
	.quad	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, 248

	.type	_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, 45

	.type	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 97

	.type	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE, 72

	.type	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE, 24

	.type	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.size	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE, 24

	.type	.L.str16,@object        # @.str16
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str16:
	.asciz	 "iface_p != 0"
	.size	.L.str16, 13

	.type	.L.str17,@object        # @.str17
.L.str17:
	.asciz	 "/opt/eds/Xilinx/Vivado_HLS/2014.4/lnx64/tools/systemc/include/sysc/communication/sc_port.h"
	.size	.L.str17, 91

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> > >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 207

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> > >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 207

	.type	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, 53

	.type	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE, 40

	.type	_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, 56

	.type	_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE, 56

	.type	_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE, 40

	.type	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE
	.long	2                       # 0x2
	.long	2                       # 0x2
	.quad	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEE
	.quad	2                       # 0x2
	.quad	_ZTIN7sc_core18sc_signal_write_ifIN5sc_dt7sc_uintILi32EEEEE
	.quad	2050                    # 0x802
	.size	_ZTIN7sc_core18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEE, 56

	.type	.L.str18,@object        # @.str18
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str18:
	.asciz	 "iface != 0"
	.size	.L.str18, 11

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> > >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_inout_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, 179

	.type	.L.str19,@object        # @.str19
.L.str19:
	.asciz	 "interface already bound to port"
	.size	.L.str19, 32

	.type	.L.str20,@object        # @.str20
.L.str20:
	.asciz	 "vector::_M_insert_aux"
	.size	.L.str20, 22

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	 "sc_inout"
	.size	.L.str21, 9

	.type	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEEE, 248

	.type	.L.str22,@object        # @.str22
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str22:
	.asciz	 "sc_port_base"
	.size	.L.str22, 13

	.type	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE:
	.quad	0
	.quad	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED1Ev
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE, 272

	.type	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE:
	.asciz	 "N7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE"
	.size	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE, 41

	.type	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 93

	.type	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE, 68

	.type	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE, 24

	.type	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.size	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi4EEEEE, 24

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<4> > >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<4> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 199

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<4> > >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<4> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 199

	.type	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE:
	.asciz	 "N7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE"
	.size	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, 52

	.type	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,@object # @_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.section	.rodata._ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,"aG",@progbits,_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE,comdat
	.weak	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.align	16
_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEE, 40

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<4> > >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<4> >]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE, 171

	.type	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 96

	.type	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE, 71

	.type	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE, 24

	.type	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.size	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	.L.str23,@object        # @.str23
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str23:
	.asciz	 "sc_in"
	.size	.L.str23, 6

	.type	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.size	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEEE, 248

	.type	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE:
	.quad	0
	.quad	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED1Ev
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_15sc_signal_in_ifIS3_EE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_9sc_port_bINS_15sc_signal_in_ifIS3_EEEE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERKNS_15sc_signal_in_ifIS3_EE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_15sc_signal_in_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEE4bindERNS_7sc_portINS_18sc_signal_inout_ifIS3_EELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTVN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE, 272

	.type	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE, 42

	.type	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 94

	.type	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE, 69

	.type	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE, 24

	.type	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.size	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.size	_ZTIN7sc_core5sc_inIN5sc_dt7sc_uintILi32EEEEE, 24

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<32> > >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 201

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<32> > >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 201

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_uint<32> > >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_in_if<sc_dt::sc_uint<32> >]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE, 173

	.type	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEEE, 248

	.type	_ZTVN5sc_dt7sc_uintILi1EEE,@object # @_ZTVN5sc_dt7sc_uintILi1EEE
	.section	.rodata._ZTVN5sc_dt7sc_uintILi1EEE,"aG",@progbits,_ZTVN5sc_dt7sc_uintILi1EEE,comdat
	.weak	_ZTVN5sc_dt7sc_uintILi1EEE
	.align	16
_ZTVN5sc_dt7sc_uintILi1EEE:
	.quad	0
	.quad	_ZTIN5sc_dt7sc_uintILi1EEE
	.quad	_ZN5sc_dt13sc_value_base17concat_clear_dataEb
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_ctrlEPji
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_dataEPji
	.quad	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.quad	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.quad	_ZN5sc_dt12sc_uint_base10concat_setExi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_9sc_signedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_11sc_unsignedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setEyi
	.quad	_ZN5sc_dt7sc_uintILi1EED1Ev
	.quad	_ZN5sc_dt7sc_uintILi1EED0Ev
	.size	_ZTVN5sc_dt7sc_uintILi1EEE, 104

	.type	_ZTSN5sc_dt7sc_uintILi1EEE,@object # @_ZTSN5sc_dt7sc_uintILi1EEE
	.section	.rodata._ZTSN5sc_dt7sc_uintILi1EEE,"aG",@progbits,_ZTSN5sc_dt7sc_uintILi1EEE,comdat
	.weak	_ZTSN5sc_dt7sc_uintILi1EEE
	.align	16
_ZTSN5sc_dt7sc_uintILi1EEE:
	.asciz	 "N5sc_dt7sc_uintILi1EEE"
	.size	_ZTSN5sc_dt7sc_uintILi1EEE, 23

	.type	_ZTIN5sc_dt7sc_uintILi1EEE,@object # @_ZTIN5sc_dt7sc_uintILi1EEE
	.section	.rodata._ZTIN5sc_dt7sc_uintILi1EEE,"aG",@progbits,_ZTIN5sc_dt7sc_uintILi1EEE,comdat
	.weak	_ZTIN5sc_dt7sc_uintILi1EEE
	.align	16
_ZTIN5sc_dt7sc_uintILi1EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN5sc_dt7sc_uintILi1EEE
	.quad	_ZTIN5sc_dt12sc_uint_baseE
	.size	_ZTIN5sc_dt7sc_uintILi1EEE, 24

	.type	_ZTVN7sc_core6sc_outIbEE,@object # @_ZTVN7sc_core6sc_outIbEE
	.section	.rodata._ZTVN7sc_core6sc_outIbEE,"aG",@progbits,_ZTVN7sc_core6sc_outIbEE,comdat
	.weak	_ZTVN7sc_core6sc_outIbEE
	.align	16
_ZTVN7sc_core6sc_outIbEE:
	.quad	0
	.quad	_ZTIN7sc_core6sc_outIbEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core6sc_outIbE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core6sc_outIbED1Ev
	.quad	_ZN7sc_core6sc_outIbED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core8sc_inoutIbE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core6sc_outIbEE, 248

	.type	_ZTSN7sc_core6sc_outIbEE,@object # @_ZTSN7sc_core6sc_outIbEE
	.section	.rodata._ZTSN7sc_core6sc_outIbEE,"aG",@progbits,_ZTSN7sc_core6sc_outIbEE,comdat
	.weak	_ZTSN7sc_core6sc_outIbEE
	.align	16
_ZTSN7sc_core6sc_outIbEE:
	.asciz	 "N7sc_core6sc_outIbEE"
	.size	_ZTSN7sc_core6sc_outIbEE, 21

	.type	_ZTIN7sc_core6sc_outIbEE,@object # @_ZTIN7sc_core6sc_outIbEE
	.section	.rodata._ZTIN7sc_core6sc_outIbEE,"aG",@progbits,_ZTIN7sc_core6sc_outIbEE,comdat
	.weak	_ZTIN7sc_core6sc_outIbEE
	.align	16
_ZTIN7sc_core6sc_outIbEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core6sc_outIbEE
	.quad	_ZTIN7sc_core8sc_inoutIbEE
	.size	_ZTIN7sc_core6sc_outIbEE, 24

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool> >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_inout_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 177

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool> >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_inout_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 177

	.type	_ZTSN7sc_core18sc_signal_inout_ifIbEE,@object # @_ZTSN7sc_core18sc_signal_inout_ifIbEE
	.section	.rodata._ZTSN7sc_core18sc_signal_inout_ifIbEE,"aG",@progbits,_ZTSN7sc_core18sc_signal_inout_ifIbEE,comdat
	.weak	_ZTSN7sc_core18sc_signal_inout_ifIbEE
	.align	16
_ZTSN7sc_core18sc_signal_inout_ifIbEE:
	.asciz	 "N7sc_core18sc_signal_inout_ifIbEE"
	.size	_ZTSN7sc_core18sc_signal_inout_ifIbEE, 34

	.type	_ZTSN7sc_core15sc_signal_in_ifIbEE,@object # @_ZTSN7sc_core15sc_signal_in_ifIbEE
	.section	.rodata._ZTSN7sc_core15sc_signal_in_ifIbEE,"aG",@progbits,_ZTSN7sc_core15sc_signal_in_ifIbEE,comdat
	.weak	_ZTSN7sc_core15sc_signal_in_ifIbEE
	.align	16
_ZTSN7sc_core15sc_signal_in_ifIbEE:
	.asciz	 "N7sc_core15sc_signal_in_ifIbEE"
	.size	_ZTSN7sc_core15sc_signal_in_ifIbEE, 31

	.type	_ZTIN7sc_core15sc_signal_in_ifIbEE,@object # @_ZTIN7sc_core15sc_signal_in_ifIbEE
	.section	.rodata._ZTIN7sc_core15sc_signal_in_ifIbEE,"aG",@progbits,_ZTIN7sc_core15sc_signal_in_ifIbEE,comdat
	.weak	_ZTIN7sc_core15sc_signal_in_ifIbEE
	.align	16
_ZTIN7sc_core15sc_signal_in_ifIbEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core15sc_signal_in_ifIbEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core15sc_signal_in_ifIbEE, 40

	.type	_ZTSN7sc_core18sc_signal_write_ifIbEE,@object # @_ZTSN7sc_core18sc_signal_write_ifIbEE
	.section	.rodata._ZTSN7sc_core18sc_signal_write_ifIbEE,"aG",@progbits,_ZTSN7sc_core18sc_signal_write_ifIbEE,comdat
	.weak	_ZTSN7sc_core18sc_signal_write_ifIbEE
	.align	16
_ZTSN7sc_core18sc_signal_write_ifIbEE:
	.asciz	 "N7sc_core18sc_signal_write_ifIbEE"
	.size	_ZTSN7sc_core18sc_signal_write_ifIbEE, 34

	.type	_ZTIN7sc_core18sc_signal_write_ifIbEE,@object # @_ZTIN7sc_core18sc_signal_write_ifIbEE
	.section	.rodata._ZTIN7sc_core18sc_signal_write_ifIbEE,"aG",@progbits,_ZTIN7sc_core18sc_signal_write_ifIbEE,comdat
	.weak	_ZTIN7sc_core18sc_signal_write_ifIbEE
	.align	16
_ZTIN7sc_core18sc_signal_write_ifIbEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_signal_write_ifIbEE
	.long	0                       # 0x0
	.long	1                       # 0x1
	.quad	_ZTIN7sc_core12sc_interfaceE
	.quad	-12285                  # 0xffffffffffffd003
	.size	_ZTIN7sc_core18sc_signal_write_ifIbEE, 40

	.type	_ZTIN7sc_core18sc_signal_inout_ifIbEE,@object # @_ZTIN7sc_core18sc_signal_inout_ifIbEE
	.section	.rodata._ZTIN7sc_core18sc_signal_inout_ifIbEE,"aG",@progbits,_ZTIN7sc_core18sc_signal_inout_ifIbEE,comdat
	.weak	_ZTIN7sc_core18sc_signal_inout_ifIbEE
	.align	16
_ZTIN7sc_core18sc_signal_inout_ifIbEE:
	.quad	_ZTVN10__cxxabiv121__vmi_class_type_infoE+16
	.quad	_ZTSN7sc_core18sc_signal_inout_ifIbEE
	.long	2                       # 0x2
	.long	2                       # 0x2
	.quad	_ZTIN7sc_core15sc_signal_in_ifIbEE
	.quad	2                       # 0x2
	.quad	_ZTIN7sc_core18sc_signal_write_ifIbEE
	.quad	2050                    # 0x802
	.size	_ZTIN7sc_core18sc_signal_inout_ifIbEE, 56

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool> >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_inout_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, 149

	.type	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE, 50

	.type	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE, 24

	.type	.L.str24,@object        # @.str24
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str24:
	.asciz	 "sc_out"
	.size	.L.str24, 7

	.type	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE, 75

	.type	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.size	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIbEELi1ELNS_14sc_port_policyE0EEE, 24

	.type	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core9sc_port_bINS_18sc_signal_inout_ifIbEEEE, 248

	.type	.L.str25,@object        # @.str25
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str25:
	.asciz	 "sc_port"
	.size	.L.str25, 8

	.type	_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE:
	.quad	0
	.quad	_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED1Ev
	.quad	_ZN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEE18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE, 248

	.type	_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE:
	.asciz	 "N7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE"
	.size	_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE, 43

	.type	_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,@object # @_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.section	.rodata._ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,"aG",@progbits,_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE,comdat
	.weak	_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.align	16
_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE
	.quad	_ZTIN7sc_core8sc_inoutIN5sc_dt7sc_uintILi32EEEEE
	.size	_ZTIN7sc_core6sc_outIN5sc_dt7sc_uintILi32EEEEE, 24

	.type	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core7sc_portINS_18sc_signal_inout_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEEE4bindERS6_
	.size	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi4EEEEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS5_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEEE4bindERS6_
	.size	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIN5sc_dt7sc_uintILi32EEEEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTVN5sc_dt7sc_uintILi3EEE,@object # @_ZTVN5sc_dt7sc_uintILi3EEE
	.section	.rodata._ZTVN5sc_dt7sc_uintILi3EEE,"aG",@progbits,_ZTVN5sc_dt7sc_uintILi3EEE,comdat
	.weak	_ZTVN5sc_dt7sc_uintILi3EEE
	.align	16
_ZTVN5sc_dt7sc_uintILi3EEE:
	.quad	0
	.quad	_ZTIN5sc_dt7sc_uintILi3EEE
	.quad	_ZN5sc_dt13sc_value_base17concat_clear_dataEb
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_ctrlEPji
	.quad	_ZNK5sc_dt12sc_uint_base15concat_get_dataEPji
	.quad	_ZNK5sc_dt12sc_uint_base17concat_get_uint64Ev
	.quad	_ZNK5sc_dt12sc_uint_base13concat_lengthEPb
	.quad	_ZN5sc_dt12sc_uint_base10concat_setExi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_9sc_signedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setERKNS_11sc_unsignedEi
	.quad	_ZN5sc_dt12sc_uint_base10concat_setEyi
	.quad	_ZN5sc_dt7sc_uintILi3EED1Ev
	.quad	_ZN5sc_dt7sc_uintILi3EED0Ev
	.size	_ZTVN5sc_dt7sc_uintILi3EEE, 104

	.type	_ZTSN5sc_dt7sc_uintILi3EEE,@object # @_ZTSN5sc_dt7sc_uintILi3EEE
	.section	.rodata._ZTSN5sc_dt7sc_uintILi3EEE,"aG",@progbits,_ZTSN5sc_dt7sc_uintILi3EEE,comdat
	.weak	_ZTSN5sc_dt7sc_uintILi3EEE
	.align	16
_ZTSN5sc_dt7sc_uintILi3EEE:
	.asciz	 "N5sc_dt7sc_uintILi3EEE"
	.size	_ZTSN5sc_dt7sc_uintILi3EEE, 23

	.type	_ZTIN5sc_dt7sc_uintILi3EEE,@object # @_ZTIN5sc_dt7sc_uintILi3EEE
	.section	.rodata._ZTIN5sc_dt7sc_uintILi3EEE,"aG",@progbits,_ZTIN5sc_dt7sc_uintILi3EEE,comdat
	.weak	_ZTIN5sc_dt7sc_uintILi3EEE
	.align	16
_ZTIN5sc_dt7sc_uintILi3EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN5sc_dt7sc_uintILi3EEE
	.quad	_ZTIN5sc_dt12sc_uint_baseE
	.size	_ZTIN5sc_dt7sc_uintILi3EEE, 24

	.type	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,@object # @_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE:
	.quad	0
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core12sc_port_base4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED1Ev
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE, 248

	.type	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,@object # @_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE:
	.asciz	 "N7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE"
	.size	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE, 47

	.type	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,@object # @_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.quad	_ZTIN7sc_core12sc_port_baseE
	.size	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE, 24

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<bool> >::make_sensitive(sc_method_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE, 171

	.type	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE,@object # @__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<bool> >::make_sensitive(sc_thread_handle, sc_core::sc_event_finder *) const [IF = sc_core::sc_signal_in_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE, 171

	.type	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE,@object # @__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE:
	.asciz	 "virtual void sc_core::sc_port_b<sc_core::sc_signal_in_if<bool> >::add_interface(sc_core::sc_interface *) [IF = sc_core::sc_signal_in_if<bool>]"
	.size	.L__PRETTY_FUNCTION__._ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE, 143

	.type	_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,@object # @_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE:
	.quad	0
	.quad	_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.quad	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED1Ev
	.quad	_ZN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEED0Ev
	.quad	_ZNK7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEE10find_eventEPNS_12sc_interfaceE
	.size	_ZTVN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE, 40

	.type	_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,@object # @_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE:
	.asciz	 "N7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE"
	.size	_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE, 56

	.type	_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,@object # @_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.section	.rodata._ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,"aG",@progbits,_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE,comdat
	.weak	_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.align	16
_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE
	.quad	_ZTIN7sc_core15sc_event_finderE
	.size	_ZTIN7sc_core17sc_event_finder_tINS_15sc_signal_in_ifIbEEEE, 24

	.type	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.quad	0
	.quad	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZNK7sc_core9sc_object5printERSo
	.quad	_ZNK7sc_core9sc_object4dumpERSo
	.quad	_ZNK7sc_core9sc_object5traceEPNS_13sc_trace_fileE
	.quad	_ZNK7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EE4kindEv
	.quad	_ZNK7sc_core9sc_object16get_child_eventsEv
	.quad	_ZNK7sc_core9sc_object17get_child_objectsEv
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED1Ev
	.quad	_ZN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EED0Ev
	.quad	_ZN7sc_core9sc_object15add_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object16add_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object18remove_child_eventEPNS_8sc_eventE
	.quad	_ZN7sc_core9sc_object19remove_child_objectEPS0_
	.quad	_ZN7sc_core9sc_object19orphan_child_eventsEv
	.quad	_ZN7sc_core9sc_object20orphan_child_objectsEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13get_interfaceEv
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE5vbindERNS_12sc_port_baseE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE13add_interfaceEPNS_12sc_interfaceE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE15interface_countEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE11if_typenameEv
	.quad	_ZN7sc_core12sc_port_base25before_end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base18end_of_elaborationEv
	.quad	_ZN7sc_core12sc_port_base19start_of_simulationEv
	.quad	_ZN7sc_core12sc_port_base17end_of_simulationEv
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_thread_processEPNS_15sc_event_finderE
	.quad	_ZNK7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE14make_sensitiveEPNS_17sc_method_processEPNS_15sc_event_finderE
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS2_
	.quad	_ZN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEE4bindERS3_
	.size	_ZTVN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE, 248

	.type	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.asciz	 "N7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE"
	.size	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE, 72

	.type	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,@object # @_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.section	.rodata._ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,"aG",@progbits,_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE,comdat
	.weak	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.align	16
_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	_ZTSN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE
	.quad	_ZTIN7sc_core9sc_port_bINS_15sc_signal_in_ifIbEEEE
	.size	_ZTIN7sc_core7sc_portINS_15sc_signal_in_ifIbEELi1ELNS_14sc_port_policyE0EEE, 24

	.section	.ctors,"aw",@progbits
	.align	8
	.quad	_GLOBAL__I_a

	.globl	_ZN7WBSlaveC1EN7sc_core14sc_module_nameE
_ZN7WBSlaveC1EN7sc_core14sc_module_nameE = _ZN7WBSlaveC2EN7sc_core14sc_module_nameE
	.section	".note.GNU-stack","",@progbits
